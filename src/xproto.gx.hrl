%%
%% generated by gx.erl
%%
-include("stdbits.hrl").

-define(INT32(X),?int(X,signed,?ENDIAN)).
-define(INT16(X),?short(X,signed,?ENDIAN)).
-define(INT8(X),?char(X,signed,?ENDIAN)).
-define(CARD32(X),?long(X,unsigned,?ENDIAN)).
-define(CARD16(X),?short(X,unsigned,?ENDIAN)).
-define(CARD8(X),?char(X,unsigned,?ENDIAN)).
-define(BITS32(X),?CARD32(X)).
-define(BITS16(X),?CARD16(X)).
-define(BYTE(X),?CARD8(X)).
-define(BOOL(X),?CARD8(X)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSegment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSegment,{
    x1,
    y1,
    x2,
    y2
}).

-define(xSegment(X1,Y1,X2,Y2),
    ?INT16(X1),
    ?INT16(Y1),
    ?INT16(X2),
    ?INT16(Y2)).

-define(xSegment_enc(R),
  << ?xSegment(R#xSegment.x1,R#xSegment.y1,R#xSegment.x2,R#xSegment.y2)>>).

-define(xSegment_dec(B0),
 begin <<?xSegment(R_xSegment_x1, R_xSegment_y1, R_xSegment_x2, R_xSegment_y2),B1/binary>> = B0,
  { #xSegment{x1=R_xSegment_x1, y1=R_xSegment_y1, x2=R_xSegment_x2, y2=R_xSegment_y2 }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPoint
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPoint,{
    x,
    y
}).

-define(xPoint(X,Y),
    ?INT16(X),
    ?INT16(Y)).

-define(xPoint_enc(R),
  << ?xPoint(R#xPoint.x,R#xPoint.y)>>).

-define(xPoint_dec(B0),
 begin <<?xPoint(R_xPoint_x, R_xPoint_y),B1/binary>> = B0,
  { #xPoint{x=R_xPoint_x, y=R_xPoint_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xRectangle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xRectangle,{
    x,
    y,
    width,
    height
}).

-define(xRectangle(X,Y,Width,Height),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xRectangle_enc(R),
  << ?xRectangle(R#xRectangle.x,R#xRectangle.y,R#xRectangle.width,R#xRectangle.height)>>).

-define(xRectangle_dec(B0),
 begin <<?xRectangle(R_xRectangle_x, R_xRectangle_y, R_xRectangle_width, R_xRectangle_height),B1/binary>> = B0,
  { #xRectangle{x=R_xRectangle_x, y=R_xRectangle_y, width=R_xRectangle_width, height=R_xRectangle_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xArc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xArc,{
    x,
    y,
    width,
    height,
    angle1,
    angle2
}).

-define(xArc(X,Y,Width,Height,Angle1,Angle2),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?INT16(Angle1),
    ?INT16(Angle2)).

-define(xArc_enc(R),
  << ?xArc(R#xArc.x,R#xArc.y,R#xArc.width,R#xArc.height,R#xArc.angle1,R#xArc.angle2)>>).

-define(xArc_dec(B0),
 begin <<?xArc(R_xArc_x, R_xArc_y, R_xArc_width, R_xArc_height, R_xArc_angle1, R_xArc_angle2),B1/binary>> = B0,
  { #xArc{x=R_xArc_x, y=R_xArc_y, width=R_xArc_width, height=R_xArc_height, angle1=R_xArc_angle1, angle2=R_xArc_angle2 }, B1} end).


-define(sz_xSegment,8).
-define(sz_xPoint,4).
-define(sz_xRectangle,8).
-define(sz_xArc,12).
-define(sz_xConnClientPrefix,12).
-define(sz_xConnSetupPrefix,8).
-define(sz_xConnSetup,32).
-define(sz_xPixmapFormat,8).
-define(sz_xDepth,8).
-define(sz_xVisualType,24).
-define(sz_xWindowRoot,40).
-define(sz_xTimecoord,8).
-define(sz_xHostEntry,4).
-define(sz_xCharInfo,12).
-define(sz_xFontProp,8).
-define(sz_xTextElt,2).
-define(sz_xColorItem,12).
-define(sz_xrgb,8).
-define(sz_xGenericReply,32).
-define(sz_xGetWindowAttributesReply,44).
-define(sz_xGetGeometryReply,32).
-define(sz_xQueryTreeReply,32).
-define(sz_xInternAtomReply,32).
-define(sz_xGetAtomNameReply,32).
-define(sz_xGetPropertyReply,32).
-define(sz_xListPropertiesReply,32).
-define(sz_xGetSelectionOwnerReply,32).
-define(sz_xGrabPointerReply,32).
-define(sz_xQueryPointerReply,32).
-define(sz_xGetMotionEventsReply,32).
-define(sz_xTranslateCoordsReply,32).
-define(sz_xGetInputFocusReply,32).
-define(sz_xQueryKeymapReply,40).
-define(sz_xQueryFontReply,60).
-define(sz_xQueryTextExtentsReply,32).
-define(sz_xListFontsReply,32).
-define(sz_xGetFontPathReply,32).
-define(sz_xGetImageReply,32).
-define(sz_xListInstalledColormapsReply,32).
-define(sz_xAllocColorReply,32).
-define(sz_xAllocNamedColorReply,32).
-define(sz_xAllocColorCellsReply,32).
-define(sz_xAllocColorPlanesReply,32).
-define(sz_xQueryColorsReply,32).
-define(sz_xLookupColorReply,32).
-define(sz_xQueryBestSizeReply,32).
-define(sz_xQueryExtensionReply,32).
-define(sz_xListExtensionsReply,32).
-define(sz_xSetMappingReply,32).
-define(sz_xGetKeyboardControlReply,52).
-define(sz_xGetPointerControlReply,32).
-define(sz_xGetScreenSaverReply,32).
-define(sz_xListHostsReply,32).
-define(sz_xSetModifierMappingReply,32).
-define(sz_xError,32).
-define(sz_xEvent,32).
-define(sz_xKeymapEvent,32).
-define(sz_xReq,4).
-define(sz_xResourceReq,8).
-define(sz_xCreateWindowReq,32).
-define(sz_xChangeWindowAttributesReq,12).
-define(sz_xChangeSaveSetReq,8).
-define(sz_xReparentWindowReq,16).
-define(sz_xConfigureWindowReq,12).
-define(sz_xCirculateWindowReq,8).
-define(sz_xInternAtomReq,8).
-define(sz_xChangePropertyReq,24).
-define(sz_xDeletePropertyReq,12).
-define(sz_xGetPropertyReq,24).
-define(sz_xSetSelectionOwnerReq,16).
-define(sz_xConvertSelectionReq,24).
-define(sz_xSendEventReq,44).
-define(sz_xGrabPointerReq,24).
-define(sz_xGrabButtonReq,24).
-define(sz_xUngrabButtonReq,12).
-define(sz_xChangeActivePointerGrabReq,16).
-define(sz_xGrabKeyboardReq,16).
-define(sz_xGrabKeyReq,16).
-define(sz_xUngrabKeyReq,12).
-define(sz_xAllowEventsReq,8).
-define(sz_xGetMotionEventsReq,16).
-define(sz_xTranslateCoordsReq,16).
-define(sz_xWarpPointerReq,24).
-define(sz_xSetInputFocusReq,12).
-define(sz_xOpenFontReq,12).
-define(sz_xQueryTextExtentsReq,8).
-define(sz_xListFontsReq,8).
-define(sz_xSetFontPathReq,8).
-define(sz_xCreatePixmapReq,16).
-define(sz_xCreateGCReq,16).
-define(sz_xChangeGCReq,12).
-define(sz_xCopyGCReq,16).
-define(sz_xSetDashesReq,12).
-define(sz_xSetClipRectanglesReq,12).
-define(sz_xCopyAreaReq,28).
-define(sz_xCopyPlaneReq,32).
-define(sz_xPolyPointReq,12).
-define(sz_xPolySegmentReq,12).
-define(sz_xFillPolyReq,16).
-define(sz_xPutImageReq,24).
-define(sz_xGetImageReq,20).
-define(sz_xPolyTextReq,16).
-define(sz_xImageTextReq,16).
-define(sz_xCreateColormapReq,16).
-define(sz_xCopyColormapAndFreeReq,12).
-define(sz_xAllocColorReq,16).
-define(sz_xAllocNamedColorReq,12).
-define(sz_xAllocColorCellsReq,12).
-define(sz_xAllocColorPlanesReq,16).
-define(sz_xFreeColorsReq,12).
-define(sz_xStoreColorsReq,8).
-define(sz_xStoreNamedColorReq,16).
-define(sz_xQueryColorsReq,8).
-define(sz_xLookupColorReq,12).
-define(sz_xCreateCursorReq,32).
-define(sz_xCreateGlyphCursorReq,32).
-define(sz_xRecolorCursorReq,20).
-define(sz_xQueryBestSizeReq,12).
-define(sz_xQueryExtensionReq,8).
-define(sz_xChangeKeyboardControlReq,8).
-define(sz_xBellReq,4).
-define(sz_xChangePointerControlReq,12).
-define(sz_xSetScreenSaverReq,12).
-define(sz_xChangeHostsReq,8).
-define(sz_xListHostsReq,4).
-define(sz_xChangeModeReq,4).
-define(sz_xRotatePropertiesReq,12).
-define(sz_xReply,32).
-define(sz_xGrabKeyboardReply,32).
-define(sz_xListFontsWithInfoReply,60).
-define(sz_xSetPointerMappingReply,32).
-define(sz_xGetKeyboardMappingReply,32).
-define(sz_xGetPointerMappingReply,32).
-define(sz_xGetModifierMappingReply,32).
-define(sz_xListFontsWithInfoReq,8).
-define(sz_xPolyLineReq,12).
-define(sz_xPolyArcReq,12).
-define(sz_xPolyRectangleReq,12).
-define(sz_xPolyFillRectangleReq,12).
-define(sz_xPolyFillArcReq,12).
-define(sz_xPolyText8Req,16).
-define(sz_xPolyText16Req,16).
-define(sz_xImageText8Req,16).
-define(sz_xImageText16Req,16).
-define(sz_xSetPointerMappingReq,4).
-define(sz_xForceScreenSaverReq,4).
-define(sz_xSetCloseDownModeReq,4).
-define(sz_xClearAreaReq,16).
-define(sz_xSetAccessControlReq,4).
-define(sz_xGetKeyboardMappingReq,8).
-define(sz_xSetModifierMappingReq,4).
-define(sz_xPropIconSize,24).
-define(sz_xChangeKeyboardMappingReq,8).
-define(WINDOW(X),?CARD32(X)).
-define(DRAWABLE(X),?CARD32(X)).
-define(FONT(X),?CARD32(X)).
-define(PIXMAP(X),?CARD32(X)).
-define(CURSOR(X),?CARD32(X)).
-define(COLORMAP(X),?CARD32(X)).
-define(GCONTEXT(X),?CARD32(X)).
-define(ATOM(X),?CARD32(X)).
-define(VISUALID(X),?CARD32(X)).
-define(TIME(X),?CARD32(X)).
-define(KEYCODE(X),?CARD8(X)).
-define(KEYSYM(X),?CARD32(X)).
-define(X_TCP_PORT,6000).
-define(xTrue,1).
-define(xFalse,0).
-define(KEYBUTMASK(X),?CARD16(X)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConnClientPrefix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConnClientPrefix,{
    byteOrder,
    majorVersion,
    minorVersion,
    nbytesAuthProto,
    nbytesAuthString
}).

-define(xConnClientPrefix(ByteOrder,Pad,MajorVersion,MinorVersion,NbytesAuthProto,NbytesAuthString,Pad2),
    ?CARD8(ByteOrder),
    ?BYTE(Pad),
    ?CARD16(MajorVersion),
    ?CARD16(MinorVersion),
    ?CARD16(NbytesAuthProto),
    ?CARD16(NbytesAuthString),
    ?CARD16(Pad2)).

-define(xConnClientPrefix_enc(R),
  << ?xConnClientPrefix(R#xConnClientPrefix.byteOrder,0,R#xConnClientPrefix.majorVersion,R#xConnClientPrefix.minorVersion,R#xConnClientPrefix.nbytesAuthProto,R#xConnClientPrefix.nbytesAuthString,0)>>).

-define(xConnClientPrefix_dec(B0),
 begin <<?xConnClientPrefix(R_xConnClientPrefix_byteOrder, _, R_xConnClientPrefix_majorVersion, R_xConnClientPrefix_minorVersion, R_xConnClientPrefix_nbytesAuthProto, R_xConnClientPrefix_nbytesAuthString, _),B1/binary>> = B0,
  { #xConnClientPrefix{byteOrder=R_xConnClientPrefix_byteOrder, majorVersion=R_xConnClientPrefix_majorVersion, minorVersion=R_xConnClientPrefix_minorVersion, nbytesAuthProto=R_xConnClientPrefix_nbytesAuthProto, nbytesAuthString=R_xConnClientPrefix_nbytesAuthString }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConnSetupPrefix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConnSetupPrefix,{
    success,
    lengthReason,
    majorVersion,
    minorVersion,
    length
}).

-define(xConnSetupPrefix(Success,LengthReason,MajorVersion,MinorVersion,Length),
    ?CARD8(Success),
    ?BYTE(LengthReason),
    ?CARD16(MajorVersion),
    ?CARD16(MinorVersion),
    ?CARD16(Length)).

-define(xConnSetupPrefix_enc(R),
  << ?xConnSetupPrefix(R#xConnSetupPrefix.success,R#xConnSetupPrefix.lengthReason,R#xConnSetupPrefix.majorVersion,R#xConnSetupPrefix.minorVersion,R#xConnSetupPrefix.length)>>).

-define(xConnSetupPrefix_dec(B0),
 begin <<?xConnSetupPrefix(R_xConnSetupPrefix_success, R_xConnSetupPrefix_lengthReason, R_xConnSetupPrefix_majorVersion, R_xConnSetupPrefix_minorVersion, R_xConnSetupPrefix_length),B1/binary>> = B0,
  { #xConnSetupPrefix{success=R_xConnSetupPrefix_success, lengthReason=R_xConnSetupPrefix_lengthReason, majorVersion=R_xConnSetupPrefix_majorVersion, minorVersion=R_xConnSetupPrefix_minorVersion, length=R_xConnSetupPrefix_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConnSetup
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConnSetup,{
    release,
    ridBase,
    ridMask,
    motionBufferSize,
    nbytesVendor,
    maxRequestSize,
    numRoots,
    numFormats,
    imageByteOrder,
    bitmapBitOrder,
    bitmapScanlineUnit,
    bitmapScanlinePad,
    minKeyCode,
    maxKeyCode
}).

-define(xConnSetup(Release,RidBase,RidMask,MotionBufferSize,NbytesVendor,MaxRequestSize,NumRoots,NumFormats,ImageByteOrder,BitmapBitOrder,BitmapScanlineUnit,BitmapScanlinePad,MinKeyCode,MaxKeyCode,Pad2),
    ?CARD32(Release),
    ?CARD32(RidBase),
    ?CARD32(RidMask),
    ?CARD32(MotionBufferSize),
    ?CARD16(NbytesVendor),
    ?CARD16(MaxRequestSize),
    ?CARD8(NumRoots),
    ?CARD8(NumFormats),
    ?CARD8(ImageByteOrder),
    ?CARD8(BitmapBitOrder),
    ?CARD8(BitmapScanlineUnit),
    ?CARD8(BitmapScanlinePad),
    ?KEYCODE(MinKeyCode),
    ?KEYCODE(MaxKeyCode),
    ?CARD32(Pad2)).

-define(xConnSetup_enc(R),
  << ?xConnSetup(R#xConnSetup.release,R#xConnSetup.ridBase,R#xConnSetup.ridMask,R#xConnSetup.motionBufferSize,R#xConnSetup.nbytesVendor,R#xConnSetup.maxRequestSize,R#xConnSetup.numRoots,R#xConnSetup.numFormats,R#xConnSetup.imageByteOrder,R#xConnSetup.bitmapBitOrder,R#xConnSetup.bitmapScanlineUnit,R#xConnSetup.bitmapScanlinePad,R#xConnSetup.minKeyCode,R#xConnSetup.maxKeyCode,0)>>).

-define(xConnSetup_dec(B0),
 begin <<?xConnSetup(R_xConnSetup_release, R_xConnSetup_ridBase, R_xConnSetup_ridMask, R_xConnSetup_motionBufferSize, R_xConnSetup_nbytesVendor, R_xConnSetup_maxRequestSize, R_xConnSetup_numRoots, R_xConnSetup_numFormats, R_xConnSetup_imageByteOrder, R_xConnSetup_bitmapBitOrder, R_xConnSetup_bitmapScanlineUnit, R_xConnSetup_bitmapScanlinePad, R_xConnSetup_minKeyCode, R_xConnSetup_maxKeyCode, _),B1/binary>> = B0,
  { #xConnSetup{release=R_xConnSetup_release, ridBase=R_xConnSetup_ridBase, ridMask=R_xConnSetup_ridMask, motionBufferSize=R_xConnSetup_motionBufferSize, nbytesVendor=R_xConnSetup_nbytesVendor, maxRequestSize=R_xConnSetup_maxRequestSize, numRoots=R_xConnSetup_numRoots, numFormats=R_xConnSetup_numFormats, imageByteOrder=R_xConnSetup_imageByteOrder, bitmapBitOrder=R_xConnSetup_bitmapBitOrder, bitmapScanlineUnit=R_xConnSetup_bitmapScanlineUnit, bitmapScanlinePad=R_xConnSetup_bitmapScanlinePad, minKeyCode=R_xConnSetup_minKeyCode, maxKeyCode=R_xConnSetup_maxKeyCode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPixmapFormat
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPixmapFormat,{
    depth,
    bitsPerPixel,
    scanLinePad
}).

-define(xPixmapFormat(Depth,BitsPerPixel,ScanLinePad,Pad1,Pad2),
    ?CARD8(Depth),
    ?CARD8(BitsPerPixel),
    ?CARD8(ScanLinePad),
    ?CARD8(Pad1),
    ?CARD32(Pad2)).

-define(xPixmapFormat_enc(R),
  << ?xPixmapFormat(R#xPixmapFormat.depth,R#xPixmapFormat.bitsPerPixel,R#xPixmapFormat.scanLinePad,0,0)>>).

-define(xPixmapFormat_dec(B0),
 begin <<?xPixmapFormat(R_xPixmapFormat_depth, R_xPixmapFormat_bitsPerPixel, R_xPixmapFormat_scanLinePad, _, _),B1/binary>> = B0,
  { #xPixmapFormat{depth=R_xPixmapFormat_depth, bitsPerPixel=R_xPixmapFormat_bitsPerPixel, scanLinePad=R_xPixmapFormat_scanLinePad }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xDepth
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xDepth,{
    depth,
    nVisuals
}).

-define(xDepth(Depth,Pad1,NVisuals,Pad2),
    ?CARD8(Depth),
    ?CARD8(Pad1),
    ?CARD16(NVisuals),
    ?CARD32(Pad2)).

-define(xDepth_enc(R),
  << ?xDepth(R#xDepth.depth,0,R#xDepth.nVisuals,0)>>).

-define(xDepth_dec(B0),
 begin <<?xDepth(R_xDepth_depth, _, R_xDepth_nVisuals, _),B1/binary>> = B0,
  { #xDepth{depth=R_xDepth_depth, nVisuals=R_xDepth_nVisuals }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xVisualType
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xVisualType,{
    visualID,
    class,
    bitsPerRGB,
    colormapEntries,
    redMask,
    greenMask,
    blueMask
}).

-define(xVisualType(VisualID,Class,BitsPerRGB,ColormapEntries,RedMask,GreenMask,BlueMask,Pad),
    ?VISUALID(VisualID),
    ?CARD8(Class),
    ?CARD8(BitsPerRGB),
    ?CARD16(ColormapEntries),
    ?CARD32(RedMask),
    ?CARD32(GreenMask),
    ?CARD32(BlueMask),
    ?CARD32(Pad)).

-define(xVisualType_enc(R),
  << ?xVisualType(R#xVisualType.visualID,R#xVisualType.class,R#xVisualType.bitsPerRGB,R#xVisualType.colormapEntries,R#xVisualType.redMask,R#xVisualType.greenMask,R#xVisualType.blueMask,0)>>).

-define(xVisualType_dec(B0),
 begin <<?xVisualType(R_xVisualType_visualID, R_xVisualType_class, R_xVisualType_bitsPerRGB, R_xVisualType_colormapEntries, R_xVisualType_redMask, R_xVisualType_greenMask, R_xVisualType_blueMask, _),B1/binary>> = B0,
  { #xVisualType{visualID=R_xVisualType_visualID, class=R_xVisualType_class, bitsPerRGB=R_xVisualType_bitsPerRGB, colormapEntries=R_xVisualType_colormapEntries, redMask=R_xVisualType_redMask, greenMask=R_xVisualType_greenMask, blueMask=R_xVisualType_blueMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xWindowRoot
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xWindowRoot,{
    windowId,
    defaultColormap,
    whitePixel,
    blackPixel,
    currentInputMask,
    pixWidth,
    pixHeight,
    mmWidth,
    mmHeight,
    minInstalledMaps,
    maxInstalledMaps,
    rootVisualID,
    backingStore,
    saveUnders,
    rootDepth,
    nDepths
}).

-define(xWindowRoot(WindowId,DefaultColormap,WhitePixel,BlackPixel,CurrentInputMask,PixWidth,PixHeight,MmWidth,MmHeight,MinInstalledMaps,MaxInstalledMaps,RootVisualID,BackingStore,SaveUnders,RootDepth,NDepths),
    ?WINDOW(WindowId),
    ?COLORMAP(DefaultColormap),
    ?CARD32(WhitePixel),
    ?CARD32(BlackPixel),
    ?CARD32(CurrentInputMask),
    ?CARD16(PixWidth),
    ?CARD16(PixHeight),
    ?CARD16(MmWidth),
    ?CARD16(MmHeight),
    ?CARD16(MinInstalledMaps),
    ?CARD16(MaxInstalledMaps),
    ?VISUALID(RootVisualID),
    ?CARD8(BackingStore),
    ?BOOL(SaveUnders),
    ?CARD8(RootDepth),
    ?CARD8(NDepths)).

-define(xWindowRoot_enc(R),
  << ?xWindowRoot(R#xWindowRoot.windowId,R#xWindowRoot.defaultColormap,R#xWindowRoot.whitePixel,R#xWindowRoot.blackPixel,R#xWindowRoot.currentInputMask,R#xWindowRoot.pixWidth,R#xWindowRoot.pixHeight,R#xWindowRoot.mmWidth,R#xWindowRoot.mmHeight,R#xWindowRoot.minInstalledMaps,R#xWindowRoot.maxInstalledMaps,R#xWindowRoot.rootVisualID,R#xWindowRoot.backingStore,R#xWindowRoot.saveUnders,R#xWindowRoot.rootDepth,R#xWindowRoot.nDepths)>>).

-define(xWindowRoot_dec(B0),
 begin <<?xWindowRoot(R_xWindowRoot_windowId, R_xWindowRoot_defaultColormap, R_xWindowRoot_whitePixel, R_xWindowRoot_blackPixel, R_xWindowRoot_currentInputMask, R_xWindowRoot_pixWidth, R_xWindowRoot_pixHeight, R_xWindowRoot_mmWidth, R_xWindowRoot_mmHeight, R_xWindowRoot_minInstalledMaps, R_xWindowRoot_maxInstalledMaps, R_xWindowRoot_rootVisualID, R_xWindowRoot_backingStore, R_xWindowRoot_saveUnders, R_xWindowRoot_rootDepth, R_xWindowRoot_nDepths),B1/binary>> = B0,
  { #xWindowRoot{windowId=R_xWindowRoot_windowId, defaultColormap=R_xWindowRoot_defaultColormap, whitePixel=R_xWindowRoot_whitePixel, blackPixel=R_xWindowRoot_blackPixel, currentInputMask=R_xWindowRoot_currentInputMask, pixWidth=R_xWindowRoot_pixWidth, pixHeight=R_xWindowRoot_pixHeight, mmWidth=R_xWindowRoot_mmWidth, mmHeight=R_xWindowRoot_mmHeight, minInstalledMaps=R_xWindowRoot_minInstalledMaps, maxInstalledMaps=R_xWindowRoot_maxInstalledMaps, rootVisualID=R_xWindowRoot_rootVisualID, backingStore=R_xWindowRoot_backingStore, saveUnders=R_xWindowRoot_saveUnders, rootDepth=R_xWindowRoot_rootDepth, nDepths=R_xWindowRoot_nDepths }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xTimecoord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xTimecoord,{
    time,
    x,
    y
}).

-define(xTimecoord(Time,X,Y),
    ?CARD32(Time),
    ?INT16(X),
    ?INT16(Y)).

-define(xTimecoord_enc(R),
  << ?xTimecoord(R#xTimecoord.time,R#xTimecoord.x,R#xTimecoord.y)>>).

-define(xTimecoord_dec(B0),
 begin <<?xTimecoord(R_xTimecoord_time, R_xTimecoord_x, R_xTimecoord_y),B1/binary>> = B0,
  { #xTimecoord{time=R_xTimecoord_time, x=R_xTimecoord_x, y=R_xTimecoord_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xHostEntry
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xHostEntry,{
    family,
    length
}).

-define(xHostEntry(Family,Pad,Length),
    ?CARD8(Family),
    ?BYTE(Pad),
    ?CARD16(Length)).

-define(xHostEntry_enc(R),
  << ?xHostEntry(R#xHostEntry.family,0,R#xHostEntry.length)>>).

-define(xHostEntry_dec(B0),
 begin <<?xHostEntry(R_xHostEntry_family, _, R_xHostEntry_length),B1/binary>> = B0,
  { #xHostEntry{family=R_xHostEntry_family, length=R_xHostEntry_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCharInfo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCharInfo,{
    leftSideBearing,
    rightSideBearing,
    characterWidth,
    ascent,
    descent,
    attributes
}).

-define(xCharInfo(LeftSideBearing,RightSideBearing,CharacterWidth,Ascent,Descent,Attributes),
    ?INT16(LeftSideBearing),
    ?INT16(RightSideBearing),
    ?INT16(CharacterWidth),
    ?INT16(Ascent),
    ?INT16(Descent),
    ?CARD16(Attributes)).

-define(xCharInfo_enc(R),
  << ?xCharInfo(R#xCharInfo.leftSideBearing,R#xCharInfo.rightSideBearing,R#xCharInfo.characterWidth,R#xCharInfo.ascent,R#xCharInfo.descent,R#xCharInfo.attributes)>>).

-define(xCharInfo_dec(B0),
 begin <<?xCharInfo(R_xCharInfo_leftSideBearing, R_xCharInfo_rightSideBearing, R_xCharInfo_characterWidth, R_xCharInfo_ascent, R_xCharInfo_descent, R_xCharInfo_attributes),B1/binary>> = B0,
  { #xCharInfo{leftSideBearing=R_xCharInfo_leftSideBearing, rightSideBearing=R_xCharInfo_rightSideBearing, characterWidth=R_xCharInfo_characterWidth, ascent=R_xCharInfo_ascent, descent=R_xCharInfo_descent, attributes=R_xCharInfo_attributes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFontProp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFontProp,{
    name,
    value
}).

-define(xFontProp(Name,Value),
    ?ATOM(Name),
    ?CARD32(Value)).

-define(xFontProp_enc(R),
  << ?xFontProp(R#xFontProp.name,R#xFontProp.value)>>).

-define(xFontProp_dec(B0),
 begin <<?xFontProp(R_xFontProp_name, R_xFontProp_value),B1/binary>> = B0,
  { #xFontProp{name=R_xFontProp_name, value=R_xFontProp_value }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xTextElt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xTextElt,{
    len,
    delta
}).

-define(xTextElt(Len,Delta),
    ?CARD8(Len),
    ?INT8(Delta)).

-define(xTextElt_enc(R),
  << ?xTextElt(R#xTextElt.len,R#xTextElt.delta)>>).

-define(xTextElt_dec(B0),
 begin <<?xTextElt(R_xTextElt_len, R_xTextElt_delta),B1/binary>> = B0,
  { #xTextElt{len=R_xTextElt_len, delta=R_xTextElt_delta }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xColorItem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xColorItem,{
    pixel,
    red,
    green,
    blue,
    flags
}).

-define(xColorItem(Pixel,Red,Green,Blue,Flags,Pad),
    ?CARD32(Pixel),
    ?CARD16(Red),
    ?CARD16(Green),
    ?CARD16(Blue),
    ?CARD8(Flags),
    ?CARD8(Pad)).

-define(xColorItem_enc(R),
  << ?xColorItem(R#xColorItem.pixel,R#xColorItem.red,R#xColorItem.green,R#xColorItem.blue,R#xColorItem.flags,0)>>).

-define(xColorItem_dec(B0),
 begin <<?xColorItem(R_xColorItem_pixel, R_xColorItem_red, R_xColorItem_green, R_xColorItem_blue, R_xColorItem_flags, _),B1/binary>> = B0,
  { #xColorItem{pixel=R_xColorItem_pixel, red=R_xColorItem_red, green=R_xColorItem_green, blue=R_xColorItem_blue, flags=R_xColorItem_flags }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xrgb
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xrgb,{
    red,
    green,
    blue
}).

-define(xrgb(Red,Green,Blue,Pad),
    ?CARD16(Red),
    ?CARD16(Green),
    ?CARD16(Blue),
    ?CARD16(Pad)).

-define(xrgb_enc(R),
  << ?xrgb(R#xrgb.red,R#xrgb.green,R#xrgb.blue,0)>>).

-define(xrgb_dec(B0),
 begin <<?xrgb(R_xrgb_red, R_xrgb_green, R_xrgb_blue, _),B1/binary>> = B0,
  { #xrgb{red=R_xrgb_red, green=R_xrgb_green, blue=R_xrgb_blue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGenericReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGenericReply,{
    type,
    data1,
    sequenceNumber,
    length,
    data00,
    data01,
    data02,
    data03,
    data04,
    data05
}).

-define(xGenericReply(Type,Data1,SequenceNumber,Length,Data00,Data01,Data02,Data03,Data04,Data05),
    ?BYTE(Type),
    ?BYTE(Data1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Data00),
    ?CARD32(Data01),
    ?CARD32(Data02),
    ?CARD32(Data03),
    ?CARD32(Data04),
    ?CARD32(Data05)).

-define(xGenericReply_enc(R),
  << ?xGenericReply(R#xGenericReply.type,R#xGenericReply.data1,R#xGenericReply.sequenceNumber,R#xGenericReply.length,R#xGenericReply.data00,R#xGenericReply.data01,R#xGenericReply.data02,R#xGenericReply.data03,R#xGenericReply.data04,R#xGenericReply.data05)>>).

-define(xGenericReply_dec(B0),
 begin <<?xGenericReply(R_xGenericReply_type, R_xGenericReply_data1, R_xGenericReply_sequenceNumber, R_xGenericReply_length, R_xGenericReply_data00, R_xGenericReply_data01, R_xGenericReply_data02, R_xGenericReply_data03, R_xGenericReply_data04, R_xGenericReply_data05),B1/binary>> = B0,
  { #xGenericReply{type=R_xGenericReply_type, data1=R_xGenericReply_data1, sequenceNumber=R_xGenericReply_sequenceNumber, length=R_xGenericReply_length, data00=R_xGenericReply_data00, data01=R_xGenericReply_data01, data02=R_xGenericReply_data02, data03=R_xGenericReply_data03, data04=R_xGenericReply_data04, data05=R_xGenericReply_data05 }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetWindowAttributesReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetWindowAttributesReply,{
    type,
    backingStore,
    sequenceNumber,
    length,
    visualID,
    class,
    bitGravity,
    winGravity,
    backingBitPlanes,
    backingPixel,
    saveUnder,
    mapInstalled,
    mapState,
    override,
    colormap,
    allEventMasks,
    yourEventMask,
    doNotPropagateMask
}).

-define(xGetWindowAttributesReply(Type,BackingStore,SequenceNumber,Length,VisualID,Class,BitGravity,WinGravity,BackingBitPlanes,BackingPixel,SaveUnder,MapInstalled,MapState,Override,Colormap,AllEventMasks,YourEventMask,DoNotPropagateMask,Pad),
    ?BYTE(Type),
    ?CARD8(BackingStore),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?VISUALID(VisualID),
    ?CARD16(Class),
    ?CARD8(BitGravity),
    ?CARD8(WinGravity),
    ?CARD32(BackingBitPlanes),
    ?CARD32(BackingPixel),
    ?BOOL(SaveUnder),
    ?BOOL(MapInstalled),
    ?CARD8(MapState),
    ?BOOL(Override),
    ?COLORMAP(Colormap),
    ?CARD32(AllEventMasks),
    ?CARD32(YourEventMask),
    ?CARD16(DoNotPropagateMask),
    ?CARD16(Pad)).

-define(xGetWindowAttributesReply_enc(R),
  << ?xGetWindowAttributesReply(R#xGetWindowAttributesReply.type,R#xGetWindowAttributesReply.backingStore,R#xGetWindowAttributesReply.sequenceNumber,R#xGetWindowAttributesReply.length,R#xGetWindowAttributesReply.visualID,R#xGetWindowAttributesReply.class,R#xGetWindowAttributesReply.bitGravity,R#xGetWindowAttributesReply.winGravity,R#xGetWindowAttributesReply.backingBitPlanes,R#xGetWindowAttributesReply.backingPixel,R#xGetWindowAttributesReply.saveUnder,R#xGetWindowAttributesReply.mapInstalled,R#xGetWindowAttributesReply.mapState,R#xGetWindowAttributesReply.override,R#xGetWindowAttributesReply.colormap,R#xGetWindowAttributesReply.allEventMasks,R#xGetWindowAttributesReply.yourEventMask,R#xGetWindowAttributesReply.doNotPropagateMask,0)>>).

-define(xGetWindowAttributesReply_dec(B0),
 begin <<?xGetWindowAttributesReply(R_xGetWindowAttributesReply_type, R_xGetWindowAttributesReply_backingStore, R_xGetWindowAttributesReply_sequenceNumber, R_xGetWindowAttributesReply_length, R_xGetWindowAttributesReply_visualID, R_xGetWindowAttributesReply_class, R_xGetWindowAttributesReply_bitGravity, R_xGetWindowAttributesReply_winGravity, R_xGetWindowAttributesReply_backingBitPlanes, R_xGetWindowAttributesReply_backingPixel, R_xGetWindowAttributesReply_saveUnder, R_xGetWindowAttributesReply_mapInstalled, R_xGetWindowAttributesReply_mapState, R_xGetWindowAttributesReply_override, R_xGetWindowAttributesReply_colormap, R_xGetWindowAttributesReply_allEventMasks, R_xGetWindowAttributesReply_yourEventMask, R_xGetWindowAttributesReply_doNotPropagateMask, _),B1/binary>> = B0,
  { #xGetWindowAttributesReply{type=R_xGetWindowAttributesReply_type, backingStore=R_xGetWindowAttributesReply_backingStore, sequenceNumber=R_xGetWindowAttributesReply_sequenceNumber, length=R_xGetWindowAttributesReply_length, visualID=R_xGetWindowAttributesReply_visualID, class=R_xGetWindowAttributesReply_class, bitGravity=R_xGetWindowAttributesReply_bitGravity, winGravity=R_xGetWindowAttributesReply_winGravity, backingBitPlanes=R_xGetWindowAttributesReply_backingBitPlanes, backingPixel=R_xGetWindowAttributesReply_backingPixel, saveUnder=R_xGetWindowAttributesReply_saveUnder, mapInstalled=R_xGetWindowAttributesReply_mapInstalled, mapState=R_xGetWindowAttributesReply_mapState, override=R_xGetWindowAttributesReply_override, colormap=R_xGetWindowAttributesReply_colormap, allEventMasks=R_xGetWindowAttributesReply_allEventMasks, yourEventMask=R_xGetWindowAttributesReply_yourEventMask, doNotPropagateMask=R_xGetWindowAttributesReply_doNotPropagateMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetGeometryReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetGeometryReply,{
    type,
    depth,
    sequenceNumber,
    length,
    root,
    x,
    y,
    width,
    height,
    borderWidth
}).

-define(xGetGeometryReply(Type,Depth,SequenceNumber,Length,Root,X,Y,Width,Height,BorderWidth,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?CARD8(Depth),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Root),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(BorderWidth),
    ?CARD16(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3)).

-define(xGetGeometryReply_enc(R),
  << ?xGetGeometryReply(R#xGetGeometryReply.type,R#xGetGeometryReply.depth,R#xGetGeometryReply.sequenceNumber,R#xGetGeometryReply.length,R#xGetGeometryReply.root,R#xGetGeometryReply.x,R#xGetGeometryReply.y,R#xGetGeometryReply.width,R#xGetGeometryReply.height,R#xGetGeometryReply.borderWidth,0,0,0)>>).

-define(xGetGeometryReply_dec(B0),
 begin <<?xGetGeometryReply(R_xGetGeometryReply_type, R_xGetGeometryReply_depth, R_xGetGeometryReply_sequenceNumber, R_xGetGeometryReply_length, R_xGetGeometryReply_root, R_xGetGeometryReply_x, R_xGetGeometryReply_y, R_xGetGeometryReply_width, R_xGetGeometryReply_height, R_xGetGeometryReply_borderWidth, _, _, _),B1/binary>> = B0,
  { #xGetGeometryReply{type=R_xGetGeometryReply_type, depth=R_xGetGeometryReply_depth, sequenceNumber=R_xGetGeometryReply_sequenceNumber, length=R_xGetGeometryReply_length, root=R_xGetGeometryReply_root, x=R_xGetGeometryReply_x, y=R_xGetGeometryReply_y, width=R_xGetGeometryReply_width, height=R_xGetGeometryReply_height, borderWidth=R_xGetGeometryReply_borderWidth }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryTreeReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryTreeReply,{
    type,
    sequenceNumber,
    length,
    root,
    parent,
    nChildren
}).

-define(xQueryTreeReply(Type,Pad1,SequenceNumber,Length,Root,Parent,NChildren,Pad2,Pad3,Pad4,Pad5),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Root),
    ?WINDOW(Parent),
    ?CARD16(NChildren),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5)).

-define(xQueryTreeReply_enc(R),
  << ?xQueryTreeReply(R#xQueryTreeReply.type,0,R#xQueryTreeReply.sequenceNumber,R#xQueryTreeReply.length,R#xQueryTreeReply.root,R#xQueryTreeReply.parent,R#xQueryTreeReply.nChildren,0,0,0,0)>>).

-define(xQueryTreeReply_dec(B0),
 begin <<?xQueryTreeReply(R_xQueryTreeReply_type, _, R_xQueryTreeReply_sequenceNumber, R_xQueryTreeReply_length, R_xQueryTreeReply_root, R_xQueryTreeReply_parent, R_xQueryTreeReply_nChildren, _, _, _, _),B1/binary>> = B0,
  { #xQueryTreeReply{type=R_xQueryTreeReply_type, sequenceNumber=R_xQueryTreeReply_sequenceNumber, length=R_xQueryTreeReply_length, root=R_xQueryTreeReply_root, parent=R_xQueryTreeReply_parent, nChildren=R_xQueryTreeReply_nChildren }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xInternAtomReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xInternAtomReply,{
    type,
    sequenceNumber,
    length,
    atom
}).

-define(xInternAtomReply(Type,Pad1,SequenceNumber,Length,Atom,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?ATOM(Atom),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xInternAtomReply_enc(R),
  << ?xInternAtomReply(R#xInternAtomReply.type,0,R#xInternAtomReply.sequenceNumber,R#xInternAtomReply.length,R#xInternAtomReply.atom,0,0,0,0,0)>>).

-define(xInternAtomReply_dec(B0),
 begin <<?xInternAtomReply(R_xInternAtomReply_type, _, R_xInternAtomReply_sequenceNumber, R_xInternAtomReply_length, R_xInternAtomReply_atom, _, _, _, _, _),B1/binary>> = B0,
  { #xInternAtomReply{type=R_xInternAtomReply_type, sequenceNumber=R_xInternAtomReply_sequenceNumber, length=R_xInternAtomReply_length, atom=R_xInternAtomReply_atom }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetAtomNameReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetAtomNameReply,{
    type,
    sequenceNumber,
    length,
    nameLength
}).

-define(xGetAtomNameReply(Type,Pad1,SequenceNumber,Length,NameLength,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NameLength),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xGetAtomNameReply_enc(R),
  << ?xGetAtomNameReply(R#xGetAtomNameReply.type,0,R#xGetAtomNameReply.sequenceNumber,R#xGetAtomNameReply.length,R#xGetAtomNameReply.nameLength,0,0,0,0,0,0)>>).

-define(xGetAtomNameReply_dec(B0),
 begin <<?xGetAtomNameReply(R_xGetAtomNameReply_type, _, R_xGetAtomNameReply_sequenceNumber, R_xGetAtomNameReply_length, R_xGetAtomNameReply_nameLength, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGetAtomNameReply{type=R_xGetAtomNameReply_type, sequenceNumber=R_xGetAtomNameReply_sequenceNumber, length=R_xGetAtomNameReply_length, nameLength=R_xGetAtomNameReply_nameLength }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetPropertyReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetPropertyReply,{
    type,
    format,
    sequenceNumber,
    length,
    propertyType,
    bytesAfter,
    nItems
}).

-define(xGetPropertyReply(Type,Format,SequenceNumber,Length,PropertyType,BytesAfter,NItems,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?CARD8(Format),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?ATOM(PropertyType),
    ?CARD32(BytesAfter),
    ?CARD32(NItems),
    ?CARD32(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3)).

-define(xGetPropertyReply_enc(R),
  << ?xGetPropertyReply(R#xGetPropertyReply.type,R#xGetPropertyReply.format,R#xGetPropertyReply.sequenceNumber,R#xGetPropertyReply.length,R#xGetPropertyReply.propertyType,R#xGetPropertyReply.bytesAfter,R#xGetPropertyReply.nItems,0,0,0)>>).

-define(xGetPropertyReply_dec(B0),
 begin <<?xGetPropertyReply(R_xGetPropertyReply_type, R_xGetPropertyReply_format, R_xGetPropertyReply_sequenceNumber, R_xGetPropertyReply_length, R_xGetPropertyReply_propertyType, R_xGetPropertyReply_bytesAfter, R_xGetPropertyReply_nItems, _, _, _),B1/binary>> = B0,
  { #xGetPropertyReply{type=R_xGetPropertyReply_type, format=R_xGetPropertyReply_format, sequenceNumber=R_xGetPropertyReply_sequenceNumber, length=R_xGetPropertyReply_length, propertyType=R_xGetPropertyReply_propertyType, bytesAfter=R_xGetPropertyReply_bytesAfter, nItems=R_xGetPropertyReply_nItems }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListPropertiesReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListPropertiesReply,{
    type,
    sequenceNumber,
    length,
    nProperties
}).

-define(xListPropertiesReply(Type,Pad1,SequenceNumber,Length,NProperties,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NProperties),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xListPropertiesReply_enc(R),
  << ?xListPropertiesReply(R#xListPropertiesReply.type,0,R#xListPropertiesReply.sequenceNumber,R#xListPropertiesReply.length,R#xListPropertiesReply.nProperties,0,0,0,0,0,0)>>).

-define(xListPropertiesReply_dec(B0),
 begin <<?xListPropertiesReply(R_xListPropertiesReply_type, _, R_xListPropertiesReply_sequenceNumber, R_xListPropertiesReply_length, R_xListPropertiesReply_nProperties, _, _, _, _, _, _),B1/binary>> = B0,
  { #xListPropertiesReply{type=R_xListPropertiesReply_type, sequenceNumber=R_xListPropertiesReply_sequenceNumber, length=R_xListPropertiesReply_length, nProperties=R_xListPropertiesReply_nProperties }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetSelectionOwnerReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetSelectionOwnerReply,{
    type,
    sequenceNumber,
    length,
    owner
}).

-define(xGetSelectionOwnerReply(Type,Pad1,SequenceNumber,Length,Owner,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Owner),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGetSelectionOwnerReply_enc(R),
  << ?xGetSelectionOwnerReply(R#xGetSelectionOwnerReply.type,0,R#xGetSelectionOwnerReply.sequenceNumber,R#xGetSelectionOwnerReply.length,R#xGetSelectionOwnerReply.owner,0,0,0,0,0)>>).

-define(xGetSelectionOwnerReply_dec(B0),
 begin <<?xGetSelectionOwnerReply(R_xGetSelectionOwnerReply_type, _, R_xGetSelectionOwnerReply_sequenceNumber, R_xGetSelectionOwnerReply_length, R_xGetSelectionOwnerReply_owner, _, _, _, _, _),B1/binary>> = B0,
  { #xGetSelectionOwnerReply{type=R_xGetSelectionOwnerReply_type, sequenceNumber=R_xGetSelectionOwnerReply_sequenceNumber, length=R_xGetSelectionOwnerReply_length, owner=R_xGetSelectionOwnerReply_owner }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabPointerReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabPointerReply,{
    type,
    status,
    sequenceNumber,
    length
}).

-define(xGrabPointerReply(Type,Status,SequenceNumber,Length,Pad1,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Status),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGrabPointerReply_enc(R),
  << ?xGrabPointerReply(R#xGrabPointerReply.type,R#xGrabPointerReply.status,R#xGrabPointerReply.sequenceNumber,R#xGrabPointerReply.length,0,0,0,0,0,0)>>).

-define(xGrabPointerReply_dec(B0),
 begin <<?xGrabPointerReply(R_xGrabPointerReply_type, R_xGrabPointerReply_status, R_xGrabPointerReply_sequenceNumber, R_xGrabPointerReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGrabPointerReply{type=R_xGrabPointerReply_type, status=R_xGrabPointerReply_status, sequenceNumber=R_xGrabPointerReply_sequenceNumber, length=R_xGrabPointerReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabKeyboardReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabKeyboardReply,{
    type,
    status,
    sequenceNumber,
    length
}).

-define(xGrabKeyboardReply(Type,Status,SequenceNumber,Length,Pad1,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Status,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Length,unsigned,?ENDIAN),
    ?long(Pad1,unsigned,?ENDIAN),
    ?long(Pad2,unsigned,?ENDIAN),
    ?long(Pad3,unsigned,?ENDIAN),
    ?long(Pad4,unsigned,?ENDIAN),
    ?long(Pad5,unsigned,?ENDIAN),
    ?long(Pad6,unsigned,?ENDIAN)).

-define(xGrabKeyboardReply_enc(R),
  << ?xGrabKeyboardReply(R#xGrabKeyboardReply.type,R#xGrabKeyboardReply.status,R#xGrabKeyboardReply.sequenceNumber,R#xGrabKeyboardReply.length,0,0,0,0,0,0)>>).

-define(xGrabKeyboardReply_dec(B0),
 begin <<?xGrabKeyboardReply(R_xGrabKeyboardReply_type, R_xGrabKeyboardReply_status, R_xGrabKeyboardReply_sequenceNumber, R_xGrabKeyboardReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGrabKeyboardReply{type=R_xGrabKeyboardReply_type, status=R_xGrabKeyboardReply_status, sequenceNumber=R_xGrabKeyboardReply_sequenceNumber, length=R_xGrabKeyboardReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryPointerReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryPointerReply,{
    type,
    sameScreen,
    sequenceNumber,
    length,
    root,
    child,
    rootX,
    rootY,
    winX,
    winY,
    mask
}).

-define(xQueryPointerReply(Type,SameScreen,SequenceNumber,Length,Root,Child,RootX,RootY,WinX,WinY,Mask,Pad1,Pad),
    ?BYTE(Type),
    ?BOOL(SameScreen),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Root),
    ?WINDOW(Child),
    ?INT16(RootX),
    ?INT16(RootY),
    ?INT16(WinX),
    ?INT16(WinY),
    ?CARD16(Mask),
    ?CARD16(Pad1),
    ?CARD32(Pad)).

-define(xQueryPointerReply_enc(R),
  << ?xQueryPointerReply(R#xQueryPointerReply.type,R#xQueryPointerReply.sameScreen,R#xQueryPointerReply.sequenceNumber,R#xQueryPointerReply.length,R#xQueryPointerReply.root,R#xQueryPointerReply.child,R#xQueryPointerReply.rootX,R#xQueryPointerReply.rootY,R#xQueryPointerReply.winX,R#xQueryPointerReply.winY,R#xQueryPointerReply.mask,0,0)>>).

-define(xQueryPointerReply_dec(B0),
 begin <<?xQueryPointerReply(R_xQueryPointerReply_type, R_xQueryPointerReply_sameScreen, R_xQueryPointerReply_sequenceNumber, R_xQueryPointerReply_length, R_xQueryPointerReply_root, R_xQueryPointerReply_child, R_xQueryPointerReply_rootX, R_xQueryPointerReply_rootY, R_xQueryPointerReply_winX, R_xQueryPointerReply_winY, R_xQueryPointerReply_mask, _, _),B1/binary>> = B0,
  { #xQueryPointerReply{type=R_xQueryPointerReply_type, sameScreen=R_xQueryPointerReply_sameScreen, sequenceNumber=R_xQueryPointerReply_sequenceNumber, length=R_xQueryPointerReply_length, root=R_xQueryPointerReply_root, child=R_xQueryPointerReply_child, rootX=R_xQueryPointerReply_rootX, rootY=R_xQueryPointerReply_rootY, winX=R_xQueryPointerReply_winX, winY=R_xQueryPointerReply_winY, mask=R_xQueryPointerReply_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetMotionEventsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetMotionEventsReply,{
    type,
    sequenceNumber,
    length,
    nEvents
}).

-define(xGetMotionEventsReply(Type,Pad1,SequenceNumber,Length,NEvents,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(NEvents),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGetMotionEventsReply_enc(R),
  << ?xGetMotionEventsReply(R#xGetMotionEventsReply.type,0,R#xGetMotionEventsReply.sequenceNumber,R#xGetMotionEventsReply.length,R#xGetMotionEventsReply.nEvents,0,0,0,0,0)>>).

-define(xGetMotionEventsReply_dec(B0),
 begin <<?xGetMotionEventsReply(R_xGetMotionEventsReply_type, _, R_xGetMotionEventsReply_sequenceNumber, R_xGetMotionEventsReply_length, R_xGetMotionEventsReply_nEvents, _, _, _, _, _),B1/binary>> = B0,
  { #xGetMotionEventsReply{type=R_xGetMotionEventsReply_type, sequenceNumber=R_xGetMotionEventsReply_sequenceNumber, length=R_xGetMotionEventsReply_length, nEvents=R_xGetMotionEventsReply_nEvents }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xTranslateCoordsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xTranslateCoordsReply,{
    type,
    sameScreen,
    sequenceNumber,
    length,
    child,
    dstX,
    dstY
}).

-define(xTranslateCoordsReply(Type,SameScreen,SequenceNumber,Length,Child,DstX,DstY,Pad2,Pad3,Pad4,Pad5),
    ?BYTE(Type),
    ?BOOL(SameScreen),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Child),
    ?INT16(DstX),
    ?INT16(DstY),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5)).

-define(xTranslateCoordsReply_enc(R),
  << ?xTranslateCoordsReply(R#xTranslateCoordsReply.type,R#xTranslateCoordsReply.sameScreen,R#xTranslateCoordsReply.sequenceNumber,R#xTranslateCoordsReply.length,R#xTranslateCoordsReply.child,R#xTranslateCoordsReply.dstX,R#xTranslateCoordsReply.dstY,0,0,0,0)>>).

-define(xTranslateCoordsReply_dec(B0),
 begin <<?xTranslateCoordsReply(R_xTranslateCoordsReply_type, R_xTranslateCoordsReply_sameScreen, R_xTranslateCoordsReply_sequenceNumber, R_xTranslateCoordsReply_length, R_xTranslateCoordsReply_child, R_xTranslateCoordsReply_dstX, R_xTranslateCoordsReply_dstY, _, _, _, _),B1/binary>> = B0,
  { #xTranslateCoordsReply{type=R_xTranslateCoordsReply_type, sameScreen=R_xTranslateCoordsReply_sameScreen, sequenceNumber=R_xTranslateCoordsReply_sequenceNumber, length=R_xTranslateCoordsReply_length, child=R_xTranslateCoordsReply_child, dstX=R_xTranslateCoordsReply_dstX, dstY=R_xTranslateCoordsReply_dstY }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetInputFocusReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetInputFocusReply,{
    type,
    revertTo,
    sequenceNumber,
    length,
    focus
}).

-define(xGetInputFocusReply(Type,RevertTo,SequenceNumber,Length,Focus,Pad1,Pad2,Pad3,Pad4,Pad5),
    ?BYTE(Type),
    ?CARD8(RevertTo),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?WINDOW(Focus),
    ?CARD32(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5)).

-define(xGetInputFocusReply_enc(R),
  << ?xGetInputFocusReply(R#xGetInputFocusReply.type,R#xGetInputFocusReply.revertTo,R#xGetInputFocusReply.sequenceNumber,R#xGetInputFocusReply.length,R#xGetInputFocusReply.focus,0,0,0,0,0)>>).

-define(xGetInputFocusReply_dec(B0),
 begin <<?xGetInputFocusReply(R_xGetInputFocusReply_type, R_xGetInputFocusReply_revertTo, R_xGetInputFocusReply_sequenceNumber, R_xGetInputFocusReply_length, R_xGetInputFocusReply_focus, _, _, _, _, _),B1/binary>> = B0,
  { #xGetInputFocusReply{type=R_xGetInputFocusReply_type, revertTo=R_xGetInputFocusReply_revertTo, sequenceNumber=R_xGetInputFocusReply_sequenceNumber, length=R_xGetInputFocusReply_length, focus=R_xGetInputFocusReply_focus }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryKeymapReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryKeymapReply,{
    type,
    sequenceNumber,
    length,
    map
}).

-define(xQueryKeymapReply(Type,Pad1,SequenceNumber,Length,Map),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    Map:32/binary).

-define(xQueryKeymapReply_enc(R),
  << ?xQueryKeymapReply(R#xQueryKeymapReply.type,0,R#xQueryKeymapReply.sequenceNumber,R#xQueryKeymapReply.length,R#xQueryKeymapReply.map)>>).

-define(xQueryKeymapReply_dec(B0),
 begin <<?xQueryKeymapReply(R_xQueryKeymapReply_type, _, R_xQueryKeymapReply_sequenceNumber, R_xQueryKeymapReply_length, R_xQueryKeymapReply_map),B1/binary>> = B0,
  { #xQueryKeymapReply{type=R_xQueryKeymapReply_type, sequenceNumber=R_xQueryKeymapReply_sequenceNumber, length=R_xQueryKeymapReply_length, map=R_xQueryKeymapReply_map }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryFontReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryFontReply,{
    type,
    sequenceNumber,
    length,
    minBounds,
    walign1,
    maxBounds,
    walign2,
    minCharOrByte2,
    maxCharOrByte2,
    defaultChar,
    nFontProps,
    drawDirection,
    minByte1,
    maxByte1,
    allCharsExist,
    fontAscent,
    fontDescent,
    nCharInfos
}).

-define(xQueryFontReply(Type,Pad1,SequenceNumber,Length,MinBounds,Walign1,MaxBounds,Walign2,MinCharOrByte2,MaxCharOrByte2,DefaultChar,NFontProps,DrawDirection,MinByte1,MaxByte1,AllCharsExist,FontAscent,FontDescent,NCharInfos),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    MinBounds:12/binary,
    ?CARD32(Walign1),
    MaxBounds:12/binary,
    ?CARD32(Walign2),
    ?CARD16(MinCharOrByte2),
    ?CARD16(MaxCharOrByte2),
    ?CARD16(DefaultChar),
    ?CARD16(NFontProps),
    ?CARD8(DrawDirection),
    ?CARD8(MinByte1),
    ?CARD8(MaxByte1),
    ?BOOL(AllCharsExist),
    ?INT16(FontAscent),
    ?INT16(FontDescent),
    ?CARD32(NCharInfos)).

-define(xQueryFontReply_enc(R),
  << ?xQueryFontReply(R#xQueryFontReply.type,0,R#xQueryFontReply.sequenceNumber,R#xQueryFontReply.length,R#xQueryFontReply.minBounds,R#xQueryFontReply.walign1,R#xQueryFontReply.maxBounds,R#xQueryFontReply.walign2,R#xQueryFontReply.minCharOrByte2,R#xQueryFontReply.maxCharOrByte2,R#xQueryFontReply.defaultChar,R#xQueryFontReply.nFontProps,R#xQueryFontReply.drawDirection,R#xQueryFontReply.minByte1,R#xQueryFontReply.maxByte1,R#xQueryFontReply.allCharsExist,R#xQueryFontReply.fontAscent,R#xQueryFontReply.fontDescent,R#xQueryFontReply.nCharInfos)>>).

-define(xQueryFontReply_dec(B0),
 begin <<?xQueryFontReply(R_xQueryFontReply_type, _, R_xQueryFontReply_sequenceNumber, R_xQueryFontReply_length, R_xQueryFontReply_minBounds, R_xQueryFontReply_walign1, R_xQueryFontReply_maxBounds, R_xQueryFontReply_walign2, R_xQueryFontReply_minCharOrByte2, R_xQueryFontReply_maxCharOrByte2, R_xQueryFontReply_defaultChar, R_xQueryFontReply_nFontProps, R_xQueryFontReply_drawDirection, R_xQueryFontReply_minByte1, R_xQueryFontReply_maxByte1, R_xQueryFontReply_allCharsExist, R_xQueryFontReply_fontAscent, R_xQueryFontReply_fontDescent, R_xQueryFontReply_nCharInfos),B1/binary>> = B0,
  { #xQueryFontReply{type=R_xQueryFontReply_type, sequenceNumber=R_xQueryFontReply_sequenceNumber, length=R_xQueryFontReply_length, minBounds=R_xQueryFontReply_minBounds, walign1=R_xQueryFontReply_walign1, maxBounds=R_xQueryFontReply_maxBounds, walign2=R_xQueryFontReply_walign2, minCharOrByte2=R_xQueryFontReply_minCharOrByte2, maxCharOrByte2=R_xQueryFontReply_maxCharOrByte2, defaultChar=R_xQueryFontReply_defaultChar, nFontProps=R_xQueryFontReply_nFontProps, drawDirection=R_xQueryFontReply_drawDirection, minByte1=R_xQueryFontReply_minByte1, maxByte1=R_xQueryFontReply_maxByte1, allCharsExist=R_xQueryFontReply_allCharsExist, fontAscent=R_xQueryFontReply_fontAscent, fontDescent=R_xQueryFontReply_fontDescent, nCharInfos=R_xQueryFontReply_nCharInfos }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryTextExtentsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryTextExtentsReply,{
    type,
    drawDirection,
    sequenceNumber,
    length,
    fontAscent,
    fontDescent,
    overallAscent,
    overallDescent,
    overallWidth,
    overallLeft,
    overallRight
}).

-define(xQueryTextExtentsReply(Type,DrawDirection,SequenceNumber,Length,FontAscent,FontDescent,OverallAscent,OverallDescent,OverallWidth,OverallLeft,OverallRight,Pad),
    ?BYTE(Type),
    ?CARD8(DrawDirection),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?INT16(FontAscent),
    ?INT16(FontDescent),
    ?INT16(OverallAscent),
    ?INT16(OverallDescent),
    ?INT32(OverallWidth),
    ?INT32(OverallLeft),
    ?INT32(OverallRight),
    ?CARD32(Pad)).

-define(xQueryTextExtentsReply_enc(R),
  << ?xQueryTextExtentsReply(R#xQueryTextExtentsReply.type,R#xQueryTextExtentsReply.drawDirection,R#xQueryTextExtentsReply.sequenceNumber,R#xQueryTextExtentsReply.length,R#xQueryTextExtentsReply.fontAscent,R#xQueryTextExtentsReply.fontDescent,R#xQueryTextExtentsReply.overallAscent,R#xQueryTextExtentsReply.overallDescent,R#xQueryTextExtentsReply.overallWidth,R#xQueryTextExtentsReply.overallLeft,R#xQueryTextExtentsReply.overallRight,0)>>).

-define(xQueryTextExtentsReply_dec(B0),
 begin <<?xQueryTextExtentsReply(R_xQueryTextExtentsReply_type, R_xQueryTextExtentsReply_drawDirection, R_xQueryTextExtentsReply_sequenceNumber, R_xQueryTextExtentsReply_length, R_xQueryTextExtentsReply_fontAscent, R_xQueryTextExtentsReply_fontDescent, R_xQueryTextExtentsReply_overallAscent, R_xQueryTextExtentsReply_overallDescent, R_xQueryTextExtentsReply_overallWidth, R_xQueryTextExtentsReply_overallLeft, R_xQueryTextExtentsReply_overallRight, _),B1/binary>> = B0,
  { #xQueryTextExtentsReply{type=R_xQueryTextExtentsReply_type, drawDirection=R_xQueryTextExtentsReply_drawDirection, sequenceNumber=R_xQueryTextExtentsReply_sequenceNumber, length=R_xQueryTextExtentsReply_length, fontAscent=R_xQueryTextExtentsReply_fontAscent, fontDescent=R_xQueryTextExtentsReply_fontDescent, overallAscent=R_xQueryTextExtentsReply_overallAscent, overallDescent=R_xQueryTextExtentsReply_overallDescent, overallWidth=R_xQueryTextExtentsReply_overallWidth, overallLeft=R_xQueryTextExtentsReply_overallLeft, overallRight=R_xQueryTextExtentsReply_overallRight }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListFontsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListFontsReply,{
    type,
    sequenceNumber,
    length,
    nFonts
}).

-define(xListFontsReply(Type,Pad1,SequenceNumber,Length,NFonts,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NFonts),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xListFontsReply_enc(R),
  << ?xListFontsReply(R#xListFontsReply.type,0,R#xListFontsReply.sequenceNumber,R#xListFontsReply.length,R#xListFontsReply.nFonts,0,0,0,0,0,0)>>).

-define(xListFontsReply_dec(B0),
 begin <<?xListFontsReply(R_xListFontsReply_type, _, R_xListFontsReply_sequenceNumber, R_xListFontsReply_length, R_xListFontsReply_nFonts, _, _, _, _, _, _),B1/binary>> = B0,
  { #xListFontsReply{type=R_xListFontsReply_type, sequenceNumber=R_xListFontsReply_sequenceNumber, length=R_xListFontsReply_length, nFonts=R_xListFontsReply_nFonts }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListFontsWithInfoReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListFontsWithInfoReply,{
    type,
    nameLength,
    sequenceNumber,
    length,
    minBounds,
    walign1,
    maxBounds,
    walign2,
    minCharOrByte2,
    maxCharOrByte2,
    defaultChar,
    nFontProps,
    drawDirection,
    minByte1,
    maxByte1,
    allCharsExist,
    fontAscent,
    fontDescent,
    nReplies
}).

-define(xListFontsWithInfoReply(Type,NameLength,SequenceNumber,Length,MinBounds,Walign1,MaxBounds,Walign2,MinCharOrByte2,MaxCharOrByte2,DefaultChar,NFontProps,DrawDirection,MinByte1,MaxByte1,AllCharsExist,FontAscent,FontDescent,NReplies),
    ?BYTE(Type),
    ?CARD8(NameLength),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    MinBounds:12/binary,
    ?CARD32(Walign1),
    MaxBounds:12/binary,
    ?CARD32(Walign2),
    ?CARD16(MinCharOrByte2),
    ?CARD16(MaxCharOrByte2),
    ?CARD16(DefaultChar),
    ?CARD16(NFontProps),
    ?CARD8(DrawDirection),
    ?CARD8(MinByte1),
    ?CARD8(MaxByte1),
    ?BOOL(AllCharsExist),
    ?INT16(FontAscent),
    ?INT16(FontDescent),
    ?CARD32(NReplies)).

-define(xListFontsWithInfoReply_enc(R),
  << ?xListFontsWithInfoReply(R#xListFontsWithInfoReply.type,R#xListFontsWithInfoReply.nameLength,R#xListFontsWithInfoReply.sequenceNumber,R#xListFontsWithInfoReply.length,R#xListFontsWithInfoReply.minBounds,R#xListFontsWithInfoReply.walign1,R#xListFontsWithInfoReply.maxBounds,R#xListFontsWithInfoReply.walign2,R#xListFontsWithInfoReply.minCharOrByte2,R#xListFontsWithInfoReply.maxCharOrByte2,R#xListFontsWithInfoReply.defaultChar,R#xListFontsWithInfoReply.nFontProps,R#xListFontsWithInfoReply.drawDirection,R#xListFontsWithInfoReply.minByte1,R#xListFontsWithInfoReply.maxByte1,R#xListFontsWithInfoReply.allCharsExist,R#xListFontsWithInfoReply.fontAscent,R#xListFontsWithInfoReply.fontDescent,R#xListFontsWithInfoReply.nReplies)>>).

-define(xListFontsWithInfoReply_dec(B0),
 begin <<?xListFontsWithInfoReply(R_xListFontsWithInfoReply_type, R_xListFontsWithInfoReply_nameLength, R_xListFontsWithInfoReply_sequenceNumber, R_xListFontsWithInfoReply_length, R_xListFontsWithInfoReply_minBounds, R_xListFontsWithInfoReply_walign1, R_xListFontsWithInfoReply_maxBounds, R_xListFontsWithInfoReply_walign2, R_xListFontsWithInfoReply_minCharOrByte2, R_xListFontsWithInfoReply_maxCharOrByte2, R_xListFontsWithInfoReply_defaultChar, R_xListFontsWithInfoReply_nFontProps, R_xListFontsWithInfoReply_drawDirection, R_xListFontsWithInfoReply_minByte1, R_xListFontsWithInfoReply_maxByte1, R_xListFontsWithInfoReply_allCharsExist, R_xListFontsWithInfoReply_fontAscent, R_xListFontsWithInfoReply_fontDescent, R_xListFontsWithInfoReply_nReplies),B1/binary>> = B0,
  { #xListFontsWithInfoReply{type=R_xListFontsWithInfoReply_type, nameLength=R_xListFontsWithInfoReply_nameLength, sequenceNumber=R_xListFontsWithInfoReply_sequenceNumber, length=R_xListFontsWithInfoReply_length, minBounds=R_xListFontsWithInfoReply_minBounds, walign1=R_xListFontsWithInfoReply_walign1, maxBounds=R_xListFontsWithInfoReply_maxBounds, walign2=R_xListFontsWithInfoReply_walign2, minCharOrByte2=R_xListFontsWithInfoReply_minCharOrByte2, maxCharOrByte2=R_xListFontsWithInfoReply_maxCharOrByte2, defaultChar=R_xListFontsWithInfoReply_defaultChar, nFontProps=R_xListFontsWithInfoReply_nFontProps, drawDirection=R_xListFontsWithInfoReply_drawDirection, minByte1=R_xListFontsWithInfoReply_minByte1, maxByte1=R_xListFontsWithInfoReply_maxByte1, allCharsExist=R_xListFontsWithInfoReply_allCharsExist, fontAscent=R_xListFontsWithInfoReply_fontAscent, fontDescent=R_xListFontsWithInfoReply_fontDescent, nReplies=R_xListFontsWithInfoReply_nReplies }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetFontPathReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetFontPathReply,{
    type,
    sequenceNumber,
    length,
    nPaths
}).

-define(xGetFontPathReply(Type,Pad1,SequenceNumber,Length,NPaths,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NPaths),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xGetFontPathReply_enc(R),
  << ?xGetFontPathReply(R#xGetFontPathReply.type,0,R#xGetFontPathReply.sequenceNumber,R#xGetFontPathReply.length,R#xGetFontPathReply.nPaths,0,0,0,0,0,0)>>).

-define(xGetFontPathReply_dec(B0),
 begin <<?xGetFontPathReply(R_xGetFontPathReply_type, _, R_xGetFontPathReply_sequenceNumber, R_xGetFontPathReply_length, R_xGetFontPathReply_nPaths, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGetFontPathReply{type=R_xGetFontPathReply_type, sequenceNumber=R_xGetFontPathReply_sequenceNumber, length=R_xGetFontPathReply_length, nPaths=R_xGetFontPathReply_nPaths }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetImageReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetImageReply,{
    type,
    depth,
    sequenceNumber,
    length,
    visual
}).

-define(xGetImageReply(Type,Depth,SequenceNumber,Length,Visual,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?CARD8(Depth),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?VISUALID(Visual),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xGetImageReply_enc(R),
  << ?xGetImageReply(R#xGetImageReply.type,R#xGetImageReply.depth,R#xGetImageReply.sequenceNumber,R#xGetImageReply.length,R#xGetImageReply.visual,0,0,0,0,0)>>).

-define(xGetImageReply_dec(B0),
 begin <<?xGetImageReply(R_xGetImageReply_type, R_xGetImageReply_depth, R_xGetImageReply_sequenceNumber, R_xGetImageReply_length, R_xGetImageReply_visual, _, _, _, _, _),B1/binary>> = B0,
  { #xGetImageReply{type=R_xGetImageReply_type, depth=R_xGetImageReply_depth, sequenceNumber=R_xGetImageReply_sequenceNumber, length=R_xGetImageReply_length, visual=R_xGetImageReply_visual }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListInstalledColormapsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListInstalledColormapsReply,{
    type,
    sequenceNumber,
    length,
    nColormaps
}).

-define(xListInstalledColormapsReply(Type,Pad1,SequenceNumber,Length,NColormaps,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NColormaps),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xListInstalledColormapsReply_enc(R),
  << ?xListInstalledColormapsReply(R#xListInstalledColormapsReply.type,0,R#xListInstalledColormapsReply.sequenceNumber,R#xListInstalledColormapsReply.length,R#xListInstalledColormapsReply.nColormaps,0,0,0,0,0,0)>>).

-define(xListInstalledColormapsReply_dec(B0),
 begin <<?xListInstalledColormapsReply(R_xListInstalledColormapsReply_type, _, R_xListInstalledColormapsReply_sequenceNumber, R_xListInstalledColormapsReply_length, R_xListInstalledColormapsReply_nColormaps, _, _, _, _, _, _),B1/binary>> = B0,
  { #xListInstalledColormapsReply{type=R_xListInstalledColormapsReply_type, sequenceNumber=R_xListInstalledColormapsReply_sequenceNumber, length=R_xListInstalledColormapsReply_length, nColormaps=R_xListInstalledColormapsReply_nColormaps }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorReply,{
    type,
    sequenceNumber,
    length,
    red,
    green,
    blue,
    pixel
}).

-define(xAllocColorReply(Type,Pad1,SequenceNumber,Length,Red,Green,Blue,Pad2,Pixel,Pad3,Pad4,Pad5),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(Red),
    ?CARD16(Green),
    ?CARD16(Blue),
    ?CARD16(Pad2),
    ?CARD32(Pixel),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5)).

-define(xAllocColorReply_enc(R),
  << ?xAllocColorReply(R#xAllocColorReply.type,0,R#xAllocColorReply.sequenceNumber,R#xAllocColorReply.length,R#xAllocColorReply.red,R#xAllocColorReply.green,R#xAllocColorReply.blue,0,R#xAllocColorReply.pixel,0,0,0)>>).

-define(xAllocColorReply_dec(B0),
 begin <<?xAllocColorReply(R_xAllocColorReply_type, _, R_xAllocColorReply_sequenceNumber, R_xAllocColorReply_length, R_xAllocColorReply_red, R_xAllocColorReply_green, R_xAllocColorReply_blue, _, R_xAllocColorReply_pixel, _, _, _),B1/binary>> = B0,
  { #xAllocColorReply{type=R_xAllocColorReply_type, sequenceNumber=R_xAllocColorReply_sequenceNumber, length=R_xAllocColorReply_length, red=R_xAllocColorReply_red, green=R_xAllocColorReply_green, blue=R_xAllocColorReply_blue, pixel=R_xAllocColorReply_pixel }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocNamedColorReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocNamedColorReply,{
    type,
    sequenceNumber,
    length,
    pixel,
    exactRed,
    exactGreen,
    exactBlue,
    screenRed,
    screenGreen,
    screenBlue
}).

-define(xAllocNamedColorReply(Type,Pad1,SequenceNumber,Length,Pixel,ExactRed,ExactGreen,ExactBlue,ScreenRed,ScreenGreen,ScreenBlue,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pixel),
    ?CARD16(ExactRed),
    ?CARD16(ExactGreen),
    ?CARD16(ExactBlue),
    ?CARD16(ScreenRed),
    ?CARD16(ScreenGreen),
    ?CARD16(ScreenBlue),
    ?CARD32(Pad2),
    ?CARD32(Pad3)).

-define(xAllocNamedColorReply_enc(R),
  << ?xAllocNamedColorReply(R#xAllocNamedColorReply.type,0,R#xAllocNamedColorReply.sequenceNumber,R#xAllocNamedColorReply.length,R#xAllocNamedColorReply.pixel,R#xAllocNamedColorReply.exactRed,R#xAllocNamedColorReply.exactGreen,R#xAllocNamedColorReply.exactBlue,R#xAllocNamedColorReply.screenRed,R#xAllocNamedColorReply.screenGreen,R#xAllocNamedColorReply.screenBlue,0,0)>>).

-define(xAllocNamedColorReply_dec(B0),
 begin <<?xAllocNamedColorReply(R_xAllocNamedColorReply_type, _, R_xAllocNamedColorReply_sequenceNumber, R_xAllocNamedColorReply_length, R_xAllocNamedColorReply_pixel, R_xAllocNamedColorReply_exactRed, R_xAllocNamedColorReply_exactGreen, R_xAllocNamedColorReply_exactBlue, R_xAllocNamedColorReply_screenRed, R_xAllocNamedColorReply_screenGreen, R_xAllocNamedColorReply_screenBlue, _, _),B1/binary>> = B0,
  { #xAllocNamedColorReply{type=R_xAllocNamedColorReply_type, sequenceNumber=R_xAllocNamedColorReply_sequenceNumber, length=R_xAllocNamedColorReply_length, pixel=R_xAllocNamedColorReply_pixel, exactRed=R_xAllocNamedColorReply_exactRed, exactGreen=R_xAllocNamedColorReply_exactGreen, exactBlue=R_xAllocNamedColorReply_exactBlue, screenRed=R_xAllocNamedColorReply_screenRed, screenGreen=R_xAllocNamedColorReply_screenGreen, screenBlue=R_xAllocNamedColorReply_screenBlue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorCellsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorCellsReply,{
    type,
    sequenceNumber,
    length,
    nPixels,
    nMasks
}).

-define(xAllocColorCellsReply(Type,Pad1,SequenceNumber,Length,NPixels,NMasks,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NPixels),
    ?CARD16(NMasks),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xAllocColorCellsReply_enc(R),
  << ?xAllocColorCellsReply(R#xAllocColorCellsReply.type,0,R#xAllocColorCellsReply.sequenceNumber,R#xAllocColorCellsReply.length,R#xAllocColorCellsReply.nPixels,R#xAllocColorCellsReply.nMasks,0,0,0,0,0)>>).

-define(xAllocColorCellsReply_dec(B0),
 begin <<?xAllocColorCellsReply(R_xAllocColorCellsReply_type, _, R_xAllocColorCellsReply_sequenceNumber, R_xAllocColorCellsReply_length, R_xAllocColorCellsReply_nPixels, R_xAllocColorCellsReply_nMasks, _, _, _, _, _),B1/binary>> = B0,
  { #xAllocColorCellsReply{type=R_xAllocColorCellsReply_type, sequenceNumber=R_xAllocColorCellsReply_sequenceNumber, length=R_xAllocColorCellsReply_length, nPixels=R_xAllocColorCellsReply_nPixels, nMasks=R_xAllocColorCellsReply_nMasks }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorPlanesReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorPlanesReply,{
    type,
    sequenceNumber,
    length,
    nPixels,
    redMask,
    greenMask,
    blueMask
}).

-define(xAllocColorPlanesReply(Type,Pad1,SequenceNumber,Length,NPixels,Pad2,RedMask,GreenMask,BlueMask,Pad3,Pad4),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NPixels),
    ?CARD16(Pad2),
    ?CARD32(RedMask),
    ?CARD32(GreenMask),
    ?CARD32(BlueMask),
    ?CARD32(Pad3),
    ?CARD32(Pad4)).

-define(xAllocColorPlanesReply_enc(R),
  << ?xAllocColorPlanesReply(R#xAllocColorPlanesReply.type,0,R#xAllocColorPlanesReply.sequenceNumber,R#xAllocColorPlanesReply.length,R#xAllocColorPlanesReply.nPixels,0,R#xAllocColorPlanesReply.redMask,R#xAllocColorPlanesReply.greenMask,R#xAllocColorPlanesReply.blueMask,0,0)>>).

-define(xAllocColorPlanesReply_dec(B0),
 begin <<?xAllocColorPlanesReply(R_xAllocColorPlanesReply_type, _, R_xAllocColorPlanesReply_sequenceNumber, R_xAllocColorPlanesReply_length, R_xAllocColorPlanesReply_nPixels, _, R_xAllocColorPlanesReply_redMask, R_xAllocColorPlanesReply_greenMask, R_xAllocColorPlanesReply_blueMask, _, _),B1/binary>> = B0,
  { #xAllocColorPlanesReply{type=R_xAllocColorPlanesReply_type, sequenceNumber=R_xAllocColorPlanesReply_sequenceNumber, length=R_xAllocColorPlanesReply_length, nPixels=R_xAllocColorPlanesReply_nPixels, redMask=R_xAllocColorPlanesReply_redMask, greenMask=R_xAllocColorPlanesReply_greenMask, blueMask=R_xAllocColorPlanesReply_blueMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryColorsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryColorsReply,{
    type,
    sequenceNumber,
    length,
    nColors
}).

-define(xQueryColorsReply(Type,Pad1,SequenceNumber,Length,NColors,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NColors),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xQueryColorsReply_enc(R),
  << ?xQueryColorsReply(R#xQueryColorsReply.type,0,R#xQueryColorsReply.sequenceNumber,R#xQueryColorsReply.length,R#xQueryColorsReply.nColors,0,0,0,0,0,0)>>).

-define(xQueryColorsReply_dec(B0),
 begin <<?xQueryColorsReply(R_xQueryColorsReply_type, _, R_xQueryColorsReply_sequenceNumber, R_xQueryColorsReply_length, R_xQueryColorsReply_nColors, _, _, _, _, _, _),B1/binary>> = B0,
  { #xQueryColorsReply{type=R_xQueryColorsReply_type, sequenceNumber=R_xQueryColorsReply_sequenceNumber, length=R_xQueryColorsReply_length, nColors=R_xQueryColorsReply_nColors }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xLookupColorReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xLookupColorReply,{
    type,
    sequenceNumber,
    length,
    exactRed,
    exactGreen,
    exactBlue,
    screenRed,
    screenGreen,
    screenBlue
}).

-define(xLookupColorReply(Type,Pad1,SequenceNumber,Length,ExactRed,ExactGreen,ExactBlue,ScreenRed,ScreenGreen,ScreenBlue,Pad3,Pad4,Pad5),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(ExactRed),
    ?CARD16(ExactGreen),
    ?CARD16(ExactBlue),
    ?CARD16(ScreenRed),
    ?CARD16(ScreenGreen),
    ?CARD16(ScreenBlue),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5)).

-define(xLookupColorReply_enc(R),
  << ?xLookupColorReply(R#xLookupColorReply.type,0,R#xLookupColorReply.sequenceNumber,R#xLookupColorReply.length,R#xLookupColorReply.exactRed,R#xLookupColorReply.exactGreen,R#xLookupColorReply.exactBlue,R#xLookupColorReply.screenRed,R#xLookupColorReply.screenGreen,R#xLookupColorReply.screenBlue,0,0,0)>>).

-define(xLookupColorReply_dec(B0),
 begin <<?xLookupColorReply(R_xLookupColorReply_type, _, R_xLookupColorReply_sequenceNumber, R_xLookupColorReply_length, R_xLookupColorReply_exactRed, R_xLookupColorReply_exactGreen, R_xLookupColorReply_exactBlue, R_xLookupColorReply_screenRed, R_xLookupColorReply_screenGreen, R_xLookupColorReply_screenBlue, _, _, _),B1/binary>> = B0,
  { #xLookupColorReply{type=R_xLookupColorReply_type, sequenceNumber=R_xLookupColorReply_sequenceNumber, length=R_xLookupColorReply_length, exactRed=R_xLookupColorReply_exactRed, exactGreen=R_xLookupColorReply_exactGreen, exactBlue=R_xLookupColorReply_exactBlue, screenRed=R_xLookupColorReply_screenRed, screenGreen=R_xLookupColorReply_screenGreen, screenBlue=R_xLookupColorReply_screenBlue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryBestSizeReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryBestSizeReply,{
    type,
    sequenceNumber,
    length,
    width,
    height
}).

-define(xQueryBestSizeReply(Type,Pad1,SequenceNumber,Length,Width,Height,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xQueryBestSizeReply_enc(R),
  << ?xQueryBestSizeReply(R#xQueryBestSizeReply.type,0,R#xQueryBestSizeReply.sequenceNumber,R#xQueryBestSizeReply.length,R#xQueryBestSizeReply.width,R#xQueryBestSizeReply.height,0,0,0,0,0)>>).

-define(xQueryBestSizeReply_dec(B0),
 begin <<?xQueryBestSizeReply(R_xQueryBestSizeReply_type, _, R_xQueryBestSizeReply_sequenceNumber, R_xQueryBestSizeReply_length, R_xQueryBestSizeReply_width, R_xQueryBestSizeReply_height, _, _, _, _, _),B1/binary>> = B0,
  { #xQueryBestSizeReply{type=R_xQueryBestSizeReply_type, sequenceNumber=R_xQueryBestSizeReply_sequenceNumber, length=R_xQueryBestSizeReply_length, width=R_xQueryBestSizeReply_width, height=R_xQueryBestSizeReply_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryExtensionReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryExtensionReply,{
    type,
    sequenceNumber,
    length,
    present,
    major_opcode,
    first_event,
    first_error
}).

-define(xQueryExtensionReply(Type,Pad1,SequenceNumber,Length,Present,Major_opcode,First_event,First_error,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?BOOL(Present),
    ?CARD8(Major_opcode),
    ?CARD8(First_event),
    ?CARD8(First_error),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xQueryExtensionReply_enc(R),
  << ?xQueryExtensionReply(R#xQueryExtensionReply.type,0,R#xQueryExtensionReply.sequenceNumber,R#xQueryExtensionReply.length,R#xQueryExtensionReply.present,R#xQueryExtensionReply.major_opcode,R#xQueryExtensionReply.first_event,R#xQueryExtensionReply.first_error,0,0,0,0,0)>>).

-define(xQueryExtensionReply_dec(B0),
 begin <<?xQueryExtensionReply(R_xQueryExtensionReply_type, _, R_xQueryExtensionReply_sequenceNumber, R_xQueryExtensionReply_length, R_xQueryExtensionReply_present, R_xQueryExtensionReply_major_opcode, R_xQueryExtensionReply_first_event, R_xQueryExtensionReply_first_error, _, _, _, _, _),B1/binary>> = B0,
  { #xQueryExtensionReply{type=R_xQueryExtensionReply_type, sequenceNumber=R_xQueryExtensionReply_sequenceNumber, length=R_xQueryExtensionReply_length, present=R_xQueryExtensionReply_present, major_opcode=R_xQueryExtensionReply_major_opcode, first_event=R_xQueryExtensionReply_first_event, first_error=R_xQueryExtensionReply_first_error }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListExtensionsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListExtensionsReply,{
    type,
    nExtensions,
    sequenceNumber,
    length
}).

-define(xListExtensionsReply(Type,NExtensions,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?CARD8(NExtensions),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xListExtensionsReply_enc(R),
  << ?xListExtensionsReply(R#xListExtensionsReply.type,R#xListExtensionsReply.nExtensions,R#xListExtensionsReply.sequenceNumber,R#xListExtensionsReply.length,0,0,0,0,0,0)>>).

-define(xListExtensionsReply_dec(B0),
 begin <<?xListExtensionsReply(R_xListExtensionsReply_type, R_xListExtensionsReply_nExtensions, R_xListExtensionsReply_sequenceNumber, R_xListExtensionsReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xListExtensionsReply{type=R_xListExtensionsReply_type, nExtensions=R_xListExtensionsReply_nExtensions, sequenceNumber=R_xListExtensionsReply_sequenceNumber, length=R_xListExtensionsReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetMappingReply,{
    type,
    success,
    sequenceNumber,
    length
}).

-define(xSetMappingReply(Type,Success,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?CARD8(Success),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xSetMappingReply_enc(R),
  << ?xSetMappingReply(R#xSetMappingReply.type,R#xSetMappingReply.success,R#xSetMappingReply.sequenceNumber,R#xSetMappingReply.length,0,0,0,0,0,0)>>).

-define(xSetMappingReply_dec(B0),
 begin <<?xSetMappingReply(R_xSetMappingReply_type, R_xSetMappingReply_success, R_xSetMappingReply_sequenceNumber, R_xSetMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xSetMappingReply{type=R_xSetMappingReply_type, success=R_xSetMappingReply_success, sequenceNumber=R_xSetMappingReply_sequenceNumber, length=R_xSetMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetPointerMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetPointerMappingReply,{
    type,
    success,
    sequenceNumber,
    length
}).

-define(xSetPointerMappingReply(Type,Success,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Success,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Length,unsigned,?ENDIAN),
    ?long(Pad2,unsigned,?ENDIAN),
    ?long(Pad3,unsigned,?ENDIAN),
    ?long(Pad4,unsigned,?ENDIAN),
    ?long(Pad5,unsigned,?ENDIAN),
    ?long(Pad6,unsigned,?ENDIAN),
    ?long(Pad7,unsigned,?ENDIAN)).

-define(xSetPointerMappingReply_enc(R),
  << ?xSetPointerMappingReply(R#xSetPointerMappingReply.type,R#xSetPointerMappingReply.success,R#xSetPointerMappingReply.sequenceNumber,R#xSetPointerMappingReply.length,0,0,0,0,0,0)>>).

-define(xSetPointerMappingReply_dec(B0),
 begin <<?xSetPointerMappingReply(R_xSetPointerMappingReply_type, R_xSetPointerMappingReply_success, R_xSetPointerMappingReply_sequenceNumber, R_xSetPointerMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xSetPointerMappingReply{type=R_xSetPointerMappingReply_type, success=R_xSetPointerMappingReply_success, sequenceNumber=R_xSetPointerMappingReply_sequenceNumber, length=R_xSetPointerMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetModifierMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetModifierMappingReply,{
    type,
    success,
    sequenceNumber,
    length
}).

-define(xSetModifierMappingReply(Type,Success,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Success,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Length,unsigned,?ENDIAN),
    ?long(Pad2,unsigned,?ENDIAN),
    ?long(Pad3,unsigned,?ENDIAN),
    ?long(Pad4,unsigned,?ENDIAN),
    ?long(Pad5,unsigned,?ENDIAN),
    ?long(Pad6,unsigned,?ENDIAN),
    ?long(Pad7,unsigned,?ENDIAN)).

-define(xSetModifierMappingReply_enc(R),
  << ?xSetModifierMappingReply(R#xSetModifierMappingReply.type,R#xSetModifierMappingReply.success,R#xSetModifierMappingReply.sequenceNumber,R#xSetModifierMappingReply.length,0,0,0,0,0,0)>>).

-define(xSetModifierMappingReply_dec(B0),
 begin <<?xSetModifierMappingReply(R_xSetModifierMappingReply_type, R_xSetModifierMappingReply_success, R_xSetModifierMappingReply_sequenceNumber, R_xSetModifierMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xSetModifierMappingReply{type=R_xSetModifierMappingReply_type, success=R_xSetModifierMappingReply_success, sequenceNumber=R_xSetModifierMappingReply_sequenceNumber, length=R_xSetModifierMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetPointerMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetPointerMappingReply,{
    type,
    nElts,
    sequenceNumber,
    length
}).

-define(xGetPointerMappingReply(Type,NElts,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?CARD8(NElts),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xGetPointerMappingReply_enc(R),
  << ?xGetPointerMappingReply(R#xGetPointerMappingReply.type,R#xGetPointerMappingReply.nElts,R#xGetPointerMappingReply.sequenceNumber,R#xGetPointerMappingReply.length,0,0,0,0,0,0)>>).

-define(xGetPointerMappingReply_dec(B0),
 begin <<?xGetPointerMappingReply(R_xGetPointerMappingReply_type, R_xGetPointerMappingReply_nElts, R_xGetPointerMappingReply_sequenceNumber, R_xGetPointerMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGetPointerMappingReply{type=R_xGetPointerMappingReply_type, nElts=R_xGetPointerMappingReply_nElts, sequenceNumber=R_xGetPointerMappingReply_sequenceNumber, length=R_xGetPointerMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetKeyboardMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetKeyboardMappingReply,{
    type,
    keySymsPerKeyCode,
    sequenceNumber,
    length
}).

-define(xGetKeyboardMappingReply(Type,KeySymsPerKeyCode,SequenceNumber,Length,Pad2,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?CARD8(KeySymsPerKeyCode),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xGetKeyboardMappingReply_enc(R),
  << ?xGetKeyboardMappingReply(R#xGetKeyboardMappingReply.type,R#xGetKeyboardMappingReply.keySymsPerKeyCode,R#xGetKeyboardMappingReply.sequenceNumber,R#xGetKeyboardMappingReply.length,0,0,0,0,0,0)>>).

-define(xGetKeyboardMappingReply_dec(B0),
 begin <<?xGetKeyboardMappingReply(R_xGetKeyboardMappingReply_type, R_xGetKeyboardMappingReply_keySymsPerKeyCode, R_xGetKeyboardMappingReply_sequenceNumber, R_xGetKeyboardMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGetKeyboardMappingReply{type=R_xGetKeyboardMappingReply_type, keySymsPerKeyCode=R_xGetKeyboardMappingReply_keySymsPerKeyCode, sequenceNumber=R_xGetKeyboardMappingReply_sequenceNumber, length=R_xGetKeyboardMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetModifierMappingReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetModifierMappingReply,{
    type,
    numKeyPerModifier,
    sequenceNumber,
    length
}).

-define(xGetModifierMappingReply(Type,NumKeyPerModifier,SequenceNumber,Length,Pad1,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?CARD8(NumKeyPerModifier),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGetModifierMappingReply_enc(R),
  << ?xGetModifierMappingReply(R#xGetModifierMappingReply.type,R#xGetModifierMappingReply.numKeyPerModifier,R#xGetModifierMappingReply.sequenceNumber,R#xGetModifierMappingReply.length,0,0,0,0,0,0)>>).

-define(xGetModifierMappingReply_dec(B0),
 begin <<?xGetModifierMappingReply(R_xGetModifierMappingReply_type, R_xGetModifierMappingReply_numKeyPerModifier, R_xGetModifierMappingReply_sequenceNumber, R_xGetModifierMappingReply_length, _, _, _, _, _, _),B1/binary>> = B0,
  { #xGetModifierMappingReply{type=R_xGetModifierMappingReply_type, numKeyPerModifier=R_xGetModifierMappingReply_numKeyPerModifier, sequenceNumber=R_xGetModifierMappingReply_sequenceNumber, length=R_xGetModifierMappingReply_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetKeyboardControlReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetKeyboardControlReply,{
    type,
    globalAutoRepeat,
    sequenceNumber,
    length,
    ledMask,
    keyClickPercent,
    bellPercent,
    bellPitch,
    bellDuration,
    map
}).

-define(xGetKeyboardControlReply(Type,GlobalAutoRepeat,SequenceNumber,Length,LedMask,KeyClickPercent,BellPercent,BellPitch,BellDuration,Pad,Map),
    ?BYTE(Type),
    ?BOOL(GlobalAutoRepeat),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD32(LedMask),
    ?CARD8(KeyClickPercent),
    ?CARD8(BellPercent),
    ?CARD16(BellPitch),
    ?CARD16(BellDuration),
    ?CARD16(Pad),
    Map:32/binary).

-define(xGetKeyboardControlReply_enc(R),
  << ?xGetKeyboardControlReply(R#xGetKeyboardControlReply.type,R#xGetKeyboardControlReply.globalAutoRepeat,R#xGetKeyboardControlReply.sequenceNumber,R#xGetKeyboardControlReply.length,R#xGetKeyboardControlReply.ledMask,R#xGetKeyboardControlReply.keyClickPercent,R#xGetKeyboardControlReply.bellPercent,R#xGetKeyboardControlReply.bellPitch,R#xGetKeyboardControlReply.bellDuration,0,R#xGetKeyboardControlReply.map)>>).

-define(xGetKeyboardControlReply_dec(B0),
 begin <<?xGetKeyboardControlReply(R_xGetKeyboardControlReply_type, R_xGetKeyboardControlReply_globalAutoRepeat, R_xGetKeyboardControlReply_sequenceNumber, R_xGetKeyboardControlReply_length, R_xGetKeyboardControlReply_ledMask, R_xGetKeyboardControlReply_keyClickPercent, R_xGetKeyboardControlReply_bellPercent, R_xGetKeyboardControlReply_bellPitch, R_xGetKeyboardControlReply_bellDuration, _, R_xGetKeyboardControlReply_map),B1/binary>> = B0,
  { #xGetKeyboardControlReply{type=R_xGetKeyboardControlReply_type, globalAutoRepeat=R_xGetKeyboardControlReply_globalAutoRepeat, sequenceNumber=R_xGetKeyboardControlReply_sequenceNumber, length=R_xGetKeyboardControlReply_length, ledMask=R_xGetKeyboardControlReply_ledMask, keyClickPercent=R_xGetKeyboardControlReply_keyClickPercent, bellPercent=R_xGetKeyboardControlReply_bellPercent, bellPitch=R_xGetKeyboardControlReply_bellPitch, bellDuration=R_xGetKeyboardControlReply_bellDuration, map=R_xGetKeyboardControlReply_map }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetPointerControlReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetPointerControlReply,{
    type,
    sequenceNumber,
    length,
    accelNumerator,
    accelDenominator,
    threshold
}).

-define(xGetPointerControlReply(Type,Pad1,SequenceNumber,Length,AccelNumerator,AccelDenominator,Threshold,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(AccelNumerator),
    ?CARD16(AccelDenominator),
    ?CARD16(Threshold),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGetPointerControlReply_enc(R),
  << ?xGetPointerControlReply(R#xGetPointerControlReply.type,0,R#xGetPointerControlReply.sequenceNumber,R#xGetPointerControlReply.length,R#xGetPointerControlReply.accelNumerator,R#xGetPointerControlReply.accelDenominator,R#xGetPointerControlReply.threshold,0,0,0,0,0)>>).

-define(xGetPointerControlReply_dec(B0),
 begin <<?xGetPointerControlReply(R_xGetPointerControlReply_type, _, R_xGetPointerControlReply_sequenceNumber, R_xGetPointerControlReply_length, R_xGetPointerControlReply_accelNumerator, R_xGetPointerControlReply_accelDenominator, R_xGetPointerControlReply_threshold, _, _, _, _, _),B1/binary>> = B0,
  { #xGetPointerControlReply{type=R_xGetPointerControlReply_type, sequenceNumber=R_xGetPointerControlReply_sequenceNumber, length=R_xGetPointerControlReply_length, accelNumerator=R_xGetPointerControlReply_accelNumerator, accelDenominator=R_xGetPointerControlReply_accelDenominator, threshold=R_xGetPointerControlReply_threshold }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetScreenSaverReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetScreenSaverReply,{
    type,
    sequenceNumber,
    length,
    timeout,
    interval,
    preferBlanking,
    allowExposures
}).

-define(xGetScreenSaverReply(Type,Pad1,SequenceNumber,Length,Timeout,Interval,PreferBlanking,AllowExposures,Pad2,Pad3,Pad4,Pad5,Pad6),
    ?BYTE(Type),
    ?BYTE(Pad1),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(Timeout),
    ?CARD16(Interval),
    ?BOOL(PreferBlanking),
    ?BOOL(AllowExposures),
    ?CARD16(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6)).

-define(xGetScreenSaverReply_enc(R),
  << ?xGetScreenSaverReply(R#xGetScreenSaverReply.type,0,R#xGetScreenSaverReply.sequenceNumber,R#xGetScreenSaverReply.length,R#xGetScreenSaverReply.timeout,R#xGetScreenSaverReply.interval,R#xGetScreenSaverReply.preferBlanking,R#xGetScreenSaverReply.allowExposures,0,0,0,0,0)>>).

-define(xGetScreenSaverReply_dec(B0),
 begin <<?xGetScreenSaverReply(R_xGetScreenSaverReply_type, _, R_xGetScreenSaverReply_sequenceNumber, R_xGetScreenSaverReply_length, R_xGetScreenSaverReply_timeout, R_xGetScreenSaverReply_interval, R_xGetScreenSaverReply_preferBlanking, R_xGetScreenSaverReply_allowExposures, _, _, _, _, _),B1/binary>> = B0,
  { #xGetScreenSaverReply{type=R_xGetScreenSaverReply_type, sequenceNumber=R_xGetScreenSaverReply_sequenceNumber, length=R_xGetScreenSaverReply_length, timeout=R_xGetScreenSaverReply_timeout, interval=R_xGetScreenSaverReply_interval, preferBlanking=R_xGetScreenSaverReply_preferBlanking, allowExposures=R_xGetScreenSaverReply_allowExposures }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListHostsReply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListHostsReply,{
    type,
    enabled,
    sequenceNumber,
    length,
    nHosts
}).

-define(xListHostsReply(Type,Enabled,SequenceNumber,Length,NHosts,Pad1,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BOOL(Enabled),
    ?CARD16(SequenceNumber),
    ?CARD32(Length),
    ?CARD16(NHosts),
    ?CARD16(Pad1),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xListHostsReply_enc(R),
  << ?xListHostsReply(R#xListHostsReply.type,R#xListHostsReply.enabled,R#xListHostsReply.sequenceNumber,R#xListHostsReply.length,R#xListHostsReply.nHosts,0,0,0,0,0,0)>>).

-define(xListHostsReply_dec(B0),
 begin <<?xListHostsReply(R_xListHostsReply_type, R_xListHostsReply_enabled, R_xListHostsReply_sequenceNumber, R_xListHostsReply_length, R_xListHostsReply_nHosts, _, _, _, _, _, _),B1/binary>> = B0,
  { #xListHostsReply{type=R_xListHostsReply_type, enabled=R_xListHostsReply_enabled, sequenceNumber=R_xListHostsReply_sequenceNumber, length=R_xListHostsReply_length, nHosts=R_xListHostsReply_nHosts }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xError
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xError,{
    type,
    errorCode,
    sequenceNumber,
    resourceID,
    minorCode,
    majorCode
}).

-define(xError(Type,ErrorCode,SequenceNumber,ResourceID,MinorCode,MajorCode,Pad1,Pad3,Pad4,Pad5,Pad6,Pad7),
    ?BYTE(Type),
    ?BYTE(ErrorCode),
    ?CARD16(SequenceNumber),
    ?CARD32(ResourceID),
    ?CARD16(MinorCode),
    ?CARD8(MajorCode),
    ?BYTE(Pad1),
    ?CARD32(Pad3),
    ?CARD32(Pad4),
    ?CARD32(Pad5),
    ?CARD32(Pad6),
    ?CARD32(Pad7)).

-define(xError_enc(R),
  << ?xError(R#xError.type,R#xError.errorCode,R#xError.sequenceNumber,R#xError.resourceID,R#xError.minorCode,R#xError.majorCode,0,0,0,0,0,0)>>).

-define(xError_dec(B0),
 begin <<?xError(R_xError_type, R_xError_errorCode, R_xError_sequenceNumber, R_xError_resourceID, R_xError_minorCode, R_xError_majorCode, _, _, _, _, _, _),B1/binary>> = B0,
  { #xError{type=R_xError_type, errorCode=R_xError_errorCode, sequenceNumber=R_xError_sequenceNumber, resourceID=R_xError_resourceID, minorCode=R_xError_minorCode, majorCode=R_xError_majorCode }, B1} end).


-define(ELFlagFocus,16#1).
-define(ELFlagSameScreen,16#2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xEvent,{
    type,
    detail,
    sequenceNumber,
    bytes
}).

-define(xEvent(Type,Detail,SequenceNumber,Bytes),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    Bytes:28/binary).

-define(xEvent_enc(R),
  << ?xEvent(R#xEvent.type,R#xEvent.detail,R#xEvent.sequenceNumber,R#xEvent.bytes)>>).

-define(xEvent_dec(B0),
 begin <<?xEvent(R_xEvent_type, R_xEvent_detail, R_xEvent_sequenceNumber, R_xEvent_bytes),B1/binary>> = B0,
  { #xEvent{type=R_xEvent_type, detail=R_xEvent_detail, sequenceNumber=R_xEvent_sequenceNumber, bytes=R_xEvent_bytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xKeyEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xKeyEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    sameScreen
}).

-define(xKeyEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,SameScreen,Pad1),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?TIME(Time),
    ?WINDOW(Root),
    ?WINDOW(Event),
    ?WINDOW(Child),
    ?INT16(RootX),
    ?INT16(RootY),
    ?INT16(EventX),
    ?INT16(EventY),
    ?KEYBUTMASK(State),
    ?BOOL(SameScreen),
    ?BYTE(Pad1)).

-define(xKeyEvent_enc(R),
  << ?xKeyEvent(R#xKeyEvent.type,R#xKeyEvent.detail,R#xKeyEvent.sequenceNumber,R#xKeyEvent.time,R#xKeyEvent.root,R#xKeyEvent.event,R#xKeyEvent.child,R#xKeyEvent.rootX,R#xKeyEvent.rootY,R#xKeyEvent.eventX,R#xKeyEvent.eventY,R#xKeyEvent.state,R#xKeyEvent.sameScreen,0)>>).

-define(xKeyEvent_dec(B0),
 begin <<?xKeyEvent(R_xKeyEvent_type, R_xKeyEvent_detail, R_xKeyEvent_sequenceNumber, R_xKeyEvent_time, R_xKeyEvent_root, R_xKeyEvent_event, R_xKeyEvent_child, R_xKeyEvent_rootX, R_xKeyEvent_rootY, R_xKeyEvent_eventX, R_xKeyEvent_eventY, R_xKeyEvent_state, R_xKeyEvent_sameScreen, _),B1/binary>> = B0,
  { #xKeyEvent{type=R_xKeyEvent_type, detail=R_xKeyEvent_detail, sequenceNumber=R_xKeyEvent_sequenceNumber, time=R_xKeyEvent_time, root=R_xKeyEvent_root, event=R_xKeyEvent_event, child=R_xKeyEvent_child, rootX=R_xKeyEvent_rootX, rootY=R_xKeyEvent_rootY, eventX=R_xKeyEvent_eventX, eventY=R_xKeyEvent_eventY, state=R_xKeyEvent_state, sameScreen=R_xKeyEvent_sameScreen }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xKeyPressedEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xKeyPressedEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    sameScreen
}).

-define(xKeyPressedEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,SameScreen,Pad1),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(SameScreen,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN)).

-define(xKeyPressedEvent_enc(R),
  << ?xKeyPressedEvent(R#xKeyPressedEvent.type,R#xKeyPressedEvent.detail,R#xKeyPressedEvent.sequenceNumber,R#xKeyPressedEvent.time,R#xKeyPressedEvent.root,R#xKeyPressedEvent.event,R#xKeyPressedEvent.child,R#xKeyPressedEvent.rootX,R#xKeyPressedEvent.rootY,R#xKeyPressedEvent.eventX,R#xKeyPressedEvent.eventY,R#xKeyPressedEvent.state,R#xKeyPressedEvent.sameScreen,0)>>).

-define(xKeyPressedEvent_dec(B0),
 begin <<?xKeyPressedEvent(R_xKeyPressedEvent_type, R_xKeyPressedEvent_detail, R_xKeyPressedEvent_sequenceNumber, R_xKeyPressedEvent_time, R_xKeyPressedEvent_root, R_xKeyPressedEvent_event, R_xKeyPressedEvent_child, R_xKeyPressedEvent_rootX, R_xKeyPressedEvent_rootY, R_xKeyPressedEvent_eventX, R_xKeyPressedEvent_eventY, R_xKeyPressedEvent_state, R_xKeyPressedEvent_sameScreen, _),B1/binary>> = B0,
  { #xKeyPressedEvent{type=R_xKeyPressedEvent_type, detail=R_xKeyPressedEvent_detail, sequenceNumber=R_xKeyPressedEvent_sequenceNumber, time=R_xKeyPressedEvent_time, root=R_xKeyPressedEvent_root, event=R_xKeyPressedEvent_event, child=R_xKeyPressedEvent_child, rootX=R_xKeyPressedEvent_rootX, rootY=R_xKeyPressedEvent_rootY, eventX=R_xKeyPressedEvent_eventX, eventY=R_xKeyPressedEvent_eventY, state=R_xKeyPressedEvent_state, sameScreen=R_xKeyPressedEvent_sameScreen }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xKeyReleasedEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xKeyReleasedEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    sameScreen
}).

-define(xKeyReleasedEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,SameScreen,Pad1),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(SameScreen,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN)).

-define(xKeyReleasedEvent_enc(R),
  << ?xKeyReleasedEvent(R#xKeyReleasedEvent.type,R#xKeyReleasedEvent.detail,R#xKeyReleasedEvent.sequenceNumber,R#xKeyReleasedEvent.time,R#xKeyReleasedEvent.root,R#xKeyReleasedEvent.event,R#xKeyReleasedEvent.child,R#xKeyReleasedEvent.rootX,R#xKeyReleasedEvent.rootY,R#xKeyReleasedEvent.eventX,R#xKeyReleasedEvent.eventY,R#xKeyReleasedEvent.state,R#xKeyReleasedEvent.sameScreen,0)>>).

-define(xKeyReleasedEvent_dec(B0),
 begin <<?xKeyReleasedEvent(R_xKeyReleasedEvent_type, R_xKeyReleasedEvent_detail, R_xKeyReleasedEvent_sequenceNumber, R_xKeyReleasedEvent_time, R_xKeyReleasedEvent_root, R_xKeyReleasedEvent_event, R_xKeyReleasedEvent_child, R_xKeyReleasedEvent_rootX, R_xKeyReleasedEvent_rootY, R_xKeyReleasedEvent_eventX, R_xKeyReleasedEvent_eventY, R_xKeyReleasedEvent_state, R_xKeyReleasedEvent_sameScreen, _),B1/binary>> = B0,
  { #xKeyReleasedEvent{type=R_xKeyReleasedEvent_type, detail=R_xKeyReleasedEvent_detail, sequenceNumber=R_xKeyReleasedEvent_sequenceNumber, time=R_xKeyReleasedEvent_time, root=R_xKeyReleasedEvent_root, event=R_xKeyReleasedEvent_event, child=R_xKeyReleasedEvent_child, rootX=R_xKeyReleasedEvent_rootX, rootY=R_xKeyReleasedEvent_rootY, eventX=R_xKeyReleasedEvent_eventX, eventY=R_xKeyReleasedEvent_eventY, state=R_xKeyReleasedEvent_state, sameScreen=R_xKeyReleasedEvent_sameScreen }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xButtonPressedEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xButtonPressedEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    sameScreen
}).

-define(xButtonPressedEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,SameScreen,Pad1),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(SameScreen,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN)).

-define(xButtonPressedEvent_enc(R),
  << ?xButtonPressedEvent(R#xButtonPressedEvent.type,R#xButtonPressedEvent.detail,R#xButtonPressedEvent.sequenceNumber,R#xButtonPressedEvent.time,R#xButtonPressedEvent.root,R#xButtonPressedEvent.event,R#xButtonPressedEvent.child,R#xButtonPressedEvent.rootX,R#xButtonPressedEvent.rootY,R#xButtonPressedEvent.eventX,R#xButtonPressedEvent.eventY,R#xButtonPressedEvent.state,R#xButtonPressedEvent.sameScreen,0)>>).

-define(xButtonPressedEvent_dec(B0),
 begin <<?xButtonPressedEvent(R_xButtonPressedEvent_type, R_xButtonPressedEvent_detail, R_xButtonPressedEvent_sequenceNumber, R_xButtonPressedEvent_time, R_xButtonPressedEvent_root, R_xButtonPressedEvent_event, R_xButtonPressedEvent_child, R_xButtonPressedEvent_rootX, R_xButtonPressedEvent_rootY, R_xButtonPressedEvent_eventX, R_xButtonPressedEvent_eventY, R_xButtonPressedEvent_state, R_xButtonPressedEvent_sameScreen, _),B1/binary>> = B0,
  { #xButtonPressedEvent{type=R_xButtonPressedEvent_type, detail=R_xButtonPressedEvent_detail, sequenceNumber=R_xButtonPressedEvent_sequenceNumber, time=R_xButtonPressedEvent_time, root=R_xButtonPressedEvent_root, event=R_xButtonPressedEvent_event, child=R_xButtonPressedEvent_child, rootX=R_xButtonPressedEvent_rootX, rootY=R_xButtonPressedEvent_rootY, eventX=R_xButtonPressedEvent_eventX, eventY=R_xButtonPressedEvent_eventY, state=R_xButtonPressedEvent_state, sameScreen=R_xButtonPressedEvent_sameScreen }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xButtonReleasedEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xButtonReleasedEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    sameScreen
}).

-define(xButtonReleasedEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,SameScreen,Pad1),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(SameScreen,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN)).

-define(xButtonReleasedEvent_enc(R),
  << ?xButtonReleasedEvent(R#xButtonReleasedEvent.type,R#xButtonReleasedEvent.detail,R#xButtonReleasedEvent.sequenceNumber,R#xButtonReleasedEvent.time,R#xButtonReleasedEvent.root,R#xButtonReleasedEvent.event,R#xButtonReleasedEvent.child,R#xButtonReleasedEvent.rootX,R#xButtonReleasedEvent.rootY,R#xButtonReleasedEvent.eventX,R#xButtonReleasedEvent.eventY,R#xButtonReleasedEvent.state,R#xButtonReleasedEvent.sameScreen,0)>>).

-define(xButtonReleasedEvent_dec(B0),
 begin <<?xButtonReleasedEvent(R_xButtonReleasedEvent_type, R_xButtonReleasedEvent_detail, R_xButtonReleasedEvent_sequenceNumber, R_xButtonReleasedEvent_time, R_xButtonReleasedEvent_root, R_xButtonReleasedEvent_event, R_xButtonReleasedEvent_child, R_xButtonReleasedEvent_rootX, R_xButtonReleasedEvent_rootY, R_xButtonReleasedEvent_eventX, R_xButtonReleasedEvent_eventY, R_xButtonReleasedEvent_state, R_xButtonReleasedEvent_sameScreen, _),B1/binary>> = B0,
  { #xButtonReleasedEvent{type=R_xButtonReleasedEvent_type, detail=R_xButtonReleasedEvent_detail, sequenceNumber=R_xButtonReleasedEvent_sequenceNumber, time=R_xButtonReleasedEvent_time, root=R_xButtonReleasedEvent_root, event=R_xButtonReleasedEvent_event, child=R_xButtonReleasedEvent_child, rootX=R_xButtonReleasedEvent_rootX, rootY=R_xButtonReleasedEvent_rootY, eventX=R_xButtonReleasedEvent_eventX, eventY=R_xButtonReleasedEvent_eventY, state=R_xButtonReleasedEvent_state, sameScreen=R_xButtonReleasedEvent_sameScreen }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCrossingEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCrossingEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    mode,
    flags
}).

-define(xCrossingEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,Mode,Flags),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?TIME(Time),
    ?WINDOW(Root),
    ?WINDOW(Event),
    ?WINDOW(Child),
    ?INT16(RootX),
    ?INT16(RootY),
    ?INT16(EventX),
    ?INT16(EventY),
    ?KEYBUTMASK(State),
    ?BYTE(Mode),
    ?BYTE(Flags)).

-define(xCrossingEvent_enc(R),
  << ?xCrossingEvent(R#xCrossingEvent.type,R#xCrossingEvent.detail,R#xCrossingEvent.sequenceNumber,R#xCrossingEvent.time,R#xCrossingEvent.root,R#xCrossingEvent.event,R#xCrossingEvent.child,R#xCrossingEvent.rootX,R#xCrossingEvent.rootY,R#xCrossingEvent.eventX,R#xCrossingEvent.eventY,R#xCrossingEvent.state,R#xCrossingEvent.mode,R#xCrossingEvent.flags)>>).

-define(xCrossingEvent_dec(B0),
 begin <<?xCrossingEvent(R_xCrossingEvent_type, R_xCrossingEvent_detail, R_xCrossingEvent_sequenceNumber, R_xCrossingEvent_time, R_xCrossingEvent_root, R_xCrossingEvent_event, R_xCrossingEvent_child, R_xCrossingEvent_rootX, R_xCrossingEvent_rootY, R_xCrossingEvent_eventX, R_xCrossingEvent_eventY, R_xCrossingEvent_state, R_xCrossingEvent_mode, R_xCrossingEvent_flags),B1/binary>> = B0,
  { #xCrossingEvent{type=R_xCrossingEvent_type, detail=R_xCrossingEvent_detail, sequenceNumber=R_xCrossingEvent_sequenceNumber, time=R_xCrossingEvent_time, root=R_xCrossingEvent_root, event=R_xCrossingEvent_event, child=R_xCrossingEvent_child, rootX=R_xCrossingEvent_rootX, rootY=R_xCrossingEvent_rootY, eventX=R_xCrossingEvent_eventX, eventY=R_xCrossingEvent_eventY, state=R_xCrossingEvent_state, mode=R_xCrossingEvent_mode, flags=R_xCrossingEvent_flags }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xEnterWindowEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xEnterWindowEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    mode,
    flags
}).

-define(xEnterWindowEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,Mode,Flags),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(Mode,unsigned,?ENDIAN),
    ?char(Flags,unsigned,?ENDIAN)).

-define(xEnterWindowEvent_enc(R),
  << ?xEnterWindowEvent(R#xEnterWindowEvent.type,R#xEnterWindowEvent.detail,R#xEnterWindowEvent.sequenceNumber,R#xEnterWindowEvent.time,R#xEnterWindowEvent.root,R#xEnterWindowEvent.event,R#xEnterWindowEvent.child,R#xEnterWindowEvent.rootX,R#xEnterWindowEvent.rootY,R#xEnterWindowEvent.eventX,R#xEnterWindowEvent.eventY,R#xEnterWindowEvent.state,R#xEnterWindowEvent.mode,R#xEnterWindowEvent.flags)>>).

-define(xEnterWindowEvent_dec(B0),
 begin <<?xEnterWindowEvent(R_xEnterWindowEvent_type, R_xEnterWindowEvent_detail, R_xEnterWindowEvent_sequenceNumber, R_xEnterWindowEvent_time, R_xEnterWindowEvent_root, R_xEnterWindowEvent_event, R_xEnterWindowEvent_child, R_xEnterWindowEvent_rootX, R_xEnterWindowEvent_rootY, R_xEnterWindowEvent_eventX, R_xEnterWindowEvent_eventY, R_xEnterWindowEvent_state, R_xEnterWindowEvent_mode, R_xEnterWindowEvent_flags),B1/binary>> = B0,
  { #xEnterWindowEvent{type=R_xEnterWindowEvent_type, detail=R_xEnterWindowEvent_detail, sequenceNumber=R_xEnterWindowEvent_sequenceNumber, time=R_xEnterWindowEvent_time, root=R_xEnterWindowEvent_root, event=R_xEnterWindowEvent_event, child=R_xEnterWindowEvent_child, rootX=R_xEnterWindowEvent_rootX, rootY=R_xEnterWindowEvent_rootY, eventX=R_xEnterWindowEvent_eventX, eventY=R_xEnterWindowEvent_eventY, state=R_xEnterWindowEvent_state, mode=R_xEnterWindowEvent_mode, flags=R_xEnterWindowEvent_flags }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xLeaveWindowEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xLeaveWindowEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    root,
    event,
    child,
    rootX,
    rootY,
    eventX,
    eventY,
    state,
    mode,
    flags
}).

-define(xLeaveWindowEvent(Type,Detail,SequenceNumber,Time,Root,Event,Child,RootX,RootY,EventX,EventY,State,Mode,Flags),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Time,unsigned,?ENDIAN),
    ?long(Root,unsigned,?ENDIAN),
    ?long(Event,unsigned,?ENDIAN),
    ?long(Child,unsigned,?ENDIAN),
    ?short(RootX,signed,?ENDIAN),
    ?short(RootY,signed,?ENDIAN),
    ?short(EventX,signed,?ENDIAN),
    ?short(EventY,signed,?ENDIAN),
    ?short(State,unsigned,?ENDIAN),
    ?char(Mode,unsigned,?ENDIAN),
    ?char(Flags,unsigned,?ENDIAN)).

-define(xLeaveWindowEvent_enc(R),
  << ?xLeaveWindowEvent(R#xLeaveWindowEvent.type,R#xLeaveWindowEvent.detail,R#xLeaveWindowEvent.sequenceNumber,R#xLeaveWindowEvent.time,R#xLeaveWindowEvent.root,R#xLeaveWindowEvent.event,R#xLeaveWindowEvent.child,R#xLeaveWindowEvent.rootX,R#xLeaveWindowEvent.rootY,R#xLeaveWindowEvent.eventX,R#xLeaveWindowEvent.eventY,R#xLeaveWindowEvent.state,R#xLeaveWindowEvent.mode,R#xLeaveWindowEvent.flags)>>).

-define(xLeaveWindowEvent_dec(B0),
 begin <<?xLeaveWindowEvent(R_xLeaveWindowEvent_type, R_xLeaveWindowEvent_detail, R_xLeaveWindowEvent_sequenceNumber, R_xLeaveWindowEvent_time, R_xLeaveWindowEvent_root, R_xLeaveWindowEvent_event, R_xLeaveWindowEvent_child, R_xLeaveWindowEvent_rootX, R_xLeaveWindowEvent_rootY, R_xLeaveWindowEvent_eventX, R_xLeaveWindowEvent_eventY, R_xLeaveWindowEvent_state, R_xLeaveWindowEvent_mode, R_xLeaveWindowEvent_flags),B1/binary>> = B0,
  { #xLeaveWindowEvent{type=R_xLeaveWindowEvent_type, detail=R_xLeaveWindowEvent_detail, sequenceNumber=R_xLeaveWindowEvent_sequenceNumber, time=R_xLeaveWindowEvent_time, root=R_xLeaveWindowEvent_root, event=R_xLeaveWindowEvent_event, child=R_xLeaveWindowEvent_child, rootX=R_xLeaveWindowEvent_rootX, rootY=R_xLeaveWindowEvent_rootY, eventX=R_xLeaveWindowEvent_eventX, eventY=R_xLeaveWindowEvent_eventY, state=R_xLeaveWindowEvent_state, mode=R_xLeaveWindowEvent_mode, flags=R_xLeaveWindowEvent_flags }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFocusChangeEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFocusChangeEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    mode
}).

-define(xFocusChangeEvent(Type,Detail,SequenceNumber,Window,Mode,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?BYTE(Mode),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xFocusChangeEvent_enc(R),
  << ?xFocusChangeEvent(R#xFocusChangeEvent.type,R#xFocusChangeEvent.detail,R#xFocusChangeEvent.sequenceNumber,R#xFocusChangeEvent.window,R#xFocusChangeEvent.mode,0,0,0)>>).

-define(xFocusChangeEvent_dec(B0),
 begin <<?xFocusChangeEvent(R_xFocusChangeEvent_type, R_xFocusChangeEvent_detail, R_xFocusChangeEvent_sequenceNumber, R_xFocusChangeEvent_window, R_xFocusChangeEvent_mode, _, _, _),B1/binary>> = B0,
  { #xFocusChangeEvent{type=R_xFocusChangeEvent_type, detail=R_xFocusChangeEvent_detail, sequenceNumber=R_xFocusChangeEvent_sequenceNumber, window=R_xFocusChangeEvent_window, mode=R_xFocusChangeEvent_mode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFocusInEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFocusInEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    mode
}).

-define(xFocusInEvent(Type,Detail,SequenceNumber,Window,Mode,Pad1,Pad2,Pad3),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Window,unsigned,?ENDIAN),
    ?char(Mode,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN),
    ?char(Pad2,unsigned,?ENDIAN),
    ?char(Pad3,unsigned,?ENDIAN)).

-define(xFocusInEvent_enc(R),
  << ?xFocusInEvent(R#xFocusInEvent.type,R#xFocusInEvent.detail,R#xFocusInEvent.sequenceNumber,R#xFocusInEvent.window,R#xFocusInEvent.mode,0,0,0)>>).

-define(xFocusInEvent_dec(B0),
 begin <<?xFocusInEvent(R_xFocusInEvent_type, R_xFocusInEvent_detail, R_xFocusInEvent_sequenceNumber, R_xFocusInEvent_window, R_xFocusInEvent_mode, _, _, _),B1/binary>> = B0,
  { #xFocusInEvent{type=R_xFocusInEvent_type, detail=R_xFocusInEvent_detail, sequenceNumber=R_xFocusInEvent_sequenceNumber, window=R_xFocusInEvent_window, mode=R_xFocusInEvent_mode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFocusOutEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFocusOutEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    mode
}).

-define(xFocusOutEvent(Type,Detail,SequenceNumber,Window,Mode,Pad1,Pad2,Pad3),
    ?char(Type,unsigned,?ENDIAN),
    ?char(Detail,unsigned,?ENDIAN),
    ?short(SequenceNumber,unsigned,?ENDIAN),
    ?long(Window,unsigned,?ENDIAN),
    ?char(Mode,unsigned,?ENDIAN),
    ?char(Pad1,unsigned,?ENDIAN),
    ?char(Pad2,unsigned,?ENDIAN),
    ?char(Pad3,unsigned,?ENDIAN)).

-define(xFocusOutEvent_enc(R),
  << ?xFocusOutEvent(R#xFocusOutEvent.type,R#xFocusOutEvent.detail,R#xFocusOutEvent.sequenceNumber,R#xFocusOutEvent.window,R#xFocusOutEvent.mode,0,0,0)>>).

-define(xFocusOutEvent_dec(B0),
 begin <<?xFocusOutEvent(R_xFocusOutEvent_type, R_xFocusOutEvent_detail, R_xFocusOutEvent_sequenceNumber, R_xFocusOutEvent_window, R_xFocusOutEvent_mode, _, _, _),B1/binary>> = B0,
  { #xFocusOutEvent{type=R_xFocusOutEvent_type, detail=R_xFocusOutEvent_detail, sequenceNumber=R_xFocusOutEvent_sequenceNumber, window=R_xFocusOutEvent_window, mode=R_xFocusOutEvent_mode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xExposeEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xExposeEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    x,
    y,
    width,
    height,
    count
}).

-define(xExposeEvent(Type,Detail,SequenceNumber,Window,X,Y,Width,Height,Count,Pad2),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?CARD16(X),
    ?CARD16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(Count),
    ?CARD16(Pad2)).

-define(xExposeEvent_enc(R),
  << ?xExposeEvent(R#xExposeEvent.type,R#xExposeEvent.detail,R#xExposeEvent.sequenceNumber,R#xExposeEvent.window,R#xExposeEvent.x,R#xExposeEvent.y,R#xExposeEvent.width,R#xExposeEvent.height,R#xExposeEvent.count,0)>>).

-define(xExposeEvent_dec(B0),
 begin <<?xExposeEvent(R_xExposeEvent_type, R_xExposeEvent_detail, R_xExposeEvent_sequenceNumber, R_xExposeEvent_window, R_xExposeEvent_x, R_xExposeEvent_y, R_xExposeEvent_width, R_xExposeEvent_height, R_xExposeEvent_count, _),B1/binary>> = B0,
  { #xExposeEvent{type=R_xExposeEvent_type, detail=R_xExposeEvent_detail, sequenceNumber=R_xExposeEvent_sequenceNumber, window=R_xExposeEvent_window, x=R_xExposeEvent_x, y=R_xExposeEvent_y, width=R_xExposeEvent_width, height=R_xExposeEvent_height, count=R_xExposeEvent_count }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGraphicsExposeEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGraphicsExposeEvent,{
    type,
    detail,
    sequenceNumber,
    drawable,
    x,
    y,
    width,
    height,
    minorEvent,
    count,
    majorEvent
}).

-define(xGraphicsExposeEvent(Type,Detail,SequenceNumber,Drawable,X,Y,Width,Height,MinorEvent,Count,MajorEvent,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?DRAWABLE(Drawable),
    ?CARD16(X),
    ?CARD16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(MinorEvent),
    ?CARD16(Count),
    ?BYTE(MajorEvent),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xGraphicsExposeEvent_enc(R),
  << ?xGraphicsExposeEvent(R#xGraphicsExposeEvent.type,R#xGraphicsExposeEvent.detail,R#xGraphicsExposeEvent.sequenceNumber,R#xGraphicsExposeEvent.drawable,R#xGraphicsExposeEvent.x,R#xGraphicsExposeEvent.y,R#xGraphicsExposeEvent.width,R#xGraphicsExposeEvent.height,R#xGraphicsExposeEvent.minorEvent,R#xGraphicsExposeEvent.count,R#xGraphicsExposeEvent.majorEvent,0,0,0)>>).

-define(xGraphicsExposeEvent_dec(B0),
 begin <<?xGraphicsExposeEvent(R_xGraphicsExposeEvent_type, R_xGraphicsExposeEvent_detail, R_xGraphicsExposeEvent_sequenceNumber, R_xGraphicsExposeEvent_drawable, R_xGraphicsExposeEvent_x, R_xGraphicsExposeEvent_y, R_xGraphicsExposeEvent_width, R_xGraphicsExposeEvent_height, R_xGraphicsExposeEvent_minorEvent, R_xGraphicsExposeEvent_count, R_xGraphicsExposeEvent_majorEvent, _, _, _),B1/binary>> = B0,
  { #xGraphicsExposeEvent{type=R_xGraphicsExposeEvent_type, detail=R_xGraphicsExposeEvent_detail, sequenceNumber=R_xGraphicsExposeEvent_sequenceNumber, drawable=R_xGraphicsExposeEvent_drawable, x=R_xGraphicsExposeEvent_x, y=R_xGraphicsExposeEvent_y, width=R_xGraphicsExposeEvent_width, height=R_xGraphicsExposeEvent_height, minorEvent=R_xGraphicsExposeEvent_minorEvent, count=R_xGraphicsExposeEvent_count, majorEvent=R_xGraphicsExposeEvent_majorEvent }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xNoExposeEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xNoExposeEvent,{
    type,
    detail,
    sequenceNumber,
    drawable,
    minorEvent,
    majorEvent,
    bpad
}).

-define(xNoExposeEvent(Type,Detail,SequenceNumber,Drawable,MinorEvent,MajorEvent,Bpad),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?DRAWABLE(Drawable),
    ?CARD16(MinorEvent),
    ?BYTE(MajorEvent),
    ?BYTE(Bpad)).

-define(xNoExposeEvent_enc(R),
  << ?xNoExposeEvent(R#xNoExposeEvent.type,R#xNoExposeEvent.detail,R#xNoExposeEvent.sequenceNumber,R#xNoExposeEvent.drawable,R#xNoExposeEvent.minorEvent,R#xNoExposeEvent.majorEvent,R#xNoExposeEvent.bpad)>>).

-define(xNoExposeEvent_dec(B0),
 begin <<?xNoExposeEvent(R_xNoExposeEvent_type, R_xNoExposeEvent_detail, R_xNoExposeEvent_sequenceNumber, R_xNoExposeEvent_drawable, R_xNoExposeEvent_minorEvent, R_xNoExposeEvent_majorEvent, R_xNoExposeEvent_bpad),B1/binary>> = B0,
  { #xNoExposeEvent{type=R_xNoExposeEvent_type, detail=R_xNoExposeEvent_detail, sequenceNumber=R_xNoExposeEvent_sequenceNumber, drawable=R_xNoExposeEvent_drawable, minorEvent=R_xNoExposeEvent_minorEvent, majorEvent=R_xNoExposeEvent_majorEvent, bpad=R_xNoExposeEvent_bpad }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xVisibilityEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xVisibilityEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    state
}).

-define(xVisibilityEvent(Type,Detail,SequenceNumber,Window,State,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?CARD8(State),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xVisibilityEvent_enc(R),
  << ?xVisibilityEvent(R#xVisibilityEvent.type,R#xVisibilityEvent.detail,R#xVisibilityEvent.sequenceNumber,R#xVisibilityEvent.window,R#xVisibilityEvent.state,0,0,0)>>).

-define(xVisibilityEvent_dec(B0),
 begin <<?xVisibilityEvent(R_xVisibilityEvent_type, R_xVisibilityEvent_detail, R_xVisibilityEvent_sequenceNumber, R_xVisibilityEvent_window, R_xVisibilityEvent_state, _, _, _),B1/binary>> = B0,
  { #xVisibilityEvent{type=R_xVisibilityEvent_type, detail=R_xVisibilityEvent_detail, sequenceNumber=R_xVisibilityEvent_sequenceNumber, window=R_xVisibilityEvent_window, state=R_xVisibilityEvent_state }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateWindowEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateWindowEvent,{
    type,
    detail,
    sequenceNumber,
    parent,
    window,
    x,
    y,
    width,
    height,
    borderWidth,
    override,
    bpad
}).

-define(xCreateWindowEvent(Type,Detail,SequenceNumber,Parent,Window,X,Y,Width,Height,BorderWidth,Override,Bpad),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Parent),
    ?WINDOW(Window),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(BorderWidth),
    ?BOOL(Override),
    ?BYTE(Bpad)).

-define(xCreateWindowEvent_enc(R),
  << ?xCreateWindowEvent(R#xCreateWindowEvent.type,R#xCreateWindowEvent.detail,R#xCreateWindowEvent.sequenceNumber,R#xCreateWindowEvent.parent,R#xCreateWindowEvent.window,R#xCreateWindowEvent.x,R#xCreateWindowEvent.y,R#xCreateWindowEvent.width,R#xCreateWindowEvent.height,R#xCreateWindowEvent.borderWidth,R#xCreateWindowEvent.override,R#xCreateWindowEvent.bpad)>>).

-define(xCreateWindowEvent_dec(B0),
 begin <<?xCreateWindowEvent(R_xCreateWindowEvent_type, R_xCreateWindowEvent_detail, R_xCreateWindowEvent_sequenceNumber, R_xCreateWindowEvent_parent, R_xCreateWindowEvent_window, R_xCreateWindowEvent_x, R_xCreateWindowEvent_y, R_xCreateWindowEvent_width, R_xCreateWindowEvent_height, R_xCreateWindowEvent_borderWidth, R_xCreateWindowEvent_override, R_xCreateWindowEvent_bpad),B1/binary>> = B0,
  { #xCreateWindowEvent{type=R_xCreateWindowEvent_type, detail=R_xCreateWindowEvent_detail, sequenceNumber=R_xCreateWindowEvent_sequenceNumber, parent=R_xCreateWindowEvent_parent, window=R_xCreateWindowEvent_window, x=R_xCreateWindowEvent_x, y=R_xCreateWindowEvent_y, width=R_xCreateWindowEvent_width, height=R_xCreateWindowEvent_height, borderWidth=R_xCreateWindowEvent_borderWidth, override=R_xCreateWindowEvent_override, bpad=R_xCreateWindowEvent_bpad }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xDestroyWindowEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xDestroyWindowEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window
}).

-define(xDestroyWindowEvent(Type,Detail,SequenceNumber,Event,Window),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window)).

-define(xDestroyWindowEvent_enc(R),
  << ?xDestroyWindowEvent(R#xDestroyWindowEvent.type,R#xDestroyWindowEvent.detail,R#xDestroyWindowEvent.sequenceNumber,R#xDestroyWindowEvent.event,R#xDestroyWindowEvent.window)>>).

-define(xDestroyWindowEvent_dec(B0),
 begin <<?xDestroyWindowEvent(R_xDestroyWindowEvent_type, R_xDestroyWindowEvent_detail, R_xDestroyWindowEvent_sequenceNumber, R_xDestroyWindowEvent_event, R_xDestroyWindowEvent_window),B1/binary>> = B0,
  { #xDestroyWindowEvent{type=R_xDestroyWindowEvent_type, detail=R_xDestroyWindowEvent_detail, sequenceNumber=R_xDestroyWindowEvent_sequenceNumber, event=R_xDestroyWindowEvent_event, window=R_xDestroyWindowEvent_window }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xUnmapEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xUnmapEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    fromConfigure
}).

-define(xUnmapEvent(Type,Detail,SequenceNumber,Event,Window,FromConfigure,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?BOOL(FromConfigure),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xUnmapEvent_enc(R),
  << ?xUnmapEvent(R#xUnmapEvent.type,R#xUnmapEvent.detail,R#xUnmapEvent.sequenceNumber,R#xUnmapEvent.event,R#xUnmapEvent.window,R#xUnmapEvent.fromConfigure,0,0,0)>>).

-define(xUnmapEvent_dec(B0),
 begin <<?xUnmapEvent(R_xUnmapEvent_type, R_xUnmapEvent_detail, R_xUnmapEvent_sequenceNumber, R_xUnmapEvent_event, R_xUnmapEvent_window, R_xUnmapEvent_fromConfigure, _, _, _),B1/binary>> = B0,
  { #xUnmapEvent{type=R_xUnmapEvent_type, detail=R_xUnmapEvent_detail, sequenceNumber=R_xUnmapEvent_sequenceNumber, event=R_xUnmapEvent_event, window=R_xUnmapEvent_window, fromConfigure=R_xUnmapEvent_fromConfigure }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xMapEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xMapEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    override
}).

-define(xMapEvent(Type,Detail,SequenceNumber,Event,Window,Override,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?BOOL(Override),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xMapEvent_enc(R),
  << ?xMapEvent(R#xMapEvent.type,R#xMapEvent.detail,R#xMapEvent.sequenceNumber,R#xMapEvent.event,R#xMapEvent.window,R#xMapEvent.override,0,0,0)>>).

-define(xMapEvent_dec(B0),
 begin <<?xMapEvent(R_xMapEvent_type, R_xMapEvent_detail, R_xMapEvent_sequenceNumber, R_xMapEvent_event, R_xMapEvent_window, R_xMapEvent_override, _, _, _),B1/binary>> = B0,
  { #xMapEvent{type=R_xMapEvent_type, detail=R_xMapEvent_detail, sequenceNumber=R_xMapEvent_sequenceNumber, event=R_xMapEvent_event, window=R_xMapEvent_window, override=R_xMapEvent_override }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xMapRequestEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xMapRequestEvent,{
    type,
    detail,
    sequenceNumber,
    parent,
    window
}).

-define(xMapRequestEvent(Type,Detail,SequenceNumber,Parent,Window),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Parent),
    ?WINDOW(Window)).

-define(xMapRequestEvent_enc(R),
  << ?xMapRequestEvent(R#xMapRequestEvent.type,R#xMapRequestEvent.detail,R#xMapRequestEvent.sequenceNumber,R#xMapRequestEvent.parent,R#xMapRequestEvent.window)>>).

-define(xMapRequestEvent_dec(B0),
 begin <<?xMapRequestEvent(R_xMapRequestEvent_type, R_xMapRequestEvent_detail, R_xMapRequestEvent_sequenceNumber, R_xMapRequestEvent_parent, R_xMapRequestEvent_window),B1/binary>> = B0,
  { #xMapRequestEvent{type=R_xMapRequestEvent_type, detail=R_xMapRequestEvent_detail, sequenceNumber=R_xMapRequestEvent_sequenceNumber, parent=R_xMapRequestEvent_parent, window=R_xMapRequestEvent_window }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xReparentEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xReparentEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    parent,
    x,
    y,
    override
}).

-define(xReparentEvent(Type,Detail,SequenceNumber,Event,Window,Parent,X,Y,Override,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?WINDOW(Parent),
    ?INT16(X),
    ?INT16(Y),
    ?BOOL(Override),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xReparentEvent_enc(R),
  << ?xReparentEvent(R#xReparentEvent.type,R#xReparentEvent.detail,R#xReparentEvent.sequenceNumber,R#xReparentEvent.event,R#xReparentEvent.window,R#xReparentEvent.parent,R#xReparentEvent.x,R#xReparentEvent.y,R#xReparentEvent.override,0,0,0)>>).

-define(xReparentEvent_dec(B0),
 begin <<?xReparentEvent(R_xReparentEvent_type, R_xReparentEvent_detail, R_xReparentEvent_sequenceNumber, R_xReparentEvent_event, R_xReparentEvent_window, R_xReparentEvent_parent, R_xReparentEvent_x, R_xReparentEvent_y, R_xReparentEvent_override, _, _, _),B1/binary>> = B0,
  { #xReparentEvent{type=R_xReparentEvent_type, detail=R_xReparentEvent_detail, sequenceNumber=R_xReparentEvent_sequenceNumber, event=R_xReparentEvent_event, window=R_xReparentEvent_window, parent=R_xReparentEvent_parent, x=R_xReparentEvent_x, y=R_xReparentEvent_y, override=R_xReparentEvent_override }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConfigureEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConfigureEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    aboveSibling,
    x,
    y,
    width,
    height,
    borderWidth,
    override,
    bpad
}).

-define(xConfigureEvent(Type,Detail,SequenceNumber,Event,Window,AboveSibling,X,Y,Width,Height,BorderWidth,Override,Bpad),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?WINDOW(AboveSibling),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(BorderWidth),
    ?BOOL(Override),
    ?BYTE(Bpad)).

-define(xConfigureEvent_enc(R),
  << ?xConfigureEvent(R#xConfigureEvent.type,R#xConfigureEvent.detail,R#xConfigureEvent.sequenceNumber,R#xConfigureEvent.event,R#xConfigureEvent.window,R#xConfigureEvent.aboveSibling,R#xConfigureEvent.x,R#xConfigureEvent.y,R#xConfigureEvent.width,R#xConfigureEvent.height,R#xConfigureEvent.borderWidth,R#xConfigureEvent.override,R#xConfigureEvent.bpad)>>).

-define(xConfigureEvent_dec(B0),
 begin <<?xConfigureEvent(R_xConfigureEvent_type, R_xConfigureEvent_detail, R_xConfigureEvent_sequenceNumber, R_xConfigureEvent_event, R_xConfigureEvent_window, R_xConfigureEvent_aboveSibling, R_xConfigureEvent_x, R_xConfigureEvent_y, R_xConfigureEvent_width, R_xConfigureEvent_height, R_xConfigureEvent_borderWidth, R_xConfigureEvent_override, R_xConfigureEvent_bpad),B1/binary>> = B0,
  { #xConfigureEvent{type=R_xConfigureEvent_type, detail=R_xConfigureEvent_detail, sequenceNumber=R_xConfigureEvent_sequenceNumber, event=R_xConfigureEvent_event, window=R_xConfigureEvent_window, aboveSibling=R_xConfigureEvent_aboveSibling, x=R_xConfigureEvent_x, y=R_xConfigureEvent_y, width=R_xConfigureEvent_width, height=R_xConfigureEvent_height, borderWidth=R_xConfigureEvent_borderWidth, override=R_xConfigureEvent_override, bpad=R_xConfigureEvent_bpad }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConfigureRequestEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConfigureRequestEvent,{
    type,
    detail,
    sequenceNumber,
    parent,
    window,
    sibling,
    x,
    y,
    width,
    height,
    borderWidth,
    valueMask
}).

-define(xConfigureRequestEvent(Type,Detail,SequenceNumber,Parent,Window,Sibling,X,Y,Width,Height,BorderWidth,ValueMask,Pad1),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Parent),
    ?WINDOW(Window),
    ?WINDOW(Sibling),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(BorderWidth),
    ?CARD16(ValueMask),
    ?CARD32(Pad1)).

-define(xConfigureRequestEvent_enc(R),
  << ?xConfigureRequestEvent(R#xConfigureRequestEvent.type,R#xConfigureRequestEvent.detail,R#xConfigureRequestEvent.sequenceNumber,R#xConfigureRequestEvent.parent,R#xConfigureRequestEvent.window,R#xConfigureRequestEvent.sibling,R#xConfigureRequestEvent.x,R#xConfigureRequestEvent.y,R#xConfigureRequestEvent.width,R#xConfigureRequestEvent.height,R#xConfigureRequestEvent.borderWidth,R#xConfigureRequestEvent.valueMask,0)>>).

-define(xConfigureRequestEvent_dec(B0),
 begin <<?xConfigureRequestEvent(R_xConfigureRequestEvent_type, R_xConfigureRequestEvent_detail, R_xConfigureRequestEvent_sequenceNumber, R_xConfigureRequestEvent_parent, R_xConfigureRequestEvent_window, R_xConfigureRequestEvent_sibling, R_xConfigureRequestEvent_x, R_xConfigureRequestEvent_y, R_xConfigureRequestEvent_width, R_xConfigureRequestEvent_height, R_xConfigureRequestEvent_borderWidth, R_xConfigureRequestEvent_valueMask, _),B1/binary>> = B0,
  { #xConfigureRequestEvent{type=R_xConfigureRequestEvent_type, detail=R_xConfigureRequestEvent_detail, sequenceNumber=R_xConfigureRequestEvent_sequenceNumber, parent=R_xConfigureRequestEvent_parent, window=R_xConfigureRequestEvent_window, sibling=R_xConfigureRequestEvent_sibling, x=R_xConfigureRequestEvent_x, y=R_xConfigureRequestEvent_y, width=R_xConfigureRequestEvent_width, height=R_xConfigureRequestEvent_height, borderWidth=R_xConfigureRequestEvent_borderWidth, valueMask=R_xConfigureRequestEvent_valueMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGravityEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGravityEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    x,
    y
}).

-define(xGravityEvent(Type,Detail,SequenceNumber,Event,Window,X,Y,Pad1,Pad2,Pad3,Pad4),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?INT16(X),
    ?INT16(Y),
    ?CARD32(Pad1),
    ?CARD32(Pad2),
    ?CARD32(Pad3),
    ?CARD32(Pad4)).

-define(xGravityEvent_enc(R),
  << ?xGravityEvent(R#xGravityEvent.type,R#xGravityEvent.detail,R#xGravityEvent.sequenceNumber,R#xGravityEvent.event,R#xGravityEvent.window,R#xGravityEvent.x,R#xGravityEvent.y,0,0,0,0)>>).

-define(xGravityEvent_dec(B0),
 begin <<?xGravityEvent(R_xGravityEvent_type, R_xGravityEvent_detail, R_xGravityEvent_sequenceNumber, R_xGravityEvent_event, R_xGravityEvent_window, R_xGravityEvent_x, R_xGravityEvent_y, _, _, _, _),B1/binary>> = B0,
  { #xGravityEvent{type=R_xGravityEvent_type, detail=R_xGravityEvent_detail, sequenceNumber=R_xGravityEvent_sequenceNumber, event=R_xGravityEvent_event, window=R_xGravityEvent_window, x=R_xGravityEvent_x, y=R_xGravityEvent_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xResizeRequestEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xResizeRequestEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    width,
    height
}).

-define(xResizeRequestEvent(Type,Detail,SequenceNumber,Window,Width,Height),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xResizeRequestEvent_enc(R),
  << ?xResizeRequestEvent(R#xResizeRequestEvent.type,R#xResizeRequestEvent.detail,R#xResizeRequestEvent.sequenceNumber,R#xResizeRequestEvent.window,R#xResizeRequestEvent.width,R#xResizeRequestEvent.height)>>).

-define(xResizeRequestEvent_dec(B0),
 begin <<?xResizeRequestEvent(R_xResizeRequestEvent_type, R_xResizeRequestEvent_detail, R_xResizeRequestEvent_sequenceNumber, R_xResizeRequestEvent_window, R_xResizeRequestEvent_width, R_xResizeRequestEvent_height),B1/binary>> = B0,
  { #xResizeRequestEvent{type=R_xResizeRequestEvent_type, detail=R_xResizeRequestEvent_detail, sequenceNumber=R_xResizeRequestEvent_sequenceNumber, window=R_xResizeRequestEvent_window, width=R_xResizeRequestEvent_width, height=R_xResizeRequestEvent_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCirculateEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCirculateEvent,{
    type,
    detail,
    sequenceNumber,
    event,
    window,
    parent,
    place
}).

-define(xCirculateEvent(Type,Detail,SequenceNumber,Event,Window,Parent,Place,Pad1,Pad2,Pad3),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Event),
    ?WINDOW(Window),
    ?WINDOW(Parent),
    ?BYTE(Place),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xCirculateEvent_enc(R),
  << ?xCirculateEvent(R#xCirculateEvent.type,R#xCirculateEvent.detail,R#xCirculateEvent.sequenceNumber,R#xCirculateEvent.event,R#xCirculateEvent.window,R#xCirculateEvent.parent,R#xCirculateEvent.place,0,0,0)>>).

-define(xCirculateEvent_dec(B0),
 begin <<?xCirculateEvent(R_xCirculateEvent_type, R_xCirculateEvent_detail, R_xCirculateEvent_sequenceNumber, R_xCirculateEvent_event, R_xCirculateEvent_window, R_xCirculateEvent_parent, R_xCirculateEvent_place, _, _, _),B1/binary>> = B0,
  { #xCirculateEvent{type=R_xCirculateEvent_type, detail=R_xCirculateEvent_detail, sequenceNumber=R_xCirculateEvent_sequenceNumber, event=R_xCirculateEvent_event, window=R_xCirculateEvent_window, parent=R_xCirculateEvent_parent, place=R_xCirculateEvent_place }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPropertyEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPropertyEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    atom,
    time,
    state
}).

-define(xPropertyEvent(Type,Detail,SequenceNumber,Window,Atom,Time,State,Pad1,Pad2),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?ATOM(Atom),
    ?TIME(Time),
    ?BYTE(State),
    ?BYTE(Pad1),
    ?CARD16(Pad2)).

-define(xPropertyEvent_enc(R),
  << ?xPropertyEvent(R#xPropertyEvent.type,R#xPropertyEvent.detail,R#xPropertyEvent.sequenceNumber,R#xPropertyEvent.window,R#xPropertyEvent.atom,R#xPropertyEvent.time,R#xPropertyEvent.state,0,0)>>).

-define(xPropertyEvent_dec(B0),
 begin <<?xPropertyEvent(R_xPropertyEvent_type, R_xPropertyEvent_detail, R_xPropertyEvent_sequenceNumber, R_xPropertyEvent_window, R_xPropertyEvent_atom, R_xPropertyEvent_time, R_xPropertyEvent_state, _, _),B1/binary>> = B0,
  { #xPropertyEvent{type=R_xPropertyEvent_type, detail=R_xPropertyEvent_detail, sequenceNumber=R_xPropertyEvent_sequenceNumber, window=R_xPropertyEvent_window, atom=R_xPropertyEvent_atom, time=R_xPropertyEvent_time, state=R_xPropertyEvent_state }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSelectionClearEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSelectionClearEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    window,
    atom
}).

-define(xSelectionClearEvent(Type,Detail,SequenceNumber,Time,Window,Atom),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?TIME(Time),
    ?WINDOW(Window),
    ?ATOM(Atom)).

-define(xSelectionClearEvent_enc(R),
  << ?xSelectionClearEvent(R#xSelectionClearEvent.type,R#xSelectionClearEvent.detail,R#xSelectionClearEvent.sequenceNumber,R#xSelectionClearEvent.time,R#xSelectionClearEvent.window,R#xSelectionClearEvent.atom)>>).

-define(xSelectionClearEvent_dec(B0),
 begin <<?xSelectionClearEvent(R_xSelectionClearEvent_type, R_xSelectionClearEvent_detail, R_xSelectionClearEvent_sequenceNumber, R_xSelectionClearEvent_time, R_xSelectionClearEvent_window, R_xSelectionClearEvent_atom),B1/binary>> = B0,
  { #xSelectionClearEvent{type=R_xSelectionClearEvent_type, detail=R_xSelectionClearEvent_detail, sequenceNumber=R_xSelectionClearEvent_sequenceNumber, time=R_xSelectionClearEvent_time, window=R_xSelectionClearEvent_window, atom=R_xSelectionClearEvent_atom }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSelectionRequestEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSelectionRequestEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    owner,
    requestor,
    selection,
    target,
    property
}).

-define(xSelectionRequestEvent(Type,Detail,SequenceNumber,Time,Owner,Requestor,Selection,Target,Property),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?TIME(Time),
    ?WINDOW(Owner),
    ?WINDOW(Requestor),
    ?ATOM(Selection),
    ?ATOM(Target),
    ?ATOM(Property)).

-define(xSelectionRequestEvent_enc(R),
  << ?xSelectionRequestEvent(R#xSelectionRequestEvent.type,R#xSelectionRequestEvent.detail,R#xSelectionRequestEvent.sequenceNumber,R#xSelectionRequestEvent.time,R#xSelectionRequestEvent.owner,R#xSelectionRequestEvent.requestor,R#xSelectionRequestEvent.selection,R#xSelectionRequestEvent.target,R#xSelectionRequestEvent.property)>>).

-define(xSelectionRequestEvent_dec(B0),
 begin <<?xSelectionRequestEvent(R_xSelectionRequestEvent_type, R_xSelectionRequestEvent_detail, R_xSelectionRequestEvent_sequenceNumber, R_xSelectionRequestEvent_time, R_xSelectionRequestEvent_owner, R_xSelectionRequestEvent_requestor, R_xSelectionRequestEvent_selection, R_xSelectionRequestEvent_target, R_xSelectionRequestEvent_property),B1/binary>> = B0,
  { #xSelectionRequestEvent{type=R_xSelectionRequestEvent_type, detail=R_xSelectionRequestEvent_detail, sequenceNumber=R_xSelectionRequestEvent_sequenceNumber, time=R_xSelectionRequestEvent_time, owner=R_xSelectionRequestEvent_owner, requestor=R_xSelectionRequestEvent_requestor, selection=R_xSelectionRequestEvent_selection, target=R_xSelectionRequestEvent_target, property=R_xSelectionRequestEvent_property }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSelectionEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSelectionEvent,{
    type,
    detail,
    sequenceNumber,
    time,
    requestor,
    selection,
    target,
    property
}).

-define(xSelectionEvent(Type,Detail,SequenceNumber,Time,Requestor,Selection,Target,Property),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?TIME(Time),
    ?WINDOW(Requestor),
    ?ATOM(Selection),
    ?ATOM(Target),
    ?ATOM(Property)).

-define(xSelectionEvent_enc(R),
  << ?xSelectionEvent(R#xSelectionEvent.type,R#xSelectionEvent.detail,R#xSelectionEvent.sequenceNumber,R#xSelectionEvent.time,R#xSelectionEvent.requestor,R#xSelectionEvent.selection,R#xSelectionEvent.target,R#xSelectionEvent.property)>>).

-define(xSelectionEvent_dec(B0),
 begin <<?xSelectionEvent(R_xSelectionEvent_type, R_xSelectionEvent_detail, R_xSelectionEvent_sequenceNumber, R_xSelectionEvent_time, R_xSelectionEvent_requestor, R_xSelectionEvent_selection, R_xSelectionEvent_target, R_xSelectionEvent_property),B1/binary>> = B0,
  { #xSelectionEvent{type=R_xSelectionEvent_type, detail=R_xSelectionEvent_detail, sequenceNumber=R_xSelectionEvent_sequenceNumber, time=R_xSelectionEvent_time, requestor=R_xSelectionEvent_requestor, selection=R_xSelectionEvent_selection, target=R_xSelectionEvent_target, property=R_xSelectionEvent_property }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xColormapEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xColormapEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    colormap,
    new,
    state
}).

-define(xColormapEvent(Type,Detail,SequenceNumber,Window,Colormap,New,State,Pad1,Pad2),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?COLORMAP(Colormap),
    ?BOOL(New),
    ?BYTE(State),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xColormapEvent_enc(R),
  << ?xColormapEvent(R#xColormapEvent.type,R#xColormapEvent.detail,R#xColormapEvent.sequenceNumber,R#xColormapEvent.window,R#xColormapEvent.colormap,R#xColormapEvent.new,R#xColormapEvent.state,0,0)>>).

-define(xColormapEvent_dec(B0),
 begin <<?xColormapEvent(R_xColormapEvent_type, R_xColormapEvent_detail, R_xColormapEvent_sequenceNumber, R_xColormapEvent_window, R_xColormapEvent_colormap, R_xColormapEvent_new, R_xColormapEvent_state, _, _),B1/binary>> = B0,
  { #xColormapEvent{type=R_xColormapEvent_type, detail=R_xColormapEvent_detail, sequenceNumber=R_xColormapEvent_sequenceNumber, window=R_xColormapEvent_window, colormap=R_xColormapEvent_colormap, new=R_xColormapEvent_new, state=R_xColormapEvent_state }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xMappingEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xMappingEvent,{
    type,
    detail,
    sequenceNumber,
    request,
    firstKeyCode,
    count
}).

-define(xMappingEvent(Type,Detail,SequenceNumber,Request,FirstKeyCode,Count,Pad1),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?CARD8(Request),
    ?KEYCODE(FirstKeyCode),
    ?CARD8(Count),
    ?BYTE(Pad1)).

-define(xMappingEvent_enc(R),
  << ?xMappingEvent(R#xMappingEvent.type,R#xMappingEvent.detail,R#xMappingEvent.sequenceNumber,R#xMappingEvent.request,R#xMappingEvent.firstKeyCode,R#xMappingEvent.count,0)>>).

-define(xMappingEvent_dec(B0),
 begin <<?xMappingEvent(R_xMappingEvent_type, R_xMappingEvent_detail, R_xMappingEvent_sequenceNumber, R_xMappingEvent_request, R_xMappingEvent_firstKeyCode, R_xMappingEvent_count, _),B1/binary>> = B0,
  { #xMappingEvent{type=R_xMappingEvent_type, detail=R_xMappingEvent_detail, sequenceNumber=R_xMappingEvent_sequenceNumber, request=R_xMappingEvent_request, firstKeyCode=R_xMappingEvent_firstKeyCode, count=R_xMappingEvent_count }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xClientMessageEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xClientMessageEvent,{
    type,
    detail,
    sequenceNumber,
    window,
    mtype,
    bytes
}).

-define(xClientMessageEvent(Type,Detail,SequenceNumber,Window,Mtype,Bytes),
    ?BYTE(Type),
    ?BYTE(Detail),
    ?CARD16(SequenceNumber),
    ?WINDOW(Window),
    ?ATOM(Mtype),
    Bytes:20/binary).

-define(xClientMessageEvent_enc(R),
  << ?xClientMessageEvent(R#xClientMessageEvent.type,R#xClientMessageEvent.detail,R#xClientMessageEvent.sequenceNumber,R#xClientMessageEvent.window,R#xClientMessageEvent.mtype,R#xClientMessageEvent.bytes)>>).

-define(xClientMessageEvent_dec(B0),
 begin <<?xClientMessageEvent(R_xClientMessageEvent_type, R_xClientMessageEvent_detail, R_xClientMessageEvent_sequenceNumber, R_xClientMessageEvent_window, R_xClientMessageEvent_mtype, R_xClientMessageEvent_bytes),B1/binary>> = B0,
  { #xClientMessageEvent{type=R_xClientMessageEvent_type, detail=R_xClientMessageEvent_detail, sequenceNumber=R_xClientMessageEvent_sequenceNumber, window=R_xClientMessageEvent_window, mtype=R_xClientMessageEvent_mtype, bytes=R_xClientMessageEvent_bytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xKeymapEvent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xKeymapEvent,{
    type,
    map
}).

-define(xKeymapEvent(Type,Map),
    ?BYTE(Type),
    Map:31/binary).

-define(xKeymapEvent_enc(R),
  << ?xKeymapEvent(R#xKeymapEvent.type,R#xKeymapEvent.map)>>).

-define(xKeymapEvent_dec(B0),
 begin <<?xKeymapEvent(R_xKeymapEvent_type, R_xKeymapEvent_map),B1/binary>> = B0,
  { #xKeymapEvent{type=R_xKeymapEvent_type, map=R_xKeymapEvent_map }, B1} end).


-define(xReply(X),?xReply(X)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xReq,{
    reqType,
    data,
    length
}).

-define(xReq(ReqType,Data,Length),
    ?CARD8(ReqType),
    ?CARD8(Data),
    ?CARD16(Length)).

-define(xReq_enc(R),
  << ?xReq(R#xReq.reqType,R#xReq.data,R#xReq.length)>>).

-define(xReq_dec(B0),
 begin <<?xReq(R_xReq_reqType, R_xReq_data, R_xReq_length),B1/binary>> = B0,
  { #xReq{reqType=R_xReq_reqType, data=R_xReq_data, length=R_xReq_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xResourceReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xResourceReq,{
    id
}).

-define(xResourceReq(Id),
    ?CARD32(Id)).

-define(xResourceReq_enc(R),
  << ?xResourceReq(R#xResourceReq.id)>>).

-define(xResourceReq_dec(B0),
 begin <<?xResourceReq(R_xResourceReq_id),B1/binary>> = B0,
  { #xResourceReq{id=R_xResourceReq_id }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateWindowReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateWindowReq,{
    wid,
    parent,
    x,
    y,
    width,
    height,
    borderWidth,
    class,
    visual,
    mask
}).

-define(xCreateWindowReq(Wid,Parent,X,Y,Width,Height,BorderWidth,Class,Visual,Mask),
    ?WINDOW(Wid),
    ?WINDOW(Parent),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD16(BorderWidth),
    ?CARD16(Class),
    ?VISUALID(Visual),
    ?CARD32(Mask)).

-define(xCreateWindowReq_enc(R),
  << ?xCreateWindowReq(R#xCreateWindowReq.wid,R#xCreateWindowReq.parent,R#xCreateWindowReq.x,R#xCreateWindowReq.y,R#xCreateWindowReq.width,R#xCreateWindowReq.height,R#xCreateWindowReq.borderWidth,R#xCreateWindowReq.class,R#xCreateWindowReq.visual,R#xCreateWindowReq.mask)>>).

-define(xCreateWindowReq_dec(B0),
 begin <<?xCreateWindowReq(R_xCreateWindowReq_wid, R_xCreateWindowReq_parent, R_xCreateWindowReq_x, R_xCreateWindowReq_y, R_xCreateWindowReq_width, R_xCreateWindowReq_height, R_xCreateWindowReq_borderWidth, R_xCreateWindowReq_class, R_xCreateWindowReq_visual, R_xCreateWindowReq_mask),B1/binary>> = B0,
  { #xCreateWindowReq{wid=R_xCreateWindowReq_wid, parent=R_xCreateWindowReq_parent, x=R_xCreateWindowReq_x, y=R_xCreateWindowReq_y, width=R_xCreateWindowReq_width, height=R_xCreateWindowReq_height, borderWidth=R_xCreateWindowReq_borderWidth, class=R_xCreateWindowReq_class, visual=R_xCreateWindowReq_visual, mask=R_xCreateWindowReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeWindowAttributesReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeWindowAttributesReq,{
    window,
    valueMask
}).

-define(xChangeWindowAttributesReq(Window,ValueMask),
    ?WINDOW(Window),
    ?CARD32(ValueMask)).

-define(xChangeWindowAttributesReq_enc(R),
  << ?xChangeWindowAttributesReq(R#xChangeWindowAttributesReq.window,R#xChangeWindowAttributesReq.valueMask)>>).

-define(xChangeWindowAttributesReq_dec(B0),
 begin <<?xChangeWindowAttributesReq(R_xChangeWindowAttributesReq_window, R_xChangeWindowAttributesReq_valueMask),B1/binary>> = B0,
  { #xChangeWindowAttributesReq{window=R_xChangeWindowAttributesReq_window, valueMask=R_xChangeWindowAttributesReq_valueMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeSaveSetReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeSaveSetReq,{
    window
}).

-define(xChangeSaveSetReq(Window),
    ?WINDOW(Window)).

-define(xChangeSaveSetReq_enc(R),
  << ?xChangeSaveSetReq(R#xChangeSaveSetReq.window)>>).

-define(xChangeSaveSetReq_dec(B0),
 begin <<?xChangeSaveSetReq(R_xChangeSaveSetReq_window),B1/binary>> = B0,
  { #xChangeSaveSetReq{window=R_xChangeSaveSetReq_window }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xReparentWindowReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xReparentWindowReq,{
    window,
    parent,
    x,
    y
}).

-define(xReparentWindowReq(Window,Parent,X,Y),
    ?WINDOW(Window),
    ?WINDOW(Parent),
    ?INT16(X),
    ?INT16(Y)).

-define(xReparentWindowReq_enc(R),
  << ?xReparentWindowReq(R#xReparentWindowReq.window,R#xReparentWindowReq.parent,R#xReparentWindowReq.x,R#xReparentWindowReq.y)>>).

-define(xReparentWindowReq_dec(B0),
 begin <<?xReparentWindowReq(R_xReparentWindowReq_window, R_xReparentWindowReq_parent, R_xReparentWindowReq_x, R_xReparentWindowReq_y),B1/binary>> = B0,
  { #xReparentWindowReq{window=R_xReparentWindowReq_window, parent=R_xReparentWindowReq_parent, x=R_xReparentWindowReq_x, y=R_xReparentWindowReq_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConfigureWindowReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConfigureWindowReq,{
    window,
    mask
}).

-define(xConfigureWindowReq(Window,Mask,Pad2),
    ?WINDOW(Window),
    ?CARD16(Mask),
    ?CARD16(Pad2)).

-define(xConfigureWindowReq_enc(R),
  << ?xConfigureWindowReq(R#xConfigureWindowReq.window,R#xConfigureWindowReq.mask,0)>>).

-define(xConfigureWindowReq_dec(B0),
 begin <<?xConfigureWindowReq(R_xConfigureWindowReq_window, R_xConfigureWindowReq_mask, _),B1/binary>> = B0,
  { #xConfigureWindowReq{window=R_xConfigureWindowReq_window, mask=R_xConfigureWindowReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCirculateWindowReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCirculateWindowReq,{
    window
}).

-define(xCirculateWindowReq(Window),
    ?WINDOW(Window)).

-define(xCirculateWindowReq_enc(R),
  << ?xCirculateWindowReq(R#xCirculateWindowReq.window)>>).

-define(xCirculateWindowReq_dec(B0),
 begin <<?xCirculateWindowReq(R_xCirculateWindowReq_window),B1/binary>> = B0,
  { #xCirculateWindowReq{window=R_xCirculateWindowReq_window }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xInternAtomReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xInternAtomReq,{
    nbytes
}).

-define(xInternAtomReq(Nbytes,Pad),
    ?CARD16(Nbytes),
    ?CARD16(Pad)).

-define(xInternAtomReq_enc(R),
  << ?xInternAtomReq(R#xInternAtomReq.nbytes,0)>>).

-define(xInternAtomReq_dec(B0),
 begin <<?xInternAtomReq(R_xInternAtomReq_nbytes, _),B1/binary>> = B0,
  { #xInternAtomReq{nbytes=R_xInternAtomReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangePropertyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangePropertyReq,{
    window,
    property,
    type,
    format,
    nUnits
}).

-define(xChangePropertyReq(Window,Property,Type,Format,Pad,NUnits),
    ?WINDOW(Window),
    ?ATOM(Property),
    ?ATOM(Type),
    ?CARD8(Format),
    Pad:3/binary,
    ?CARD32(NUnits)).

-define(xChangePropertyReq_enc(R),
  << ?xChangePropertyReq(R#xChangePropertyReq.window,R#xChangePropertyReq.property,R#xChangePropertyReq.type,R#xChangePropertyReq.format,0,R#xChangePropertyReq.nUnits)>>).

-define(xChangePropertyReq_dec(B0),
 begin <<?xChangePropertyReq(R_xChangePropertyReq_window, R_xChangePropertyReq_property, R_xChangePropertyReq_type, R_xChangePropertyReq_format, _, R_xChangePropertyReq_nUnits),B1/binary>> = B0,
  { #xChangePropertyReq{window=R_xChangePropertyReq_window, property=R_xChangePropertyReq_property, type=R_xChangePropertyReq_type, format=R_xChangePropertyReq_format, nUnits=R_xChangePropertyReq_nUnits }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xDeletePropertyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xDeletePropertyReq,{
    window,
    property
}).

-define(xDeletePropertyReq(Window,Property),
    ?WINDOW(Window),
    ?ATOM(Property)).

-define(xDeletePropertyReq_enc(R),
  << ?xDeletePropertyReq(R#xDeletePropertyReq.window,R#xDeletePropertyReq.property)>>).

-define(xDeletePropertyReq_dec(B0),
 begin <<?xDeletePropertyReq(R_xDeletePropertyReq_window, R_xDeletePropertyReq_property),B1/binary>> = B0,
  { #xDeletePropertyReq{window=R_xDeletePropertyReq_window, property=R_xDeletePropertyReq_property }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetPropertyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetPropertyReq,{
    window,
    property,
    type,
    longOffset,
    longLength
}).

-define(xGetPropertyReq(Window,Property,Type,LongOffset,LongLength),
    ?WINDOW(Window),
    ?ATOM(Property),
    ?ATOM(Type),
    ?CARD32(LongOffset),
    ?CARD32(LongLength)).

-define(xGetPropertyReq_enc(R),
  << ?xGetPropertyReq(R#xGetPropertyReq.window,R#xGetPropertyReq.property,R#xGetPropertyReq.type,R#xGetPropertyReq.longOffset,R#xGetPropertyReq.longLength)>>).

-define(xGetPropertyReq_dec(B0),
 begin <<?xGetPropertyReq(R_xGetPropertyReq_window, R_xGetPropertyReq_property, R_xGetPropertyReq_type, R_xGetPropertyReq_longOffset, R_xGetPropertyReq_longLength),B1/binary>> = B0,
  { #xGetPropertyReq{window=R_xGetPropertyReq_window, property=R_xGetPropertyReq_property, type=R_xGetPropertyReq_type, longOffset=R_xGetPropertyReq_longOffset, longLength=R_xGetPropertyReq_longLength }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetSelectionOwnerReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetSelectionOwnerReq,{
    window,
    selection,
    time
}).

-define(xSetSelectionOwnerReq(Window,Selection,Time),
    ?WINDOW(Window),
    ?ATOM(Selection),
    ?TIME(Time)).

-define(xSetSelectionOwnerReq_enc(R),
  << ?xSetSelectionOwnerReq(R#xSetSelectionOwnerReq.window,R#xSetSelectionOwnerReq.selection,R#xSetSelectionOwnerReq.time)>>).

-define(xSetSelectionOwnerReq_dec(B0),
 begin <<?xSetSelectionOwnerReq(R_xSetSelectionOwnerReq_window, R_xSetSelectionOwnerReq_selection, R_xSetSelectionOwnerReq_time),B1/binary>> = B0,
  { #xSetSelectionOwnerReq{window=R_xSetSelectionOwnerReq_window, selection=R_xSetSelectionOwnerReq_selection, time=R_xSetSelectionOwnerReq_time }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xConvertSelectionReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xConvertSelectionReq,{
    requestor,
    selection,
    target,
    property,
    time
}).

-define(xConvertSelectionReq(Requestor,Selection,Target,Property,Time),
    ?WINDOW(Requestor),
    ?ATOM(Selection),
    ?ATOM(Target),
    ?ATOM(Property),
    ?TIME(Time)).

-define(xConvertSelectionReq_enc(R),
  << ?xConvertSelectionReq(R#xConvertSelectionReq.requestor,R#xConvertSelectionReq.selection,R#xConvertSelectionReq.target,R#xConvertSelectionReq.property,R#xConvertSelectionReq.time)>>).

-define(xConvertSelectionReq_dec(B0),
 begin <<?xConvertSelectionReq(R_xConvertSelectionReq_requestor, R_xConvertSelectionReq_selection, R_xConvertSelectionReq_target, R_xConvertSelectionReq_property, R_xConvertSelectionReq_time),B1/binary>> = B0,
  { #xConvertSelectionReq{requestor=R_xConvertSelectionReq_requestor, selection=R_xConvertSelectionReq_selection, target=R_xConvertSelectionReq_target, property=R_xConvertSelectionReq_property, time=R_xConvertSelectionReq_time }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSendEventReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSendEventReq,{
    destination,
    eventMask,
    event
}).

-define(xSendEventReq(Destination,EventMask,Event),
    ?WINDOW(Destination),
    ?CARD32(EventMask),
    Event:32/binary).

-define(xSendEventReq_enc(R),
  << ?xSendEventReq(R#xSendEventReq.destination,R#xSendEventReq.eventMask,R#xSendEventReq.event)>>).

-define(xSendEventReq_dec(B0),
 begin <<?xSendEventReq(R_xSendEventReq_destination, R_xSendEventReq_eventMask, R_xSendEventReq_event),B1/binary>> = B0,
  { #xSendEventReq{destination=R_xSendEventReq_destination, eventMask=R_xSendEventReq_eventMask, event=R_xSendEventReq_event }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabPointerReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabPointerReq,{
    grabWindow,
    eventMask,
    pointerMode,
    keyboardMode,
    confineTo,
    cursor,
    time
}).

-define(xGrabPointerReq(GrabWindow,EventMask,PointerMode,KeyboardMode,ConfineTo,Cursor,Time),
    ?WINDOW(GrabWindow),
    ?CARD16(EventMask),
    ?BYTE(PointerMode),
    ?BYTE(KeyboardMode),
    ?WINDOW(ConfineTo),
    ?CURSOR(Cursor),
    ?TIME(Time)).

-define(xGrabPointerReq_enc(R),
  << ?xGrabPointerReq(R#xGrabPointerReq.grabWindow,R#xGrabPointerReq.eventMask,R#xGrabPointerReq.pointerMode,R#xGrabPointerReq.keyboardMode,R#xGrabPointerReq.confineTo,R#xGrabPointerReq.cursor,R#xGrabPointerReq.time)>>).

-define(xGrabPointerReq_dec(B0),
 begin <<?xGrabPointerReq(R_xGrabPointerReq_grabWindow, R_xGrabPointerReq_eventMask, R_xGrabPointerReq_pointerMode, R_xGrabPointerReq_keyboardMode, R_xGrabPointerReq_confineTo, R_xGrabPointerReq_cursor, R_xGrabPointerReq_time),B1/binary>> = B0,
  { #xGrabPointerReq{grabWindow=R_xGrabPointerReq_grabWindow, eventMask=R_xGrabPointerReq_eventMask, pointerMode=R_xGrabPointerReq_pointerMode, keyboardMode=R_xGrabPointerReq_keyboardMode, confineTo=R_xGrabPointerReq_confineTo, cursor=R_xGrabPointerReq_cursor, time=R_xGrabPointerReq_time }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabButtonReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabButtonReq,{
    grabWindow,
    eventMask,
    pointerMode,
    keyboardMode,
    confineTo,
    cursor,
    button,
    modifiers
}).

-define(xGrabButtonReq(GrabWindow,EventMask,PointerMode,KeyboardMode,ConfineTo,Cursor,Button,Pad,Modifiers),
    ?WINDOW(GrabWindow),
    ?CARD16(EventMask),
    ?BYTE(PointerMode),
    ?BYTE(KeyboardMode),
    ?WINDOW(ConfineTo),
    ?CURSOR(Cursor),
    ?CARD8(Button),
    ?BYTE(Pad),
    ?CARD16(Modifiers)).

-define(xGrabButtonReq_enc(R),
  << ?xGrabButtonReq(R#xGrabButtonReq.grabWindow,R#xGrabButtonReq.eventMask,R#xGrabButtonReq.pointerMode,R#xGrabButtonReq.keyboardMode,R#xGrabButtonReq.confineTo,R#xGrabButtonReq.cursor,R#xGrabButtonReq.button,0,R#xGrabButtonReq.modifiers)>>).

-define(xGrabButtonReq_dec(B0),
 begin <<?xGrabButtonReq(R_xGrabButtonReq_grabWindow, R_xGrabButtonReq_eventMask, R_xGrabButtonReq_pointerMode, R_xGrabButtonReq_keyboardMode, R_xGrabButtonReq_confineTo, R_xGrabButtonReq_cursor, R_xGrabButtonReq_button, _, R_xGrabButtonReq_modifiers),B1/binary>> = B0,
  { #xGrabButtonReq{grabWindow=R_xGrabButtonReq_grabWindow, eventMask=R_xGrabButtonReq_eventMask, pointerMode=R_xGrabButtonReq_pointerMode, keyboardMode=R_xGrabButtonReq_keyboardMode, confineTo=R_xGrabButtonReq_confineTo, cursor=R_xGrabButtonReq_cursor, button=R_xGrabButtonReq_button, modifiers=R_xGrabButtonReq_modifiers }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xUngrabButtonReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xUngrabButtonReq,{
    grabWindow,
    modifiers
}).

-define(xUngrabButtonReq(GrabWindow,Modifiers,Pad),
    ?WINDOW(GrabWindow),
    ?CARD16(Modifiers),
    ?CARD16(Pad)).

-define(xUngrabButtonReq_enc(R),
  << ?xUngrabButtonReq(R#xUngrabButtonReq.grabWindow,R#xUngrabButtonReq.modifiers,0)>>).

-define(xUngrabButtonReq_dec(B0),
 begin <<?xUngrabButtonReq(R_xUngrabButtonReq_grabWindow, R_xUngrabButtonReq_modifiers, _),B1/binary>> = B0,
  { #xUngrabButtonReq{grabWindow=R_xUngrabButtonReq_grabWindow, modifiers=R_xUngrabButtonReq_modifiers }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeActivePointerGrabReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeActivePointerGrabReq,{
    cursor,
    time,
    eventMask
}).

-define(xChangeActivePointerGrabReq(Cursor,Time,EventMask,Pad2),
    ?CURSOR(Cursor),
    ?TIME(Time),
    ?CARD16(EventMask),
    ?CARD16(Pad2)).

-define(xChangeActivePointerGrabReq_enc(R),
  << ?xChangeActivePointerGrabReq(R#xChangeActivePointerGrabReq.cursor,R#xChangeActivePointerGrabReq.time,R#xChangeActivePointerGrabReq.eventMask,0)>>).

-define(xChangeActivePointerGrabReq_dec(B0),
 begin <<?xChangeActivePointerGrabReq(R_xChangeActivePointerGrabReq_cursor, R_xChangeActivePointerGrabReq_time, R_xChangeActivePointerGrabReq_eventMask, _),B1/binary>> = B0,
  { #xChangeActivePointerGrabReq{cursor=R_xChangeActivePointerGrabReq_cursor, time=R_xChangeActivePointerGrabReq_time, eventMask=R_xChangeActivePointerGrabReq_eventMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabKeyboardReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabKeyboardReq,{
    grabWindow,
    time,
    pointerMode,
    keyboardMode
}).

-define(xGrabKeyboardReq(GrabWindow,Time,PointerMode,KeyboardMode,Pad),
    ?WINDOW(GrabWindow),
    ?TIME(Time),
    ?BYTE(PointerMode),
    ?BYTE(KeyboardMode),
    ?CARD16(Pad)).

-define(xGrabKeyboardReq_enc(R),
  << ?xGrabKeyboardReq(R#xGrabKeyboardReq.grabWindow,R#xGrabKeyboardReq.time,R#xGrabKeyboardReq.pointerMode,R#xGrabKeyboardReq.keyboardMode,0)>>).

-define(xGrabKeyboardReq_dec(B0),
 begin <<?xGrabKeyboardReq(R_xGrabKeyboardReq_grabWindow, R_xGrabKeyboardReq_time, R_xGrabKeyboardReq_pointerMode, R_xGrabKeyboardReq_keyboardMode, _),B1/binary>> = B0,
  { #xGrabKeyboardReq{grabWindow=R_xGrabKeyboardReq_grabWindow, time=R_xGrabKeyboardReq_time, pointerMode=R_xGrabKeyboardReq_pointerMode, keyboardMode=R_xGrabKeyboardReq_keyboardMode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGrabKeyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGrabKeyReq,{
    grabWindow,
    modifiers,
    key,
    pointerMode,
    keyboardMode
}).

-define(xGrabKeyReq(GrabWindow,Modifiers,Key,PointerMode,KeyboardMode,Pad1,Pad2,Pad3),
    ?WINDOW(GrabWindow),
    ?CARD16(Modifiers),
    ?CARD8(Key),
    ?BYTE(PointerMode),
    ?BYTE(KeyboardMode),
    ?BYTE(Pad1),
    ?BYTE(Pad2),
    ?BYTE(Pad3)).

-define(xGrabKeyReq_enc(R),
  << ?xGrabKeyReq(R#xGrabKeyReq.grabWindow,R#xGrabKeyReq.modifiers,R#xGrabKeyReq.key,R#xGrabKeyReq.pointerMode,R#xGrabKeyReq.keyboardMode,0,0,0)>>).

-define(xGrabKeyReq_dec(B0),
 begin <<?xGrabKeyReq(R_xGrabKeyReq_grabWindow, R_xGrabKeyReq_modifiers, R_xGrabKeyReq_key, R_xGrabKeyReq_pointerMode, R_xGrabKeyReq_keyboardMode, _, _, _),B1/binary>> = B0,
  { #xGrabKeyReq{grabWindow=R_xGrabKeyReq_grabWindow, modifiers=R_xGrabKeyReq_modifiers, key=R_xGrabKeyReq_key, pointerMode=R_xGrabKeyReq_pointerMode, keyboardMode=R_xGrabKeyReq_keyboardMode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xUngrabKeyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xUngrabKeyReq,{
    grabWindow,
    modifiers
}).

-define(xUngrabKeyReq(GrabWindow,Modifiers,Pad),
    ?WINDOW(GrabWindow),
    ?CARD16(Modifiers),
    ?CARD16(Pad)).

-define(xUngrabKeyReq_enc(R),
  << ?xUngrabKeyReq(R#xUngrabKeyReq.grabWindow,R#xUngrabKeyReq.modifiers,0)>>).

-define(xUngrabKeyReq_dec(B0),
 begin <<?xUngrabKeyReq(R_xUngrabKeyReq_grabWindow, R_xUngrabKeyReq_modifiers, _),B1/binary>> = B0,
  { #xUngrabKeyReq{grabWindow=R_xUngrabKeyReq_grabWindow, modifiers=R_xUngrabKeyReq_modifiers }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllowEventsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllowEventsReq,{
    time
}).

-define(xAllowEventsReq(Time),
    ?TIME(Time)).

-define(xAllowEventsReq_enc(R),
  << ?xAllowEventsReq(R#xAllowEventsReq.time)>>).

-define(xAllowEventsReq_dec(B0),
 begin <<?xAllowEventsReq(R_xAllowEventsReq_time),B1/binary>> = B0,
  { #xAllowEventsReq{time=R_xAllowEventsReq_time }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetMotionEventsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetMotionEventsReq,{
    window,
    start,
    stop
}).

-define(xGetMotionEventsReq(Window,Start,Stop),
    ?WINDOW(Window),
    ?TIME(Start),
    ?TIME(Stop)).

-define(xGetMotionEventsReq_enc(R),
  << ?xGetMotionEventsReq(R#xGetMotionEventsReq.window,R#xGetMotionEventsReq.start,R#xGetMotionEventsReq.stop)>>).

-define(xGetMotionEventsReq_dec(B0),
 begin <<?xGetMotionEventsReq(R_xGetMotionEventsReq_window, R_xGetMotionEventsReq_start, R_xGetMotionEventsReq_stop),B1/binary>> = B0,
  { #xGetMotionEventsReq{window=R_xGetMotionEventsReq_window, start=R_xGetMotionEventsReq_start, stop=R_xGetMotionEventsReq_stop }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xTranslateCoordsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xTranslateCoordsReq,{
    srcWid,
    dstWid,
    srcX,
    srcY
}).

-define(xTranslateCoordsReq(SrcWid,DstWid,SrcX,SrcY),
    ?WINDOW(SrcWid),
    ?WINDOW(DstWid),
    ?INT16(SrcX),
    ?INT16(SrcY)).

-define(xTranslateCoordsReq_enc(R),
  << ?xTranslateCoordsReq(R#xTranslateCoordsReq.srcWid,R#xTranslateCoordsReq.dstWid,R#xTranslateCoordsReq.srcX,R#xTranslateCoordsReq.srcY)>>).

-define(xTranslateCoordsReq_dec(B0),
 begin <<?xTranslateCoordsReq(R_xTranslateCoordsReq_srcWid, R_xTranslateCoordsReq_dstWid, R_xTranslateCoordsReq_srcX, R_xTranslateCoordsReq_srcY),B1/binary>> = B0,
  { #xTranslateCoordsReq{srcWid=R_xTranslateCoordsReq_srcWid, dstWid=R_xTranslateCoordsReq_dstWid, srcX=R_xTranslateCoordsReq_srcX, srcY=R_xTranslateCoordsReq_srcY }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xWarpPointerReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xWarpPointerReq,{
    srcWid,
    dstWid,
    srcX,
    srcY,
    srcWidth,
    srcHeight,
    dstX,
    dstY
}).

-define(xWarpPointerReq(SrcWid,DstWid,SrcX,SrcY,SrcWidth,SrcHeight,DstX,DstY),
    ?WINDOW(SrcWid),
    ?WINDOW(DstWid),
    ?INT16(SrcX),
    ?INT16(SrcY),
    ?CARD16(SrcWidth),
    ?CARD16(SrcHeight),
    ?INT16(DstX),
    ?INT16(DstY)).

-define(xWarpPointerReq_enc(R),
  << ?xWarpPointerReq(R#xWarpPointerReq.srcWid,R#xWarpPointerReq.dstWid,R#xWarpPointerReq.srcX,R#xWarpPointerReq.srcY,R#xWarpPointerReq.srcWidth,R#xWarpPointerReq.srcHeight,R#xWarpPointerReq.dstX,R#xWarpPointerReq.dstY)>>).

-define(xWarpPointerReq_dec(B0),
 begin <<?xWarpPointerReq(R_xWarpPointerReq_srcWid, R_xWarpPointerReq_dstWid, R_xWarpPointerReq_srcX, R_xWarpPointerReq_srcY, R_xWarpPointerReq_srcWidth, R_xWarpPointerReq_srcHeight, R_xWarpPointerReq_dstX, R_xWarpPointerReq_dstY),B1/binary>> = B0,
  { #xWarpPointerReq{srcWid=R_xWarpPointerReq_srcWid, dstWid=R_xWarpPointerReq_dstWid, srcX=R_xWarpPointerReq_srcX, srcY=R_xWarpPointerReq_srcY, srcWidth=R_xWarpPointerReq_srcWidth, srcHeight=R_xWarpPointerReq_srcHeight, dstX=R_xWarpPointerReq_dstX, dstY=R_xWarpPointerReq_dstY }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetInputFocusReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetInputFocusReq,{
    focus,
    time
}).

-define(xSetInputFocusReq(Focus,Time),
    ?WINDOW(Focus),
    ?TIME(Time)).

-define(xSetInputFocusReq_enc(R),
  << ?xSetInputFocusReq(R#xSetInputFocusReq.focus,R#xSetInputFocusReq.time)>>).

-define(xSetInputFocusReq_dec(B0),
 begin <<?xSetInputFocusReq(R_xSetInputFocusReq_focus, R_xSetInputFocusReq_time),B1/binary>> = B0,
  { #xSetInputFocusReq{focus=R_xSetInputFocusReq_focus, time=R_xSetInputFocusReq_time }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xOpenFontReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xOpenFontReq,{
    fid,
    nbytes
}).

-define(xOpenFontReq(Fid,Nbytes,Pad1,Pad2),
    ?FONT(Fid),
    ?CARD16(Nbytes),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xOpenFontReq_enc(R),
  << ?xOpenFontReq(R#xOpenFontReq.fid,R#xOpenFontReq.nbytes,0,0)>>).

-define(xOpenFontReq_dec(B0),
 begin <<?xOpenFontReq(R_xOpenFontReq_fid, R_xOpenFontReq_nbytes, _, _),B1/binary>> = B0,
  { #xOpenFontReq{fid=R_xOpenFontReq_fid, nbytes=R_xOpenFontReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryTextExtentsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryTextExtentsReq,{
    fid
}).

-define(xQueryTextExtentsReq(Fid),
    ?FONT(Fid)).

-define(xQueryTextExtentsReq_enc(R),
  << ?xQueryTextExtentsReq(R#xQueryTextExtentsReq.fid)>>).

-define(xQueryTextExtentsReq_dec(B0),
 begin <<?xQueryTextExtentsReq(R_xQueryTextExtentsReq_fid),B1/binary>> = B0,
  { #xQueryTextExtentsReq{fid=R_xQueryTextExtentsReq_fid }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListFontsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListFontsReq,{
    maxNames,
    nbytes
}).

-define(xListFontsReq(MaxNames,Nbytes),
    ?CARD16(MaxNames),
    ?CARD16(Nbytes)).

-define(xListFontsReq_enc(R),
  << ?xListFontsReq(R#xListFontsReq.maxNames,R#xListFontsReq.nbytes)>>).

-define(xListFontsReq_dec(B0),
 begin <<?xListFontsReq(R_xListFontsReq_maxNames, R_xListFontsReq_nbytes),B1/binary>> = B0,
  { #xListFontsReq{maxNames=R_xListFontsReq_maxNames, nbytes=R_xListFontsReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListFontsWithInfoReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListFontsWithInfoReq,{
    maxNames,
    nbytes
}).

-define(xListFontsWithInfoReq(MaxNames,Nbytes),
    ?short(MaxNames,unsigned,?ENDIAN),
    ?short(Nbytes,unsigned,?ENDIAN)).

-define(xListFontsWithInfoReq_enc(R),
  << ?xListFontsWithInfoReq(R#xListFontsWithInfoReq.maxNames,R#xListFontsWithInfoReq.nbytes)>>).

-define(xListFontsWithInfoReq_dec(B0),
 begin <<?xListFontsWithInfoReq(R_xListFontsWithInfoReq_maxNames, R_xListFontsWithInfoReq_nbytes),B1/binary>> = B0,
  { #xListFontsWithInfoReq{maxNames=R_xListFontsWithInfoReq_maxNames, nbytes=R_xListFontsWithInfoReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetFontPathReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetFontPathReq,{
    nFonts
}).

-define(xSetFontPathReq(NFonts,Pad1,Pad2),
    ?CARD16(NFonts),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xSetFontPathReq_enc(R),
  << ?xSetFontPathReq(R#xSetFontPathReq.nFonts,0,0)>>).

-define(xSetFontPathReq_dec(B0),
 begin <<?xSetFontPathReq(R_xSetFontPathReq_nFonts, _, _),B1/binary>> = B0,
  { #xSetFontPathReq{nFonts=R_xSetFontPathReq_nFonts }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreatePixmapReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreatePixmapReq,{
    pid,
    drawable,
    width,
    height
}).

-define(xCreatePixmapReq(Pid,Drawable,Width,Height),
    ?PIXMAP(Pid),
    ?DRAWABLE(Drawable),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xCreatePixmapReq_enc(R),
  << ?xCreatePixmapReq(R#xCreatePixmapReq.pid,R#xCreatePixmapReq.drawable,R#xCreatePixmapReq.width,R#xCreatePixmapReq.height)>>).

-define(xCreatePixmapReq_dec(B0),
 begin <<?xCreatePixmapReq(R_xCreatePixmapReq_pid, R_xCreatePixmapReq_drawable, R_xCreatePixmapReq_width, R_xCreatePixmapReq_height),B1/binary>> = B0,
  { #xCreatePixmapReq{pid=R_xCreatePixmapReq_pid, drawable=R_xCreatePixmapReq_drawable, width=R_xCreatePixmapReq_width, height=R_xCreatePixmapReq_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateGCReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateGCReq,{
    gc,
    drawable,
    mask
}).

-define(xCreateGCReq(Gc,Drawable,Mask),
    ?GCONTEXT(Gc),
    ?DRAWABLE(Drawable),
    ?CARD32(Mask)).

-define(xCreateGCReq_enc(R),
  << ?xCreateGCReq(R#xCreateGCReq.gc,R#xCreateGCReq.drawable,R#xCreateGCReq.mask)>>).

-define(xCreateGCReq_dec(B0),
 begin <<?xCreateGCReq(R_xCreateGCReq_gc, R_xCreateGCReq_drawable, R_xCreateGCReq_mask),B1/binary>> = B0,
  { #xCreateGCReq{gc=R_xCreateGCReq_gc, drawable=R_xCreateGCReq_drawable, mask=R_xCreateGCReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeGCReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeGCReq,{
    gc,
    mask
}).

-define(xChangeGCReq(Gc,Mask),
    ?GCONTEXT(Gc),
    ?CARD32(Mask)).

-define(xChangeGCReq_enc(R),
  << ?xChangeGCReq(R#xChangeGCReq.gc,R#xChangeGCReq.mask)>>).

-define(xChangeGCReq_dec(B0),
 begin <<?xChangeGCReq(R_xChangeGCReq_gc, R_xChangeGCReq_mask),B1/binary>> = B0,
  { #xChangeGCReq{gc=R_xChangeGCReq_gc, mask=R_xChangeGCReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCopyGCReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCopyGCReq,{
    srcGC,
    dstGC,
    mask
}).

-define(xCopyGCReq(SrcGC,DstGC,Mask),
    ?GCONTEXT(SrcGC),
    ?GCONTEXT(DstGC),
    ?CARD32(Mask)).

-define(xCopyGCReq_enc(R),
  << ?xCopyGCReq(R#xCopyGCReq.srcGC,R#xCopyGCReq.dstGC,R#xCopyGCReq.mask)>>).

-define(xCopyGCReq_dec(B0),
 begin <<?xCopyGCReq(R_xCopyGCReq_srcGC, R_xCopyGCReq_dstGC, R_xCopyGCReq_mask),B1/binary>> = B0,
  { #xCopyGCReq{srcGC=R_xCopyGCReq_srcGC, dstGC=R_xCopyGCReq_dstGC, mask=R_xCopyGCReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetDashesReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetDashesReq,{
    gc,
    dashOffset,
    nDashes
}).

-define(xSetDashesReq(Gc,DashOffset,NDashes),
    ?GCONTEXT(Gc),
    ?CARD16(DashOffset),
    ?CARD16(NDashes)).

-define(xSetDashesReq_enc(R),
  << ?xSetDashesReq(R#xSetDashesReq.gc,R#xSetDashesReq.dashOffset,R#xSetDashesReq.nDashes)>>).

-define(xSetDashesReq_dec(B0),
 begin <<?xSetDashesReq(R_xSetDashesReq_gc, R_xSetDashesReq_dashOffset, R_xSetDashesReq_nDashes),B1/binary>> = B0,
  { #xSetDashesReq{gc=R_xSetDashesReq_gc, dashOffset=R_xSetDashesReq_dashOffset, nDashes=R_xSetDashesReq_nDashes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetClipRectanglesReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetClipRectanglesReq,{
    gc,
    xOrigin,
    yOrigin
}).

-define(xSetClipRectanglesReq(Gc,XOrigin,YOrigin),
    ?GCONTEXT(Gc),
    ?INT16(XOrigin),
    ?INT16(YOrigin)).

-define(xSetClipRectanglesReq_enc(R),
  << ?xSetClipRectanglesReq(R#xSetClipRectanglesReq.gc,R#xSetClipRectanglesReq.xOrigin,R#xSetClipRectanglesReq.yOrigin)>>).

-define(xSetClipRectanglesReq_dec(B0),
 begin <<?xSetClipRectanglesReq(R_xSetClipRectanglesReq_gc, R_xSetClipRectanglesReq_xOrigin, R_xSetClipRectanglesReq_yOrigin),B1/binary>> = B0,
  { #xSetClipRectanglesReq{gc=R_xSetClipRectanglesReq_gc, xOrigin=R_xSetClipRectanglesReq_xOrigin, yOrigin=R_xSetClipRectanglesReq_yOrigin }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xClearAreaReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xClearAreaReq,{
    window,
    x,
    y,
    width,
    height
}).

-define(xClearAreaReq(Window,X,Y,Width,Height),
    ?WINDOW(Window),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xClearAreaReq_enc(R),
  << ?xClearAreaReq(R#xClearAreaReq.window,R#xClearAreaReq.x,R#xClearAreaReq.y,R#xClearAreaReq.width,R#xClearAreaReq.height)>>).

-define(xClearAreaReq_dec(B0),
 begin <<?xClearAreaReq(R_xClearAreaReq_window, R_xClearAreaReq_x, R_xClearAreaReq_y, R_xClearAreaReq_width, R_xClearAreaReq_height),B1/binary>> = B0,
  { #xClearAreaReq{window=R_xClearAreaReq_window, x=R_xClearAreaReq_x, y=R_xClearAreaReq_y, width=R_xClearAreaReq_width, height=R_xClearAreaReq_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCopyAreaReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCopyAreaReq,{
    srcDrawable,
    dstDrawable,
    gc,
    srcX,
    srcY,
    dstX,
    dstY,
    width,
    height
}).

-define(xCopyAreaReq(SrcDrawable,DstDrawable,Gc,SrcX,SrcY,DstX,DstY,Width,Height),
    ?DRAWABLE(SrcDrawable),
    ?DRAWABLE(DstDrawable),
    ?GCONTEXT(Gc),
    ?INT16(SrcX),
    ?INT16(SrcY),
    ?INT16(DstX),
    ?INT16(DstY),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xCopyAreaReq_enc(R),
  << ?xCopyAreaReq(R#xCopyAreaReq.srcDrawable,R#xCopyAreaReq.dstDrawable,R#xCopyAreaReq.gc,R#xCopyAreaReq.srcX,R#xCopyAreaReq.srcY,R#xCopyAreaReq.dstX,R#xCopyAreaReq.dstY,R#xCopyAreaReq.width,R#xCopyAreaReq.height)>>).

-define(xCopyAreaReq_dec(B0),
 begin <<?xCopyAreaReq(R_xCopyAreaReq_srcDrawable, R_xCopyAreaReq_dstDrawable, R_xCopyAreaReq_gc, R_xCopyAreaReq_srcX, R_xCopyAreaReq_srcY, R_xCopyAreaReq_dstX, R_xCopyAreaReq_dstY, R_xCopyAreaReq_width, R_xCopyAreaReq_height),B1/binary>> = B0,
  { #xCopyAreaReq{srcDrawable=R_xCopyAreaReq_srcDrawable, dstDrawable=R_xCopyAreaReq_dstDrawable, gc=R_xCopyAreaReq_gc, srcX=R_xCopyAreaReq_srcX, srcY=R_xCopyAreaReq_srcY, dstX=R_xCopyAreaReq_dstX, dstY=R_xCopyAreaReq_dstY, width=R_xCopyAreaReq_width, height=R_xCopyAreaReq_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCopyPlaneReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCopyPlaneReq,{
    srcDrawable,
    dstDrawable,
    gc,
    srcX,
    srcY,
    dstX,
    dstY,
    width,
    height,
    bitPlane
}).

-define(xCopyPlaneReq(SrcDrawable,DstDrawable,Gc,SrcX,SrcY,DstX,DstY,Width,Height,BitPlane),
    ?DRAWABLE(SrcDrawable),
    ?DRAWABLE(DstDrawable),
    ?GCONTEXT(Gc),
    ?INT16(SrcX),
    ?INT16(SrcY),
    ?INT16(DstX),
    ?INT16(DstY),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD32(BitPlane)).

-define(xCopyPlaneReq_enc(R),
  << ?xCopyPlaneReq(R#xCopyPlaneReq.srcDrawable,R#xCopyPlaneReq.dstDrawable,R#xCopyPlaneReq.gc,R#xCopyPlaneReq.srcX,R#xCopyPlaneReq.srcY,R#xCopyPlaneReq.dstX,R#xCopyPlaneReq.dstY,R#xCopyPlaneReq.width,R#xCopyPlaneReq.height,R#xCopyPlaneReq.bitPlane)>>).

-define(xCopyPlaneReq_dec(B0),
 begin <<?xCopyPlaneReq(R_xCopyPlaneReq_srcDrawable, R_xCopyPlaneReq_dstDrawable, R_xCopyPlaneReq_gc, R_xCopyPlaneReq_srcX, R_xCopyPlaneReq_srcY, R_xCopyPlaneReq_dstX, R_xCopyPlaneReq_dstY, R_xCopyPlaneReq_width, R_xCopyPlaneReq_height, R_xCopyPlaneReq_bitPlane),B1/binary>> = B0,
  { #xCopyPlaneReq{srcDrawable=R_xCopyPlaneReq_srcDrawable, dstDrawable=R_xCopyPlaneReq_dstDrawable, gc=R_xCopyPlaneReq_gc, srcX=R_xCopyPlaneReq_srcX, srcY=R_xCopyPlaneReq_srcY, dstX=R_xCopyPlaneReq_dstX, dstY=R_xCopyPlaneReq_dstY, width=R_xCopyPlaneReq_width, height=R_xCopyPlaneReq_height, bitPlane=R_xCopyPlaneReq_bitPlane }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyPointReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyPointReq,{
    drawable,
    gc
}).

-define(xPolyPointReq(Drawable,Gc),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc)).

-define(xPolyPointReq_enc(R),
  << ?xPolyPointReq(R#xPolyPointReq.drawable,R#xPolyPointReq.gc)>>).

-define(xPolyPointReq_dec(B0),
 begin <<?xPolyPointReq(R_xPolyPointReq_drawable, R_xPolyPointReq_gc),B1/binary>> = B0,
  { #xPolyPointReq{drawable=R_xPolyPointReq_drawable, gc=R_xPolyPointReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyLineReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyLineReq,{
    drawable,
    gc
}).

-define(xPolyLineReq(Drawable,Gc),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN)).

-define(xPolyLineReq_enc(R),
  << ?xPolyLineReq(R#xPolyLineReq.drawable,R#xPolyLineReq.gc)>>).

-define(xPolyLineReq_dec(B0),
 begin <<?xPolyLineReq(R_xPolyLineReq_drawable, R_xPolyLineReq_gc),B1/binary>> = B0,
  { #xPolyLineReq{drawable=R_xPolyLineReq_drawable, gc=R_xPolyLineReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolySegmentReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolySegmentReq,{
    drawable,
    gc
}).

-define(xPolySegmentReq(Drawable,Gc),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc)).

-define(xPolySegmentReq_enc(R),
  << ?xPolySegmentReq(R#xPolySegmentReq.drawable,R#xPolySegmentReq.gc)>>).

-define(xPolySegmentReq_dec(B0),
 begin <<?xPolySegmentReq(R_xPolySegmentReq_drawable, R_xPolySegmentReq_gc),B1/binary>> = B0,
  { #xPolySegmentReq{drawable=R_xPolySegmentReq_drawable, gc=R_xPolySegmentReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyArcReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyArcReq,{
    drawable,
    gc
}).

-define(xPolyArcReq(Drawable,Gc),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN)).

-define(xPolyArcReq_enc(R),
  << ?xPolyArcReq(R#xPolyArcReq.drawable,R#xPolyArcReq.gc)>>).

-define(xPolyArcReq_dec(B0),
 begin <<?xPolyArcReq(R_xPolyArcReq_drawable, R_xPolyArcReq_gc),B1/binary>> = B0,
  { #xPolyArcReq{drawable=R_xPolyArcReq_drawable, gc=R_xPolyArcReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyRectangleReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyRectangleReq,{
    drawable,
    gc
}).

-define(xPolyRectangleReq(Drawable,Gc),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN)).

-define(xPolyRectangleReq_enc(R),
  << ?xPolyRectangleReq(R#xPolyRectangleReq.drawable,R#xPolyRectangleReq.gc)>>).

-define(xPolyRectangleReq_dec(B0),
 begin <<?xPolyRectangleReq(R_xPolyRectangleReq_drawable, R_xPolyRectangleReq_gc),B1/binary>> = B0,
  { #xPolyRectangleReq{drawable=R_xPolyRectangleReq_drawable, gc=R_xPolyRectangleReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyFillRectangleReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyFillRectangleReq,{
    drawable,
    gc
}).

-define(xPolyFillRectangleReq(Drawable,Gc),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN)).

-define(xPolyFillRectangleReq_enc(R),
  << ?xPolyFillRectangleReq(R#xPolyFillRectangleReq.drawable,R#xPolyFillRectangleReq.gc)>>).

-define(xPolyFillRectangleReq_dec(B0),
 begin <<?xPolyFillRectangleReq(R_xPolyFillRectangleReq_drawable, R_xPolyFillRectangleReq_gc),B1/binary>> = B0,
  { #xPolyFillRectangleReq{drawable=R_xPolyFillRectangleReq_drawable, gc=R_xPolyFillRectangleReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyFillArcReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyFillArcReq,{
    drawable,
    gc
}).

-define(xPolyFillArcReq(Drawable,Gc),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN)).

-define(xPolyFillArcReq_enc(R),
  << ?xPolyFillArcReq(R#xPolyFillArcReq.drawable,R#xPolyFillArcReq.gc)>>).

-define(xPolyFillArcReq_dec(B0),
 begin <<?xPolyFillArcReq(R_xPolyFillArcReq_drawable, R_xPolyFillArcReq_gc),B1/binary>> = B0,
  { #xPolyFillArcReq{drawable=R_xPolyFillArcReq_drawable, gc=R_xPolyFillArcReq_gc }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFillPolyReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFillPolyReq,{
    drawable,
    gc,
    shape,
    coordMode
}).

-define(xFillPolyReq(Drawable,Gc,Shape,CoordMode,Pad1),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc),
    ?BYTE(Shape),
    ?BYTE(CoordMode),
    ?CARD16(Pad1)).

-define(xFillPolyReq_enc(R),
  << ?xFillPolyReq(R#xFillPolyReq.drawable,R#xFillPolyReq.gc,R#xFillPolyReq.shape,R#xFillPolyReq.coordMode,0)>>).

-define(xFillPolyReq_dec(B0),
 begin <<?xFillPolyReq(R_xFillPolyReq_drawable, R_xFillPolyReq_gc, R_xFillPolyReq_shape, R_xFillPolyReq_coordMode, _),B1/binary>> = B0,
  { #xFillPolyReq{drawable=R_xFillPolyReq_drawable, gc=R_xFillPolyReq_gc, shape=R_xFillPolyReq_shape, coordMode=R_xFillPolyReq_coordMode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPutImageReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPutImageReq,{
    drawable,
    gc,
    width,
    height,
    dstX,
    dstY,
    leftPad,
    depth
}).

-define(xPutImageReq(Drawable,Gc,Width,Height,DstX,DstY,LeftPad,Depth,Pad),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc),
    ?CARD16(Width),
    ?CARD16(Height),
    ?INT16(DstX),
    ?INT16(DstY),
    ?CARD8(LeftPad),
    ?CARD8(Depth),
    ?CARD16(Pad)).

-define(xPutImageReq_enc(R),
  << ?xPutImageReq(R#xPutImageReq.drawable,R#xPutImageReq.gc,R#xPutImageReq.width,R#xPutImageReq.height,R#xPutImageReq.dstX,R#xPutImageReq.dstY,R#xPutImageReq.leftPad,R#xPutImageReq.depth,0)>>).

-define(xPutImageReq_dec(B0),
 begin <<?xPutImageReq(R_xPutImageReq_drawable, R_xPutImageReq_gc, R_xPutImageReq_width, R_xPutImageReq_height, R_xPutImageReq_dstX, R_xPutImageReq_dstY, R_xPutImageReq_leftPad, R_xPutImageReq_depth, _),B1/binary>> = B0,
  { #xPutImageReq{drawable=R_xPutImageReq_drawable, gc=R_xPutImageReq_gc, width=R_xPutImageReq_width, height=R_xPutImageReq_height, dstX=R_xPutImageReq_dstX, dstY=R_xPutImageReq_dstY, leftPad=R_xPutImageReq_leftPad, depth=R_xPutImageReq_depth }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetImageReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetImageReq,{
    drawable,
    x,
    y,
    width,
    height,
    planeMask
}).

-define(xGetImageReq(Drawable,X,Y,Width,Height,PlaneMask),
    ?DRAWABLE(Drawable),
    ?INT16(X),
    ?INT16(Y),
    ?CARD16(Width),
    ?CARD16(Height),
    ?CARD32(PlaneMask)).

-define(xGetImageReq_enc(R),
  << ?xGetImageReq(R#xGetImageReq.drawable,R#xGetImageReq.x,R#xGetImageReq.y,R#xGetImageReq.width,R#xGetImageReq.height,R#xGetImageReq.planeMask)>>).

-define(xGetImageReq_dec(B0),
 begin <<?xGetImageReq(R_xGetImageReq_drawable, R_xGetImageReq_x, R_xGetImageReq_y, R_xGetImageReq_width, R_xGetImageReq_height, R_xGetImageReq_planeMask),B1/binary>> = B0,
  { #xGetImageReq{drawable=R_xGetImageReq_drawable, x=R_xGetImageReq_x, y=R_xGetImageReq_y, width=R_xGetImageReq_width, height=R_xGetImageReq_height, planeMask=R_xGetImageReq_planeMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyTextReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyTextReq,{
    drawable,
    gc,
    x,
    y
}).

-define(xPolyTextReq(Drawable,Gc,X,Y),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc),
    ?INT16(X),
    ?INT16(Y)).

-define(xPolyTextReq_enc(R),
  << ?xPolyTextReq(R#xPolyTextReq.drawable,R#xPolyTextReq.gc,R#xPolyTextReq.x,R#xPolyTextReq.y)>>).

-define(xPolyTextReq_dec(B0),
 begin <<?xPolyTextReq(R_xPolyTextReq_drawable, R_xPolyTextReq_gc, R_xPolyTextReq_x, R_xPolyTextReq_y),B1/binary>> = B0,
  { #xPolyTextReq{drawable=R_xPolyTextReq_drawable, gc=R_xPolyTextReq_gc, x=R_xPolyTextReq_x, y=R_xPolyTextReq_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyText8Req
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyText8Req,{
    drawable,
    gc,
    x,
    y
}).

-define(xPolyText8Req(Drawable,Gc,X,Y),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN),
    ?short(X,signed,?ENDIAN),
    ?short(Y,signed,?ENDIAN)).

-define(xPolyText8Req_enc(R),
  << ?xPolyText8Req(R#xPolyText8Req.drawable,R#xPolyText8Req.gc,R#xPolyText8Req.x,R#xPolyText8Req.y)>>).

-define(xPolyText8Req_dec(B0),
 begin <<?xPolyText8Req(R_xPolyText8Req_drawable, R_xPolyText8Req_gc, R_xPolyText8Req_x, R_xPolyText8Req_y),B1/binary>> = B0,
  { #xPolyText8Req{drawable=R_xPolyText8Req_drawable, gc=R_xPolyText8Req_gc, x=R_xPolyText8Req_x, y=R_xPolyText8Req_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xPolyText16Req
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xPolyText16Req,{
    drawable,
    gc,
    x,
    y
}).

-define(xPolyText16Req(Drawable,Gc,X,Y),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN),
    ?short(X,signed,?ENDIAN),
    ?short(Y,signed,?ENDIAN)).

-define(xPolyText16Req_enc(R),
  << ?xPolyText16Req(R#xPolyText16Req.drawable,R#xPolyText16Req.gc,R#xPolyText16Req.x,R#xPolyText16Req.y)>>).

-define(xPolyText16Req_dec(B0),
 begin <<?xPolyText16Req(R_xPolyText16Req_drawable, R_xPolyText16Req_gc, R_xPolyText16Req_x, R_xPolyText16Req_y),B1/binary>> = B0,
  { #xPolyText16Req{drawable=R_xPolyText16Req_drawable, gc=R_xPolyText16Req_gc, x=R_xPolyText16Req_x, y=R_xPolyText16Req_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xImageTextReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xImageTextReq,{
    drawable,
    gc,
    x,
    y
}).

-define(xImageTextReq(Drawable,Gc,X,Y),
    ?DRAWABLE(Drawable),
    ?GCONTEXT(Gc),
    ?INT16(X),
    ?INT16(Y)).

-define(xImageTextReq_enc(R),
  << ?xImageTextReq(R#xImageTextReq.drawable,R#xImageTextReq.gc,R#xImageTextReq.x,R#xImageTextReq.y)>>).

-define(xImageTextReq_dec(B0),
 begin <<?xImageTextReq(R_xImageTextReq_drawable, R_xImageTextReq_gc, R_xImageTextReq_x, R_xImageTextReq_y),B1/binary>> = B0,
  { #xImageTextReq{drawable=R_xImageTextReq_drawable, gc=R_xImageTextReq_gc, x=R_xImageTextReq_x, y=R_xImageTextReq_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xImageText8Req
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xImageText8Req,{
    drawable,
    gc,
    x,
    y
}).

-define(xImageText8Req(Drawable,Gc,X,Y),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN),
    ?short(X,signed,?ENDIAN),
    ?short(Y,signed,?ENDIAN)).

-define(xImageText8Req_enc(R),
  << ?xImageText8Req(R#xImageText8Req.drawable,R#xImageText8Req.gc,R#xImageText8Req.x,R#xImageText8Req.y)>>).

-define(xImageText8Req_dec(B0),
 begin <<?xImageText8Req(R_xImageText8Req_drawable, R_xImageText8Req_gc, R_xImageText8Req_x, R_xImageText8Req_y),B1/binary>> = B0,
  { #xImageText8Req{drawable=R_xImageText8Req_drawable, gc=R_xImageText8Req_gc, x=R_xImageText8Req_x, y=R_xImageText8Req_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xImageText16Req
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xImageText16Req,{
    drawable,
    gc,
    x,
    y
}).

-define(xImageText16Req(Drawable,Gc,X,Y),
    ?long(Drawable,unsigned,?ENDIAN),
    ?long(Gc,unsigned,?ENDIAN),
    ?short(X,signed,?ENDIAN),
    ?short(Y,signed,?ENDIAN)).

-define(xImageText16Req_enc(R),
  << ?xImageText16Req(R#xImageText16Req.drawable,R#xImageText16Req.gc,R#xImageText16Req.x,R#xImageText16Req.y)>>).

-define(xImageText16Req_dec(B0),
 begin <<?xImageText16Req(R_xImageText16Req_drawable, R_xImageText16Req_gc, R_xImageText16Req_x, R_xImageText16Req_y),B1/binary>> = B0,
  { #xImageText16Req{drawable=R_xImageText16Req_drawable, gc=R_xImageText16Req_gc, x=R_xImageText16Req_x, y=R_xImageText16Req_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateColormapReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateColormapReq,{
    mid,
    window,
    visual
}).

-define(xCreateColormapReq(Mid,Window,Visual),
    ?COLORMAP(Mid),
    ?WINDOW(Window),
    ?VISUALID(Visual)).

-define(xCreateColormapReq_enc(R),
  << ?xCreateColormapReq(R#xCreateColormapReq.mid,R#xCreateColormapReq.window,R#xCreateColormapReq.visual)>>).

-define(xCreateColormapReq_dec(B0),
 begin <<?xCreateColormapReq(R_xCreateColormapReq_mid, R_xCreateColormapReq_window, R_xCreateColormapReq_visual),B1/binary>> = B0,
  { #xCreateColormapReq{mid=R_xCreateColormapReq_mid, window=R_xCreateColormapReq_window, visual=R_xCreateColormapReq_visual }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCopyColormapAndFreeReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCopyColormapAndFreeReq,{
    mid,
    srcCmap
}).

-define(xCopyColormapAndFreeReq(Mid,SrcCmap),
    ?COLORMAP(Mid),
    ?COLORMAP(SrcCmap)).

-define(xCopyColormapAndFreeReq_enc(R),
  << ?xCopyColormapAndFreeReq(R#xCopyColormapAndFreeReq.mid,R#xCopyColormapAndFreeReq.srcCmap)>>).

-define(xCopyColormapAndFreeReq_dec(B0),
 begin <<?xCopyColormapAndFreeReq(R_xCopyColormapAndFreeReq_mid, R_xCopyColormapAndFreeReq_srcCmap),B1/binary>> = B0,
  { #xCopyColormapAndFreeReq{mid=R_xCopyColormapAndFreeReq_mid, srcCmap=R_xCopyColormapAndFreeReq_srcCmap }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorReq,{
    cmap,
    red,
    green,
    blue
}).

-define(xAllocColorReq(Cmap,Red,Green,Blue,Pad2),
    ?COLORMAP(Cmap),
    ?CARD16(Red),
    ?CARD16(Green),
    ?CARD16(Blue),
    ?CARD16(Pad2)).

-define(xAllocColorReq_enc(R),
  << ?xAllocColorReq(R#xAllocColorReq.cmap,R#xAllocColorReq.red,R#xAllocColorReq.green,R#xAllocColorReq.blue,0)>>).

-define(xAllocColorReq_dec(B0),
 begin <<?xAllocColorReq(R_xAllocColorReq_cmap, R_xAllocColorReq_red, R_xAllocColorReq_green, R_xAllocColorReq_blue, _),B1/binary>> = B0,
  { #xAllocColorReq{cmap=R_xAllocColorReq_cmap, red=R_xAllocColorReq_red, green=R_xAllocColorReq_green, blue=R_xAllocColorReq_blue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocNamedColorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocNamedColorReq,{
    cmap,
    nbytes
}).

-define(xAllocNamedColorReq(Cmap,Nbytes,Pad1,Pad2),
    ?COLORMAP(Cmap),
    ?CARD16(Nbytes),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xAllocNamedColorReq_enc(R),
  << ?xAllocNamedColorReq(R#xAllocNamedColorReq.cmap,R#xAllocNamedColorReq.nbytes,0,0)>>).

-define(xAllocNamedColorReq_dec(B0),
 begin <<?xAllocNamedColorReq(R_xAllocNamedColorReq_cmap, R_xAllocNamedColorReq_nbytes, _, _),B1/binary>> = B0,
  { #xAllocNamedColorReq{cmap=R_xAllocNamedColorReq_cmap, nbytes=R_xAllocNamedColorReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorCellsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorCellsReq,{
    cmap,
    colors,
    planes
}).

-define(xAllocColorCellsReq(Cmap,Colors,Planes),
    ?COLORMAP(Cmap),
    ?CARD16(Colors),
    ?CARD16(Planes)).

-define(xAllocColorCellsReq_enc(R),
  << ?xAllocColorCellsReq(R#xAllocColorCellsReq.cmap,R#xAllocColorCellsReq.colors,R#xAllocColorCellsReq.planes)>>).

-define(xAllocColorCellsReq_dec(B0),
 begin <<?xAllocColorCellsReq(R_xAllocColorCellsReq_cmap, R_xAllocColorCellsReq_colors, R_xAllocColorCellsReq_planes),B1/binary>> = B0,
  { #xAllocColorCellsReq{cmap=R_xAllocColorCellsReq_cmap, colors=R_xAllocColorCellsReq_colors, planes=R_xAllocColorCellsReq_planes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xAllocColorPlanesReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xAllocColorPlanesReq,{
    cmap,
    colors,
    red,
    green,
    blue
}).

-define(xAllocColorPlanesReq(Cmap,Colors,Red,Green,Blue),
    ?COLORMAP(Cmap),
    ?CARD16(Colors),
    ?CARD16(Red),
    ?CARD16(Green),
    ?CARD16(Blue)).

-define(xAllocColorPlanesReq_enc(R),
  << ?xAllocColorPlanesReq(R#xAllocColorPlanesReq.cmap,R#xAllocColorPlanesReq.colors,R#xAllocColorPlanesReq.red,R#xAllocColorPlanesReq.green,R#xAllocColorPlanesReq.blue)>>).

-define(xAllocColorPlanesReq_dec(B0),
 begin <<?xAllocColorPlanesReq(R_xAllocColorPlanesReq_cmap, R_xAllocColorPlanesReq_colors, R_xAllocColorPlanesReq_red, R_xAllocColorPlanesReq_green, R_xAllocColorPlanesReq_blue),B1/binary>> = B0,
  { #xAllocColorPlanesReq{cmap=R_xAllocColorPlanesReq_cmap, colors=R_xAllocColorPlanesReq_colors, red=R_xAllocColorPlanesReq_red, green=R_xAllocColorPlanesReq_green, blue=R_xAllocColorPlanesReq_blue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xFreeColorsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xFreeColorsReq,{
    cmap,
    planeMask
}).

-define(xFreeColorsReq(Cmap,PlaneMask),
    ?COLORMAP(Cmap),
    ?CARD32(PlaneMask)).

-define(xFreeColorsReq_enc(R),
  << ?xFreeColorsReq(R#xFreeColorsReq.cmap,R#xFreeColorsReq.planeMask)>>).

-define(xFreeColorsReq_dec(B0),
 begin <<?xFreeColorsReq(R_xFreeColorsReq_cmap, R_xFreeColorsReq_planeMask),B1/binary>> = B0,
  { #xFreeColorsReq{cmap=R_xFreeColorsReq_cmap, planeMask=R_xFreeColorsReq_planeMask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xStoreColorsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xStoreColorsReq,{
    cmap
}).

-define(xStoreColorsReq(Cmap),
    ?COLORMAP(Cmap)).

-define(xStoreColorsReq_enc(R),
  << ?xStoreColorsReq(R#xStoreColorsReq.cmap)>>).

-define(xStoreColorsReq_dec(B0),
 begin <<?xStoreColorsReq(R_xStoreColorsReq_cmap),B1/binary>> = B0,
  { #xStoreColorsReq{cmap=R_xStoreColorsReq_cmap }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xStoreNamedColorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xStoreNamedColorReq,{
    cmap,
    pixel,
    nbytes
}).

-define(xStoreNamedColorReq(Cmap,Pixel,Nbytes,Pad1,Pad2),
    ?COLORMAP(Cmap),
    ?CARD32(Pixel),
    ?CARD16(Nbytes),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xStoreNamedColorReq_enc(R),
  << ?xStoreNamedColorReq(R#xStoreNamedColorReq.cmap,R#xStoreNamedColorReq.pixel,R#xStoreNamedColorReq.nbytes,0,0)>>).

-define(xStoreNamedColorReq_dec(B0),
 begin <<?xStoreNamedColorReq(R_xStoreNamedColorReq_cmap, R_xStoreNamedColorReq_pixel, R_xStoreNamedColorReq_nbytes, _, _),B1/binary>> = B0,
  { #xStoreNamedColorReq{cmap=R_xStoreNamedColorReq_cmap, pixel=R_xStoreNamedColorReq_pixel, nbytes=R_xStoreNamedColorReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryColorsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryColorsReq,{
    cmap
}).

-define(xQueryColorsReq(Cmap),
    ?COLORMAP(Cmap)).

-define(xQueryColorsReq_enc(R),
  << ?xQueryColorsReq(R#xQueryColorsReq.cmap)>>).

-define(xQueryColorsReq_dec(B0),
 begin <<?xQueryColorsReq(R_xQueryColorsReq_cmap),B1/binary>> = B0,
  { #xQueryColorsReq{cmap=R_xQueryColorsReq_cmap }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xLookupColorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xLookupColorReq,{
    cmap,
    nbytes
}).

-define(xLookupColorReq(Cmap,Nbytes,Pad1,Pad2),
    ?COLORMAP(Cmap),
    ?CARD16(Nbytes),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xLookupColorReq_enc(R),
  << ?xLookupColorReq(R#xLookupColorReq.cmap,R#xLookupColorReq.nbytes,0,0)>>).

-define(xLookupColorReq_dec(B0),
 begin <<?xLookupColorReq(R_xLookupColorReq_cmap, R_xLookupColorReq_nbytes, _, _),B1/binary>> = B0,
  { #xLookupColorReq{cmap=R_xLookupColorReq_cmap, nbytes=R_xLookupColorReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateCursorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateCursorReq,{
    cid,
    source,
    mask,
    foreRed,
    foreGreen,
    foreBlue,
    backRed,
    backGreen,
    backBlue,
    x,
    y
}).

-define(xCreateCursorReq(Cid,Source,Mask,ForeRed,ForeGreen,ForeBlue,BackRed,BackGreen,BackBlue,X,Y),
    ?CURSOR(Cid),
    ?PIXMAP(Source),
    ?PIXMAP(Mask),
    ?CARD16(ForeRed),
    ?CARD16(ForeGreen),
    ?CARD16(ForeBlue),
    ?CARD16(BackRed),
    ?CARD16(BackGreen),
    ?CARD16(BackBlue),
    ?CARD16(X),
    ?CARD16(Y)).

-define(xCreateCursorReq_enc(R),
  << ?xCreateCursorReq(R#xCreateCursorReq.cid,R#xCreateCursorReq.source,R#xCreateCursorReq.mask,R#xCreateCursorReq.foreRed,R#xCreateCursorReq.foreGreen,R#xCreateCursorReq.foreBlue,R#xCreateCursorReq.backRed,R#xCreateCursorReq.backGreen,R#xCreateCursorReq.backBlue,R#xCreateCursorReq.x,R#xCreateCursorReq.y)>>).

-define(xCreateCursorReq_dec(B0),
 begin <<?xCreateCursorReq(R_xCreateCursorReq_cid, R_xCreateCursorReq_source, R_xCreateCursorReq_mask, R_xCreateCursorReq_foreRed, R_xCreateCursorReq_foreGreen, R_xCreateCursorReq_foreBlue, R_xCreateCursorReq_backRed, R_xCreateCursorReq_backGreen, R_xCreateCursorReq_backBlue, R_xCreateCursorReq_x, R_xCreateCursorReq_y),B1/binary>> = B0,
  { #xCreateCursorReq{cid=R_xCreateCursorReq_cid, source=R_xCreateCursorReq_source, mask=R_xCreateCursorReq_mask, foreRed=R_xCreateCursorReq_foreRed, foreGreen=R_xCreateCursorReq_foreGreen, foreBlue=R_xCreateCursorReq_foreBlue, backRed=R_xCreateCursorReq_backRed, backGreen=R_xCreateCursorReq_backGreen, backBlue=R_xCreateCursorReq_backBlue, x=R_xCreateCursorReq_x, y=R_xCreateCursorReq_y }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xCreateGlyphCursorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xCreateGlyphCursorReq,{
    cid,
    source,
    mask,
    sourceChar,
    maskChar,
    foreRed,
    foreGreen,
    foreBlue,
    backRed,
    backGreen,
    backBlue
}).

-define(xCreateGlyphCursorReq(Cid,Source,Mask,SourceChar,MaskChar,ForeRed,ForeGreen,ForeBlue,BackRed,BackGreen,BackBlue),
    ?CURSOR(Cid),
    ?FONT(Source),
    ?FONT(Mask),
    ?CARD16(SourceChar),
    ?CARD16(MaskChar),
    ?CARD16(ForeRed),
    ?CARD16(ForeGreen),
    ?CARD16(ForeBlue),
    ?CARD16(BackRed),
    ?CARD16(BackGreen),
    ?CARD16(BackBlue)).

-define(xCreateGlyphCursorReq_enc(R),
  << ?xCreateGlyphCursorReq(R#xCreateGlyphCursorReq.cid,R#xCreateGlyphCursorReq.source,R#xCreateGlyphCursorReq.mask,R#xCreateGlyphCursorReq.sourceChar,R#xCreateGlyphCursorReq.maskChar,R#xCreateGlyphCursorReq.foreRed,R#xCreateGlyphCursorReq.foreGreen,R#xCreateGlyphCursorReq.foreBlue,R#xCreateGlyphCursorReq.backRed,R#xCreateGlyphCursorReq.backGreen,R#xCreateGlyphCursorReq.backBlue)>>).

-define(xCreateGlyphCursorReq_dec(B0),
 begin <<?xCreateGlyphCursorReq(R_xCreateGlyphCursorReq_cid, R_xCreateGlyphCursorReq_source, R_xCreateGlyphCursorReq_mask, R_xCreateGlyphCursorReq_sourceChar, R_xCreateGlyphCursorReq_maskChar, R_xCreateGlyphCursorReq_foreRed, R_xCreateGlyphCursorReq_foreGreen, R_xCreateGlyphCursorReq_foreBlue, R_xCreateGlyphCursorReq_backRed, R_xCreateGlyphCursorReq_backGreen, R_xCreateGlyphCursorReq_backBlue),B1/binary>> = B0,
  { #xCreateGlyphCursorReq{cid=R_xCreateGlyphCursorReq_cid, source=R_xCreateGlyphCursorReq_source, mask=R_xCreateGlyphCursorReq_mask, sourceChar=R_xCreateGlyphCursorReq_sourceChar, maskChar=R_xCreateGlyphCursorReq_maskChar, foreRed=R_xCreateGlyphCursorReq_foreRed, foreGreen=R_xCreateGlyphCursorReq_foreGreen, foreBlue=R_xCreateGlyphCursorReq_foreBlue, backRed=R_xCreateGlyphCursorReq_backRed, backGreen=R_xCreateGlyphCursorReq_backGreen, backBlue=R_xCreateGlyphCursorReq_backBlue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xRecolorCursorReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xRecolorCursorReq,{
    cursor,
    foreRed,
    foreGreen,
    foreBlue,
    backRed,
    backGreen,
    backBlue
}).

-define(xRecolorCursorReq(Cursor,ForeRed,ForeGreen,ForeBlue,BackRed,BackGreen,BackBlue),
    ?CURSOR(Cursor),
    ?CARD16(ForeRed),
    ?CARD16(ForeGreen),
    ?CARD16(ForeBlue),
    ?CARD16(BackRed),
    ?CARD16(BackGreen),
    ?CARD16(BackBlue)).

-define(xRecolorCursorReq_enc(R),
  << ?xRecolorCursorReq(R#xRecolorCursorReq.cursor,R#xRecolorCursorReq.foreRed,R#xRecolorCursorReq.foreGreen,R#xRecolorCursorReq.foreBlue,R#xRecolorCursorReq.backRed,R#xRecolorCursorReq.backGreen,R#xRecolorCursorReq.backBlue)>>).

-define(xRecolorCursorReq_dec(B0),
 begin <<?xRecolorCursorReq(R_xRecolorCursorReq_cursor, R_xRecolorCursorReq_foreRed, R_xRecolorCursorReq_foreGreen, R_xRecolorCursorReq_foreBlue, R_xRecolorCursorReq_backRed, R_xRecolorCursorReq_backGreen, R_xRecolorCursorReq_backBlue),B1/binary>> = B0,
  { #xRecolorCursorReq{cursor=R_xRecolorCursorReq_cursor, foreRed=R_xRecolorCursorReq_foreRed, foreGreen=R_xRecolorCursorReq_foreGreen, foreBlue=R_xRecolorCursorReq_foreBlue, backRed=R_xRecolorCursorReq_backRed, backGreen=R_xRecolorCursorReq_backGreen, backBlue=R_xRecolorCursorReq_backBlue }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryBestSizeReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryBestSizeReq,{
    drawable,
    width,
    height
}).

-define(xQueryBestSizeReq(Drawable,Width,Height),
    ?DRAWABLE(Drawable),
    ?CARD16(Width),
    ?CARD16(Height)).

-define(xQueryBestSizeReq_enc(R),
  << ?xQueryBestSizeReq(R#xQueryBestSizeReq.drawable,R#xQueryBestSizeReq.width,R#xQueryBestSizeReq.height)>>).

-define(xQueryBestSizeReq_dec(B0),
 begin <<?xQueryBestSizeReq(R_xQueryBestSizeReq_drawable, R_xQueryBestSizeReq_width, R_xQueryBestSizeReq_height),B1/binary>> = B0,
  { #xQueryBestSizeReq{drawable=R_xQueryBestSizeReq_drawable, width=R_xQueryBestSizeReq_width, height=R_xQueryBestSizeReq_height }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xQueryExtensionReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xQueryExtensionReq,{
    nbytes
}).

-define(xQueryExtensionReq(Nbytes,Pad1,Pad2),
    ?CARD16(Nbytes),
    ?BYTE(Pad1),
    ?BYTE(Pad2)).

-define(xQueryExtensionReq_enc(R),
  << ?xQueryExtensionReq(R#xQueryExtensionReq.nbytes,0,0)>>).

-define(xQueryExtensionReq_dec(B0),
 begin <<?xQueryExtensionReq(R_xQueryExtensionReq_nbytes, _, _),B1/binary>> = B0,
  { #xQueryExtensionReq{nbytes=R_xQueryExtensionReq_nbytes }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetModifierMappingReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetModifierMappingReq,{
}).

-define(xSetModifierMappingReq(),
).

-define(xSetModifierMappingReq_enc(R),
  << ?xSetModifierMappingReq()>>).

-define(xSetModifierMappingReq_dec(B0),
 begin <<?xSetModifierMappingReq(),B1/binary>> = B0,
  { #xSetModifierMappingReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetPointerMappingReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetPointerMappingReq,{
    reqType,
    nElts,
    length
}).

-define(xSetPointerMappingReq(ReqType,NElts,Length),
    ?CARD8(ReqType),
    ?CARD8(NElts),
    ?CARD16(Length)).

-define(xSetPointerMappingReq_enc(R),
  << ?xSetPointerMappingReq(R#xSetPointerMappingReq.reqType,R#xSetPointerMappingReq.nElts,R#xSetPointerMappingReq.length)>>).

-define(xSetPointerMappingReq_dec(B0),
 begin <<?xSetPointerMappingReq(R_xSetPointerMappingReq_reqType, R_xSetPointerMappingReq_nElts, R_xSetPointerMappingReq_length),B1/binary>> = B0,
  { #xSetPointerMappingReq{reqType=R_xSetPointerMappingReq_reqType, nElts=R_xSetPointerMappingReq_nElts, length=R_xSetPointerMappingReq_length }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xGetKeyboardMappingReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xGetKeyboardMappingReq,{
    firstKeyCode,
    count
}).

-define(xGetKeyboardMappingReq(FirstKeyCode,Count,Pad1),
    ?KEYCODE(FirstKeyCode),
    ?CARD8(Count),
    ?CARD16(Pad1)).

-define(xGetKeyboardMappingReq_enc(R),
  << ?xGetKeyboardMappingReq(R#xGetKeyboardMappingReq.firstKeyCode,R#xGetKeyboardMappingReq.count,0)>>).

-define(xGetKeyboardMappingReq_dec(B0),
 begin <<?xGetKeyboardMappingReq(R_xGetKeyboardMappingReq_firstKeyCode, R_xGetKeyboardMappingReq_count, _),B1/binary>> = B0,
  { #xGetKeyboardMappingReq{firstKeyCode=R_xGetKeyboardMappingReq_firstKeyCode, count=R_xGetKeyboardMappingReq_count }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeKeyboardMappingReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeKeyboardMappingReq,{
    firstKeyCode,
    keySymsPerKeyCode
}).

-define(xChangeKeyboardMappingReq(FirstKeyCode,KeySymsPerKeyCode,Pad1),
    ?KEYCODE(FirstKeyCode),
    ?CARD8(KeySymsPerKeyCode),
    ?CARD16(Pad1)).

-define(xChangeKeyboardMappingReq_enc(R),
  << ?xChangeKeyboardMappingReq(R#xChangeKeyboardMappingReq.firstKeyCode,R#xChangeKeyboardMappingReq.keySymsPerKeyCode,0)>>).

-define(xChangeKeyboardMappingReq_dec(B0),
 begin <<?xChangeKeyboardMappingReq(R_xChangeKeyboardMappingReq_firstKeyCode, R_xChangeKeyboardMappingReq_keySymsPerKeyCode, _),B1/binary>> = B0,
  { #xChangeKeyboardMappingReq{firstKeyCode=R_xChangeKeyboardMappingReq_firstKeyCode, keySymsPerKeyCode=R_xChangeKeyboardMappingReq_keySymsPerKeyCode }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeKeyboardControlReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeKeyboardControlReq,{
    mask
}).

-define(xChangeKeyboardControlReq(Mask),
    ?CARD32(Mask)).

-define(xChangeKeyboardControlReq_enc(R),
  << ?xChangeKeyboardControlReq(R#xChangeKeyboardControlReq.mask)>>).

-define(xChangeKeyboardControlReq_dec(B0),
 begin <<?xChangeKeyboardControlReq(R_xChangeKeyboardControlReq_mask),B1/binary>> = B0,
  { #xChangeKeyboardControlReq{mask=R_xChangeKeyboardControlReq_mask }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xBellReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xBellReq,{
}).

-define(xBellReq(),
).

-define(xBellReq_enc(R),
  << ?xBellReq()>>).

-define(xBellReq_dec(B0),
 begin <<?xBellReq(),B1/binary>> = B0,
  { #xBellReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangePointerControlReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangePointerControlReq,{
    accelNum,
    accelDenum,
    threshold,
    doAccel,
    doThresh
}).

-define(xChangePointerControlReq(AccelNum,AccelDenum,Threshold,DoAccel,DoThresh),
    ?INT16(AccelNum),
    ?INT16(AccelDenum),
    ?INT16(Threshold),
    ?BOOL(DoAccel),
    ?BOOL(DoThresh)).

-define(xChangePointerControlReq_enc(R),
  << ?xChangePointerControlReq(R#xChangePointerControlReq.accelNum,R#xChangePointerControlReq.accelDenum,R#xChangePointerControlReq.threshold,R#xChangePointerControlReq.doAccel,R#xChangePointerControlReq.doThresh)>>).

-define(xChangePointerControlReq_dec(B0),
 begin <<?xChangePointerControlReq(R_xChangePointerControlReq_accelNum, R_xChangePointerControlReq_accelDenum, R_xChangePointerControlReq_threshold, R_xChangePointerControlReq_doAccel, R_xChangePointerControlReq_doThresh),B1/binary>> = B0,
  { #xChangePointerControlReq{accelNum=R_xChangePointerControlReq_accelNum, accelDenum=R_xChangePointerControlReq_accelDenum, threshold=R_xChangePointerControlReq_threshold, doAccel=R_xChangePointerControlReq_doAccel, doThresh=R_xChangePointerControlReq_doThresh }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetScreenSaverReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetScreenSaverReq,{
    timeout,
    interval,
    preferBlank,
    allowExpose
}).

-define(xSetScreenSaverReq(Timeout,Interval,PreferBlank,AllowExpose,Pad2),
    ?INT16(Timeout),
    ?INT16(Interval),
    ?BYTE(PreferBlank),
    ?BYTE(AllowExpose),
    ?CARD16(Pad2)).

-define(xSetScreenSaverReq_enc(R),
  << ?xSetScreenSaverReq(R#xSetScreenSaverReq.timeout,R#xSetScreenSaverReq.interval,R#xSetScreenSaverReq.preferBlank,R#xSetScreenSaverReq.allowExpose,0)>>).

-define(xSetScreenSaverReq_dec(B0),
 begin <<?xSetScreenSaverReq(R_xSetScreenSaverReq_timeout, R_xSetScreenSaverReq_interval, R_xSetScreenSaverReq_preferBlank, R_xSetScreenSaverReq_allowExpose, _),B1/binary>> = B0,
  { #xSetScreenSaverReq{timeout=R_xSetScreenSaverReq_timeout, interval=R_xSetScreenSaverReq_interval, preferBlank=R_xSetScreenSaverReq_preferBlank, allowExpose=R_xSetScreenSaverReq_allowExpose }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeHostsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeHostsReq,{
    hostFamily,
    hostLength
}).

-define(xChangeHostsReq(HostFamily,Pad,HostLength),
    ?CARD8(HostFamily),
    ?BYTE(Pad),
    ?CARD16(HostLength)).

-define(xChangeHostsReq_enc(R),
  << ?xChangeHostsReq(R#xChangeHostsReq.hostFamily,0,R#xChangeHostsReq.hostLength)>>).

-define(xChangeHostsReq_dec(B0),
 begin <<?xChangeHostsReq(R_xChangeHostsReq_hostFamily, _, R_xChangeHostsReq_hostLength),B1/binary>> = B0,
  { #xChangeHostsReq{hostFamily=R_xChangeHostsReq_hostFamily, hostLength=R_xChangeHostsReq_hostLength }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xListHostsReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xListHostsReq,{
}).

-define(xListHostsReq(),
).

-define(xListHostsReq_enc(R),
  << ?xListHostsReq()>>).

-define(xListHostsReq_dec(B0),
 begin <<?xListHostsReq(),B1/binary>> = B0,
  { #xListHostsReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xChangeModeReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xChangeModeReq,{
}).

-define(xChangeModeReq(),
).

-define(xChangeModeReq_enc(R),
  << ?xChangeModeReq()>>).

-define(xChangeModeReq_dec(B0),
 begin <<?xChangeModeReq(),B1/binary>> = B0,
  { #xChangeModeReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetAccessControlReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetAccessControlReq,{
}).

-define(xSetAccessControlReq(),
).

-define(xSetAccessControlReq_enc(R),
  << ?xSetAccessControlReq()>>).

-define(xSetAccessControlReq_dec(B0),
 begin <<?xSetAccessControlReq(),B1/binary>> = B0,
  { #xSetAccessControlReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xSetCloseDownModeReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xSetCloseDownModeReq,{
}).

-define(xSetCloseDownModeReq(),
).

-define(xSetCloseDownModeReq_enc(R),
  << ?xSetCloseDownModeReq()>>).

-define(xSetCloseDownModeReq_dec(B0),
 begin <<?xSetCloseDownModeReq(),B1/binary>> = B0,
  { #xSetCloseDownModeReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xForceScreenSaverReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xForceScreenSaverReq,{
}).

-define(xForceScreenSaverReq(),
).

-define(xForceScreenSaverReq_enc(R),
  << ?xForceScreenSaverReq()>>).

-define(xForceScreenSaverReq_dec(B0),
 begin <<?xForceScreenSaverReq(),B1/binary>> = B0,
  { #xForceScreenSaverReq{ }, B1} end).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% xRotatePropertiesReq
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-record(xRotatePropertiesReq,{
    window,
    nAtoms,
    nPositions
}).

-define(xRotatePropertiesReq(Window,NAtoms,NPositions),
    ?WINDOW(Window),
    ?CARD16(NAtoms),
    ?INT16(NPositions)).

-define(xRotatePropertiesReq_enc(R),
  << ?xRotatePropertiesReq(R#xRotatePropertiesReq.window,R#xRotatePropertiesReq.nAtoms,R#xRotatePropertiesReq.nPositions)>>).

-define(xRotatePropertiesReq_dec(B0),
 begin <<?xRotatePropertiesReq(R_xRotatePropertiesReq_window, R_xRotatePropertiesReq_nAtoms, R_xRotatePropertiesReq_nPositions),B1/binary>> = B0,
  { #xRotatePropertiesReq{window=R_xRotatePropertiesReq_window, nAtoms=R_xRotatePropertiesReq_nAtoms, nPositions=R_xRotatePropertiesReq_nPositions }, B1} end).


-define(X_Reply,1).
-define(X_Error,0).
-define(X_CreateWindow,1).
-define(X_ChangeWindowAttributes,2).
-define(X_GetWindowAttributes,3).
-define(X_DestroyWindow,4).
-define(X_DestroySubwindows,5).
-define(X_ChangeSaveSet,6).
-define(X_ReparentWindow,7).
-define(X_MapWindow,8).
-define(X_MapSubwindows,9).
-define(X_UnmapWindow,10).
-define(X_UnmapSubwindows,11).
-define(X_ConfigureWindow,12).
-define(X_CirculateWindow,13).
-define(X_GetGeometry,14).
-define(X_QueryTree,15).
-define(X_InternAtom,16).
-define(X_GetAtomName,17).
-define(X_ChangeProperty,18).
-define(X_DeleteProperty,19).
-define(X_GetProperty,20).
-define(X_ListProperties,21).
-define(X_SetSelectionOwner,22).
-define(X_GetSelectionOwner,23).
-define(X_ConvertSelection,24).
-define(X_SendEvent,25).
-define(X_GrabPointer,26).
-define(X_UngrabPointer,27).
-define(X_GrabButton,28).
-define(X_UngrabButton,29).
-define(X_ChangeActivePointerGrab,30).
-define(X_GrabKeyboard,31).
-define(X_UngrabKeyboard,32).
-define(X_GrabKey,33).
-define(X_UngrabKey,34).
-define(X_AllowEvents,35).
-define(X_GrabServer,36).
-define(X_UngrabServer,37).
-define(X_QueryPointer,38).
-define(X_GetMotionEvents,39).
-define(X_TranslateCoords,40).
-define(X_WarpPointer,41).
-define(X_SetInputFocus,42).
-define(X_GetInputFocus,43).
-define(X_QueryKeymap,44).
-define(X_OpenFont,45).
-define(X_CloseFont,46).
-define(X_QueryFont,47).
-define(X_QueryTextExtents,48).
-define(X_ListFonts,49).
-define(X_ListFontsWithInfo,50).
-define(X_SetFontPath,51).
-define(X_GetFontPath,52).
-define(X_CreatePixmap,53).
-define(X_FreePixmap,54).
-define(X_CreateGC,55).
-define(X_ChangeGC,56).
-define(X_CopyGC,57).
-define(X_SetDashes,58).
-define(X_SetClipRectangles,59).
-define(X_FreeGC,60).
-define(X_ClearArea,61).
-define(X_CopyArea,62).
-define(X_CopyPlane,63).
-define(X_PolyPoint,64).
-define(X_PolyLine,65).
-define(X_PolySegment,66).
-define(X_PolyRectangle,67).
-define(X_PolyArc,68).
-define(X_FillPoly,69).
-define(X_PolyFillRectangle,70).
-define(X_PolyFillArc,71).
-define(X_PutImage,72).
-define(X_GetImage,73).
-define(X_PolyText8,74).
-define(X_PolyText16,75).
-define(X_ImageText8,76).
-define(X_ImageText16,77).
-define(X_CreateColormap,78).
-define(X_FreeColormap,79).
-define(X_CopyColormapAndFree,80).
-define(X_InstallColormap,81).
-define(X_UninstallColormap,82).
-define(X_ListInstalledColormaps,83).
-define(X_AllocColor,84).
-define(X_AllocNamedColor,85).
-define(X_AllocColorCells,86).
-define(X_AllocColorPlanes,87).
-define(X_FreeColors,88).
-define(X_StoreColors,89).
-define(X_StoreNamedColor,90).
-define(X_QueryColors,91).
-define(X_LookupColor,92).
-define(X_CreateCursor,93).
-define(X_CreateGlyphCursor,94).
-define(X_FreeCursor,95).
-define(X_RecolorCursor,96).
-define(X_QueryBestSize,97).
-define(X_QueryExtension,98).
-define(X_ListExtensions,99).
-define(X_ChangeKeyboardMapping,100).
-define(X_GetKeyboardMapping,101).
-define(X_ChangeKeyboardControl,102).
-define(X_GetKeyboardControl,103).
-define(X_Bell,104).
-define(X_ChangePointerControl,105).
-define(X_GetPointerControl,106).
-define(X_SetScreenSaver,107).
-define(X_GetScreenSaver,108).
-define(X_ChangeHosts,109).
-define(X_ListHosts,110).
-define(X_SetAccessControl,111).
-define(X_SetCloseDownMode,112).
-define(X_KillClient,113).
-define(X_RotateProperties,114).
-define(X_ForceScreenSaver,115).
-define(X_SetPointerMapping,116).
-define(X_GetPointerMapping,117).
-define(X_SetModifierMapping,118).
-define(X_GetModifierMapping,119).
-define(X_NoOperation,127).
